# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v2/events.proto, mint/v2/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import v1beta1 as _v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto.Message):
    """
    UpdateParams allows an update to the minting parameters of the module.
    """

    sender: str = betterproto.string_field(1)
    params: "_v1_beta1__.Params" = betterproto.message_field(2)
    """
    params defines the x/mint parameters to update.
    
     NOTE: All parameters must be supplied.
    """

    recalculate_target_emission: bool = betterproto.bool_field(3)
    """
    allow updating params to also force a recalculation of the target emission
    """

    blocks_per_month: int = betterproto.uint64_field(4)
    """
    blocksPerMonth is used/updateable by both the mint and emissions module.
    """


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
     MsgUpdateParams message.
    """

    pass


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionRequest(betterproto.Message):
    """
    Force a recalculation of the target emission right now.
     This indirectly controls recalculating the inflation rate for the network
     and the stakers APY %.
    """

    sender: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RecalculateTargetEmissionResponse(betterproto.Message):
    """response from recalculating the target emission"""

    pass


@dataclass(eq=False, repr=False)
class EventTokenomicsSet(betterproto.Message):
    staked_token_amount: str = betterproto.string_field(1)
    circulating_supply: str = betterproto.string_field(2)
    emissions_amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class EventEcosystemTokenMintSet(betterproto.Message):
    block_height: int = betterproto.uint64_field(1)
    token_amount: str = betterproto.string_field(2)


class MsgServiceStub(betterproto.ServiceStub):
    async def update_params(
        self,
        update_params_request: "UpdateParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateParamsResponse":
        return await self._unary_unary(
            "/mint.v2.MsgService/UpdateParams",
            update_params_request,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def recalculate_target_emission(
        self,
        recalculate_target_emission_request: "RecalculateTargetEmissionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RecalculateTargetEmissionResponse":
        return await self._unary_unary(
            "/mint.v2.MsgService/RecalculateTargetEmission",
            recalculate_target_emission_request,
            RecalculateTargetEmissionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgServiceBase(ServiceBase):

    async def update_params(
        self, update_params_request: "UpdateParamsRequest"
    ) -> "UpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def recalculate_target_emission(
        self, recalculate_target_emission_request: "RecalculateTargetEmissionRequest"
    ) -> "RecalculateTargetEmissionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[UpdateParamsRequest, UpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_recalculate_target_emission(
        self,
        stream: "grpclib.server.Stream[RecalculateTargetEmissionRequest, RecalculateTargetEmissionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.recalculate_target_emission(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/mint.v2.MsgService/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateParamsRequest,
                UpdateParamsResponse,
            ),
            "/mint.v2.MsgService/RecalculateTargetEmission": grpclib.const.Handler(
                self.__rpc_recalculate_target_emission,
                grpclib.const.Cardinality.UNARY_UNARY,
                RecalculateTargetEmissionRequest,
                RecalculateTargetEmissionResponse,
            ),
        }
