# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v1beta1/genesis.proto, mint/v1beta1/query.proto, mint/v1beta1/tx.proto, mint/v1beta1/types.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the x/mint module."""

    mint_denom: str = betterproto.string_field(1)
    """type of coin to mint"""

    max_supply: str = betterproto.string_field(2)
    """maximum total supply of the coin"""

    f_emission: str = betterproto.string_field(3)
    """ecosystem treasury fraction ideally emitted per unit time"""

    one_month_smoothing_degree: str = betterproto.string_field(4)
    """
    one month exponential moving average smoothing factor, alpha_e in the paper
    """

    ecosystem_treasury_percent_of_total_supply: str = betterproto.string_field(5)
    """
    percentage of the total supply is reserved and locked in the ecosystem
     treasury
    """

    foundation_treasury_percent_of_total_supply: str = betterproto.string_field(6)
    """
    percentage of the total supply that is unlocked and usable in the
     foundation treasury
    """

    participants_percent_of_total_supply: str = betterproto.string_field(7)
    """
    percentage of the total supply that is unlocked and usable by partipicants
     at the genesis
    """

    investors_percent_of_total_supply: str = betterproto.string_field(8)
    """
    percentage of the total supply that is locked in the investors bucket at
     the genesis
    """

    team_percent_of_total_supply: str = betterproto.string_field(9)
    """
    percentage of the total supply that is locked in the team bucket at the
     genesis
    """

    maximum_monthly_percentage_yield: str = betterproto.string_field(10)
    """The capped max monthly percentage yield (like %APY)"""

    investors_preseed_percent_of_total_supply: str = betterproto.string_field(11)
    """
    percentage of the total supply that is locked in the preseed investors
     bucket at the genesis
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """
    MsgUpdateParams is the Msg/UpdateParams request type.

     Since: cosmos-sdk 0.47
    """

    sender: str = betterproto.string_field(1)
    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/mint parameters to update.
    
     NOTE: All parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
     MsgUpdateParams message.

     Since: cosmos-sdk 0.47
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryInflationRequest(betterproto.Message):
    """
    QueryInflationRequest is the request type for the Query/Inflation RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryInflationResponse(betterproto.Message):
    """
    QueryInflationResponse is the response type for the Query/Inflation RPC
     method.
    """

    inflation: bytes = betterproto.bytes_field(1)
    """inflation is the current minting inflation value."""


@dataclass(eq=False, repr=False)
class QueryEmissionInfoRequest(betterproto.Message):
    """query for a big dump of mint module info"""

    pass


@dataclass(eq=False, repr=False)
class QueryEmissionInfoResponse(betterproto.Message):
    """return information about the emissions rate on query"""

    params: "Params" = betterproto.message_field(1)
    ecosystem_balance: str = betterproto.string_field(2)
    previous_block_emission: str = betterproto.string_field(3)
    ecosystem_mint_supply_remaining: str = betterproto.string_field(4)
    blocks_per_month: int = betterproto.uint64_field(5)
    block_height_target_e_i_last_calculated: int = betterproto.uint64_field(6)
    block_height_target_e_i_next_calculated: int = betterproto.uint64_field(7)
    network_staked_tokens: str = betterproto.string_field(8)
    locked_vesting_tokens_total: str = betterproto.string_field(9)
    locked_vesting_tokens_investors_preseed: str = betterproto.string_field(10)
    locked_vesting_tokens_investors_seed: str = betterproto.string_field(11)
    locked_vesting_tokens_team: str = betterproto.string_field(12)
    ecosystem_locked: str = betterproto.string_field(13)
    circulating_supply: str = betterproto.string_field(14)
    max_supply: str = betterproto.string_field(15)
    target_emission_rate_per_unit_staked_token: str = betterproto.string_field(16)
    reputers_percent: str = betterproto.string_field(17)
    validators_percent: str = betterproto.string_field(18)
    maximum_monthly_emission_per_unit_staked_token: str = betterproto.string_field(19)
    target_reward_emission_per_unit_staked_token: str = betterproto.string_field(20)
    emission_per_unit_staked_token: str = betterproto.string_field(21)
    emission_per_month: str = betterproto.string_field(22)
    block_emission: str = betterproto.string_field(23)
    validator_cut: str = betterproto.string_field(24)
    allora_rewards_cut: str = betterproto.string_field(25)
    previous_reward_emission_per_unit_staked_token: str = betterproto.string_field(26)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the mint module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    previous_reward_emission_per_unit_staked_token: str = betterproto.string_field(2)
    """previous target emission rewards per unit staked token"""

    previous_block_emission: str = betterproto.string_field(3)
    ecosystem_tokens_minted: str = betterproto.string_field(4)
    """number of tokens minted into the ecosystem treasury"""


class MsgStub(betterproto.ServiceStub):
    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/mint.v1beta1.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/mint.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def inflation(
        self,
        query_inflation_request: "QueryInflationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryInflationResponse":
        return await self._unary_unary(
            "/mint.v1beta1.Query/Inflation",
            query_inflation_request,
            QueryInflationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def emission_info(
        self,
        query_emission_info_request: "QueryEmissionInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryEmissionInfoResponse":
        return await self._unary_unary(
            "/mint.v1beta1.Query/EmissionInfo",
            query_emission_info_request,
            QueryEmissionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/mint.v1beta1.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def inflation(
        self, query_inflation_request: "QueryInflationRequest"
    ) -> "QueryInflationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def emission_info(
        self, query_emission_info_request: "QueryEmissionInfoRequest"
    ) -> "QueryEmissionInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_inflation(
        self,
        stream: "grpclib.server.Stream[QueryInflationRequest, QueryInflationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.inflation(request)
        await stream.send_message(response)

    async def __rpc_emission_info(
        self,
        stream: "grpclib.server.Stream[QueryEmissionInfoRequest, QueryEmissionInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.emission_info(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/mint.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/mint.v1beta1.Query/Inflation": grpclib.const.Handler(
                self.__rpc_inflation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInflationRequest,
                QueryInflationResponse,
            ),
            "/mint.v1beta1.Query/EmissionInfo": grpclib.const.Handler(
                self.__rpc_emission_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryEmissionInfoRequest,
                QueryEmissionInfoResponse,
            ),
        }
