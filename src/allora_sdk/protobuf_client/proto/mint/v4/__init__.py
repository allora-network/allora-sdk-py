# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: mint/v4/genesis.proto, mint/v4/query.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import v1beta1 as _v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class QueryServiceParamsRequest(betterproto.Message):
    """
    QueryServiceParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryServiceParamsResponse(betterproto.Message):
    """
    QueryServiceParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "_v1_beta1__.Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryServiceInflationRequest(betterproto.Message):
    """
    QueryServiceInflationRequest is the request type for the Query/Inflation RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryServiceInflationResponse(betterproto.Message):
    """
    QueryServiceInflationResponse is the response type for the Query/Inflation RPC
     method.
    """

    inflation: bytes = betterproto.bytes_field(1)
    """inflation is the current minting inflation value."""


@dataclass(eq=False, repr=False)
class QueryServiceEmissionInfoRequest(betterproto.Message):
    """query for a big dump of mint module info"""

    pass


@dataclass(eq=False, repr=False)
class QueryServiceEmissionInfoResponse(betterproto.Message):
    """return information about the emissions rate on query"""

    params: "_v1_beta1__.Params" = betterproto.message_field(1)
    ecosystem_balance: str = betterproto.string_field(2)
    previous_block_emission: str = betterproto.string_field(3)
    ecosystem_mint_supply_remaining: str = betterproto.string_field(4)
    blocks_per_month: int = betterproto.uint64_field(5)
    block_height_target_e_i_last_calculated: int = betterproto.uint64_field(6)
    block_height_target_e_i_next_calculated: int = betterproto.uint64_field(7)
    network_staked_tokens: str = betterproto.string_field(8)
    locked_vesting_tokens_total: str = betterproto.string_field(9)
    locked_vesting_tokens_investors_preseed: str = betterproto.string_field(10)
    locked_vesting_tokens_investors_seed: str = betterproto.string_field(11)
    locked_vesting_tokens_team: str = betterproto.string_field(12)
    ecosystem_locked: str = betterproto.string_field(13)
    circulating_supply: str = betterproto.string_field(14)
    max_supply: str = betterproto.string_field(15)
    target_emission_rate_per_unit_staked_token: str = betterproto.string_field(16)
    reputers_percent: str = betterproto.string_field(17)
    validators_percent: str = betterproto.string_field(18)
    maximum_monthly_emission_per_unit_staked_token: str = betterproto.string_field(19)
    target_reward_emission_per_unit_staked_token: str = betterproto.string_field(20)
    emission_per_unit_staked_token: str = betterproto.string_field(21)
    emission_per_month: str = betterproto.string_field(22)
    block_emission: str = betterproto.string_field(23)
    validator_cut: str = betterproto.string_field(24)
    allora_rewards_cut: str = betterproto.string_field(25)
    previous_reward_emission_per_unit_staked_token: str = betterproto.string_field(26)
    months_already_unlocked: str = betterproto.string_field(27)
    updated_months_unlocked: str = betterproto.string_field(28)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the mint module's genesis state."""

    params: "_v1_beta1__.Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    previous_reward_emission_per_unit_staked_token: str = betterproto.string_field(2)
    """previous target emission rewards per unit staked token"""

    previous_block_emission: str = betterproto.string_field(3)
    ecosystem_tokens_minted: str = betterproto.string_field(4)
    """number of tokens minted into the ecosystem treasury"""

    months_unlocked: str = betterproto.string_field(5)
    """
    number of months already unlocked for investor token vesting purposes
    """


class QueryServiceStub(betterproto.ServiceStub):
    async def params(
        self,
        query_service_params_request: "QueryServiceParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryServiceParamsResponse":
        return await self._unary_unary(
            "/mint.v4.QueryService/Params",
            query_service_params_request,
            QueryServiceParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def inflation(
        self,
        query_service_inflation_request: "QueryServiceInflationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryServiceInflationResponse":
        return await self._unary_unary(
            "/mint.v4.QueryService/Inflation",
            query_service_inflation_request,
            QueryServiceInflationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def emission_info(
        self,
        query_service_emission_info_request: "QueryServiceEmissionInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryServiceEmissionInfoResponse":
        return await self._unary_unary(
            "/mint.v4.QueryService/EmissionInfo",
            query_service_emission_info_request,
            QueryServiceEmissionInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceBase(ServiceBase):

    async def params(
        self, query_service_params_request: "QueryServiceParamsRequest"
    ) -> "QueryServiceParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def inflation(
        self, query_service_inflation_request: "QueryServiceInflationRequest"
    ) -> "QueryServiceInflationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def emission_info(
        self, query_service_emission_info_request: "QueryServiceEmissionInfoRequest"
    ) -> "QueryServiceEmissionInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self,
        stream: "grpclib.server.Stream[QueryServiceParamsRequest, QueryServiceParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_inflation(
        self,
        stream: "grpclib.server.Stream[QueryServiceInflationRequest, QueryServiceInflationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.inflation(request)
        await stream.send_message(response)

    async def __rpc_emission_info(
        self,
        stream: "grpclib.server.Stream[QueryServiceEmissionInfoRequest, QueryServiceEmissionInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.emission_info(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/mint.v4.QueryService/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryServiceParamsRequest,
                QueryServiceParamsResponse,
            ),
            "/mint.v4.QueryService/Inflation": grpclib.const.Handler(
                self.__rpc_inflation,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryServiceInflationRequest,
                QueryServiceInflationResponse,
            ),
            "/mint.v4.QueryService/EmissionInfo": grpclib.const.Handler(
                self.__rpc_emission_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryServiceEmissionInfoRequest,
                QueryServiceEmissionInfoResponse,
            ),
        }
