# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v1/node.proto, emissions/v1/nonce.proto, emissions/v1/reputer.proto, emissions/v1/topic.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    List,
)

import betterproto


@dataclass(eq=False, repr=False)
class OffchainNode(betterproto.Message):
    lib_p2_p_key: str = betterproto.string_field(1)
    multi_address: str = betterproto.string_field(2)
    owner: str = betterproto.string_field(3)
    node_address: str = betterproto.string_field(4)
    node_id: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class Nonce(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class Nonces(betterproto.Message):
    nonces: List["Nonce"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReputerRequestNonce(betterproto.Message):
    reputer_nonce: "Nonce" = betterproto.message_field(1)
    """
    the reputers should respond to the reputer request with losses for work
     found at this worker nonce
    """


@dataclass(eq=False, repr=False)
class ReputerRequestNonces(betterproto.Message):
    nonces: List["ReputerRequestNonce"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Topic(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    creator: str = betterproto.string_field(2)
    metadata: str = betterproto.string_field(3)
    loss_logic: str = betterproto.string_field(4)
    loss_method: str = betterproto.string_field(5)
    inference_logic: str = betterproto.string_field(6)
    inference_method: str = betterproto.string_field(7)
    epoch_last_ended: int = betterproto.int64_field(8)
    epoch_length: int = betterproto.int64_field(9)
    ground_truth_lag: int = betterproto.int64_field(10)
    default_arg: str = betterproto.string_field(11)
    p_norm: str = betterproto.string_field(12)
    alpha_regret: str = betterproto.string_field(13)
    allow_negative: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class TopicList(betterproto.Message):
    topics: List["Topic"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TimestampedActorNonce(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    actor: str = betterproto.string_field(2)
    nonce: "Nonce" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WorkerAttributedValue(betterproto.Message):
    worker: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WithheldWorkerAttributedValue(betterproto.Message):
    worker: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ValueBundle(betterproto.Message):
    """
    These losses and inferences are calculated per reputer or by the network
     The `m`s in the comments below exist for when they're made by reputers,
     but they may be absent implying that they were made by the network
    """

    topic_id: int = betterproto.uint64_field(1)
    reputer_request_nonce: "ReputerRequestNonce" = betterproto.message_field(2)
    reputer: str = betterproto.string_field(3)
    extra_data: bytes = betterproto.bytes_field(4)
    combined_value: str = betterproto.string_field(5)
    """R_im || log10 L_im || I_i"""

    inferer_values: List["WorkerAttributedValue"] = betterproto.message_field(6)
    """R_ijm || log10 L_ijm || I_ij"""

    forecaster_values: List["WorkerAttributedValue"] = betterproto.message_field(7)
    """R_ikm || log10 L_ikm || I_ik"""

    naive_value: str = betterproto.string_field(8)
    """R^-_im  || log10 L^-_im || I^-_i"""

    one_out_inferer_values: List["WithheldWorkerAttributedValue"] = (
        betterproto.message_field(9)
    )
    """
    R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
     Note: forecast-implied inferences are recomputed for each left-out
     inference
    """

    one_out_forecaster_values: List["WithheldWorkerAttributedValue"] = (
        betterproto.message_field(10)
    )
    """R^-_ilm || log10 L^-_ilm || I^-_il where l = any k"""

    one_in_forecaster_values: List["WorkerAttributedValue"] = betterproto.message_field(
        11
    )
    """
    R^+_ikm || log10 L^+_ikm || I^+_ik
     aka one_in_forecaster_values because equivalent to using only one
     forecast-implied inference
    """


@dataclass(eq=False, repr=False)
class ReputerValueBundle(betterproto.Message):
    """
    For when the bundle is computed on a per-reputer basis (ie.. if there is an
     index `m` in the above)
    """

    value_bundle: "ValueBundle" = betterproto.message_field(1)
    signature: bytes = betterproto.bytes_field(2)
    pubkey: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReputerValueBundles(betterproto.Message):
    reputer_value_bundles: List["ReputerValueBundle"] = betterproto.message_field(1)
