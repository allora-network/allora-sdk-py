# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v6/genesis.proto, emissions/v6/params.proto, emissions/v6/query.proto, emissions/v6/tx.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import v3 as _v3__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class OptionalParams(betterproto.Message):
    """
    Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
     and including google themselves
     https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
     we instead use a repeated field with a single element to represent an
     optional field and if the repeated field is empty, it is considered to be the
     same as if the field was not set
    """

    version: List[str] = betterproto.string_field(1)
    max_serialized_msg_length: List[int] = betterproto.int64_field(2)
    min_topic_weight: List[str] = betterproto.string_field(3)
    required_minimum_stake: List[str] = betterproto.string_field(5)
    remove_stake_delay_window: List[int] = betterproto.int64_field(6)
    min_epoch_length: List[int] = betterproto.int64_field(7)
    beta_entropy: List[str] = betterproto.string_field(8)
    learning_rate: List[str] = betterproto.string_field(9)
    max_gradient_threshold: List[str] = betterproto.string_field(10)
    min_stake_fraction: List[str] = betterproto.string_field(11)
    max_unfulfilled_worker_requests: List[int] = betterproto.uint64_field(13)
    max_unfulfilled_reputer_requests: List[int] = betterproto.uint64_field(14)
    topic_reward_stake_importance: List[str] = betterproto.string_field(15)
    topic_reward_fee_revenue_importance: List[str] = betterproto.string_field(16)
    topic_reward_alpha: List[str] = betterproto.string_field(17)
    task_reward_alpha: List[str] = betterproto.string_field(18)
    validators_vs_allora_percent_reward: List[str] = betterproto.string_field(19)
    max_samples_to_scale_scores: List[int] = betterproto.uint64_field(20)
    max_top_inferers_to_reward: List[int] = betterproto.uint64_field(21)
    max_top_forecasters_to_reward: List[int] = betterproto.uint64_field(22)
    max_top_reputers_to_reward: List[int] = betterproto.uint64_field(23)
    create_topic_fee: List[str] = betterproto.string_field(24)
    gradient_descent_max_iters: List[int] = betterproto.uint64_field(25)
    registration_fee: List[str] = betterproto.string_field(28)
    default_page_limit: List[int] = betterproto.uint64_field(29)
    max_page_limit: List[int] = betterproto.uint64_field(30)
    min_epoch_length_record_limit: List[int] = betterproto.int64_field(31)
    blocks_per_month: List[int] = betterproto.uint64_field(32)
    p_reward_inference: List[str] = betterproto.string_field(33)
    p_reward_forecast: List[str] = betterproto.string_field(34)
    p_reward_reputer: List[str] = betterproto.string_field(35)
    c_reward_inference: List[str] = betterproto.string_field(36)
    c_reward_forecast: List[str] = betterproto.string_field(37)
    c_norm: List[str] = betterproto.string_field(38)
    epsilon_reputer: List[str] = betterproto.string_field(40)
    half_max_process_stake_removals_end_block: List[int] = betterproto.uint64_field(42)
    data_sending_fee: List[str] = betterproto.string_field(43)
    epsilon_safe_div: List[str] = betterproto.string_field(44)
    max_elements_per_forecast: List[int] = betterproto.uint64_field(45)
    max_active_topics_per_block: List[int] = betterproto.uint64_field(46)
    max_string_length: List[int] = betterproto.uint64_field(47)
    initial_regret_quantile: List[str] = betterproto.string_field(48)
    p_norm_safe_div: List[str] = betterproto.string_field(49)
    global_whitelist_enabled: List[bool] = betterproto.bool_field(50)
    topic_creator_whitelist_enabled: List[bool] = betterproto.bool_field(51)
    min_experienced_worker_regrets: List[int] = betterproto.uint64_field(52)


@dataclass(eq=False, repr=False)
class UpdateParamsRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    params: "OptionalParams" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CreateNewTopicRequest(betterproto.Message):
    creator: str = betterproto.string_field(1)
    """creator is the message sender."""

    metadata: str = betterproto.string_field(2)
    loss_method: str = betterproto.string_field(4)
    epoch_length: int = betterproto.int64_field(7)
    ground_truth_lag: int = betterproto.int64_field(8)
    p_norm: str = betterproto.string_field(10)
    alpha_regret: str = betterproto.string_field(11)
    allow_negative: bool = betterproto.bool_field(12)
    epsilon: str = betterproto.string_field(13)
    worker_submission_window: int = betterproto.int64_field(14)
    merit_sortition_alpha: str = betterproto.string_field(15)
    active_inferer_quantile: str = betterproto.string_field(16)
    active_forecaster_quantile: str = betterproto.string_field(17)
    active_reputer_quantile: str = betterproto.string_field(18)
    enable_worker_whitelist: bool = betterproto.bool_field(19)
    enable_reputer_whitelist: bool = betterproto.bool_field(20)


@dataclass(eq=False, repr=False)
class CreateNewTopicResponse(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    reputer_value_bundle: "_v3__.ReputerValueBundle" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InsertReputerPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    worker_data_bundle: "_v3__.WorkerDataBundle" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class InsertWorkerPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RegisterRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(4)
    owner: str = betterproto.string_field(5)
    is_reputer: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class RegisterResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveRegistrationRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    is_reputer: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class RemoveRegistrationResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AddStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RemoveStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CancelRemoveStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class CancelRemoveStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DelegateStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    reputer: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class RemoveDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CancelRemoveDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RewardDelegateStakeRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RewardDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class FundTopicRequest(betterproto.Message):
    """
    Inferences are requested by consumers who fund topics by sending ALLO to
     ecosystem account via TopicFund messages
    """

    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class FundTopicResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddToWhitelistAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveFromWhitelistAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EnableTopicWorkerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class EnableTopicWorkerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DisableTopicWorkerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class DisableTopicWorkerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EnableTopicReputerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class EnableTopicReputerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class DisableTopicReputerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class DisableTopicReputerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddToGlobalWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddToGlobalWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveFromGlobalWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddToTopicCreatorWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AddToTopicCreatorWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveFromTopicCreatorWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RemoveFromTopicCreatorWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddToTopicWorkerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class AddToTopicWorkerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveFromTopicWorkerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class RemoveFromTopicWorkerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class AddToTopicReputerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class AddToTopicReputerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class RemoveFromTopicReputerWhitelistRequest(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class RemoveFromTopicReputerWhitelistResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters of the module."""

    version: str = betterproto.string_field(1)
    max_serialized_msg_length: int = betterproto.int64_field(2)
    """github release tag version"""

    min_topic_weight: str = betterproto.string_field(3)
    required_minimum_stake: str = betterproto.string_field(5)
    """solicatation or weight-adjustment"""

    remove_stake_delay_window: int = betterproto.int64_field(6)
    min_epoch_length: int = betterproto.int64_field(7)
    beta_entropy: str = betterproto.string_field(8)
    """repeating inference request"""

    learning_rate: str = betterproto.string_field(9)
    max_gradient_threshold: str = betterproto.string_field(10)
    min_stake_fraction: str = betterproto.string_field(11)
    max_unfulfilled_worker_requests: int = betterproto.uint64_field(13)
    """coefficients"""

    max_unfulfilled_reputer_requests: int = betterproto.uint64_field(14)
    topic_reward_stake_importance: str = betterproto.string_field(15)
    topic_reward_fee_revenue_importance: str = betterproto.string_field(16)
    """topic and has a fiducial value of 0.5"""

    topic_reward_alpha: str = betterproto.string_field(17)
    """a topic and has a fiducial value of 0.5"""

    task_reward_alpha: str = betterproto.string_field(18)
    """a monthly timescale, 0.5 for weekly updates"""

    validators_vs_allora_percent_reward: str = betterproto.string_field(19)
    """to calculate ~U_ij, ~V_ik, ~W_im"""

    max_samples_to_scale_scores: int = betterproto.uint64_field(20)
    """to allora reputers workers etc"""

    max_top_inferers_to_reward: int = betterproto.uint64_field(21)
    max_top_forecasters_to_reward: int = betterproto.uint64_field(22)
    max_top_reputers_to_reward: int = betterproto.uint64_field(23)
    create_topic_fee: str = betterproto.string_field(24)
    gradient_descent_max_iters: int = betterproto.uint64_field(25)
    registration_fee: str = betterproto.string_field(28)
    default_page_limit: int = betterproto.uint64_field(29)
    max_page_limit: int = betterproto.uint64_field(30)
    min_epoch_length_record_limit: int = betterproto.int64_field(31)
    """
    min number of epochs to keep network losses, reputer losses, inferences,
     forecasts
    """

    blocks_per_month: int = betterproto.uint64_field(32)
    """block emission rate in number of blocks expected per month"""

    p_reward_inference: str = betterproto.string_field(33)
    p_reward_forecast: str = betterproto.string_field(34)
    p_reward_reputer: str = betterproto.string_field(35)
    c_reward_inference: str = betterproto.string_field(36)
    c_reward_forecast: str = betterproto.string_field(37)
    c_norm: str = betterproto.string_field(38)
    epsilon_reputer: str = betterproto.string_field(40)
    half_max_process_stake_removals_end_block: int = betterproto.uint64_field(42)
    """close proximities"""

    epsilon_safe_div: str = betterproto.string_field(43)
    """
    Applied twice once for stakeRemovals and once for
     DelegateStakeRemovals, so actual max is this number times two
    """

    data_sending_fee: str = betterproto.string_field(44)
    """/ a small tolerance quantity used to cap division by zero"""

    max_elements_per_forecast: int = betterproto.uint64_field(45)
    """payload sending fee for reputer or worker"""

    max_active_topics_per_block: int = betterproto.uint64_field(46)
    max_string_length: int = betterproto.uint64_field(47)
    initial_regret_quantile: str = betterproto.string_field(48)
    p_norm_safe_div: str = betterproto.string_field(49)
    global_whitelist_enabled: bool = betterproto.bool_field(50)
    topic_creator_whitelist_enabled: bool = betterproto.bool_field(51)
    """and participate in all topics as workers and reputers"""

    min_experienced_worker_regrets: int = betterproto.uint64_field(52)


@dataclass(eq=False, repr=False)
class IsTopicWorkerWhitelistEnabledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class IsTopicWorkerWhitelistEnabledResponse(betterproto.Message):
    is_topic_worker_whitelist_enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsTopicReputerWhitelistEnabledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class IsTopicReputerWhitelistEnabledResponse(betterproto.Message):
    is_topic_reputer_whitelist_enabled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicCreatorRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicCreatorResponse(betterproto.Message):
    is_whitelisted_topic_creator: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalActorRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedGlobalActorResponse(betterproto.Message):
    is_whitelisted_global_actor: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicWorkerRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicWorkerResponse(betterproto.Message):
    is_whitelisted_topic_worker: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicReputerRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class IsWhitelistedTopicReputerResponse(betterproto.Message):
    is_whitelisted_topic_reputer: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalWhitelistsRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CanUpdateGlobalWhitelistsResponse(betterproto.Message):
    can_update_global_whitelists: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanUpdateParamsRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CanUpdateParamsResponse(betterproto.Message):
    can_update_params: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanUpdateTopicWhitelistRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CanUpdateTopicWhitelistResponse(betterproto.Message):
    can_update_topic_whitelist: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanCreateTopicRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CanCreateTopicResponse(betterproto.Message):
    can_create_topic: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanSubmitWorkerPayloadRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CanSubmitWorkerPayloadResponse(betterproto.Message):
    can_submit_worker_payload: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class CanSubmitReputerPayloadRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CanSubmitReputerPayloadResponse(betterproto.Message):
    can_submit_reputer_payload: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetCountInfererInclusionsInTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    inferer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCountInfererInclusionsInTopicResponse(betterproto.Message):
    count: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetCountForecasterInclusionsInTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    forecaster: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetCountForecasterInclusionsInTopicResponse(betterproto.Message):
    count: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    inferer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetNaiveInfererNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_inferer: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOneOutInfererInfererNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_inferer: str = betterproto.string_field(2)
    forecaster: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOneOutInfererForecasterNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_forecaster: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterInfererNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_forecaster: str = betterproto.string_field(2)
    forecaster: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOneOutForecasterForecasterNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetParamsRequest(betterproto.Message):
    """GetParamsRequest is the request type for the Get/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class GetParamsResponse(betterproto.Message):
    """
    GetParamsResponse is the response type for the Get/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class GetTotalStakeRequest(betterproto.Message):
    """Total Stake returns the total amount of stake in the system"""

    pass


@dataclass(eq=False, repr=False)
class GetTotalStakeResponse(betterproto.Message):
    """
    Total Stake returns the total amount of stake in the system

     NOTE: The amount field is an Int which implements the custom method
     signatures required by gogoproto.
    """

    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicRequest(betterproto.Message):
    address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetReputerStakeInTopicResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicRequest(betterproto.Message):
    addresses: List[str] = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetMultiReputerStakeInTopicResponse(betterproto.Message):
    amounts: List["_v3__.StakeInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfRequest(betterproto.Message):
    reputer_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetStakeFromReputerInTopicInSelfResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerRequest(betterproto.Message):
    reputer_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetDelegateStakeInTopicInReputerResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerRequest(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    reputer_address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicInReputerResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicRequest(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetStakeFromDelegatorInTopicResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTopicStakeRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicStakeResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetNetworkLossBundleAtBlockResponse(betterproto.Message):
    loss_bundle: "_v3__.ValueBundle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetNextTopicIdRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetNextTopicIdResponse(betterproto.Message):
    next_topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicResponse(betterproto.Message):
    topic: "_v3__.Topic" = betterproto.message_field(1)
    weight: str = betterproto.string_field(2)
    effective_revenue: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetActiveTopicsRequest(betterproto.Message):
    pagination: "_v3__.SimpleCursorPaginationRequest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetActiveTopicsResponse(betterproto.Message):
    topics: List["_v3__.Topic"] = betterproto.message_field(1)
    pagination: "_v3__.SimpleCursorPaginationResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockRequest(betterproto.Message):
    """Returns the inferences on a topic posted at a block height"""

    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetInferencesAtBlockResponse(betterproto.Message):
    """
    Returns the inferences on a topic posted at a block height

     NOTE: The amount field is a Uint which implements the custom method
     signatures required by gogoproto.
    """

    inferences: "_v3__.Inferences" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetLatestTopicInferencesResponse(betterproto.Message):
    inferences: "_v3__.Inferences" = betterproto.message_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockRequest(betterproto.Message):
    """Returns the forecasts on a topic posted at a block height"""

    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetForecastsAtBlockResponse(betterproto.Message):
    """
    Returns the forecasts on a topic posted at a block height

     NOTE: The amount field is a Uint which implements the custom method
     signatures required by gogoproto.
    """

    forecasts: "_v3__.Forecasts" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetWorkerLatestInferenceByTopicIdResponse(betterproto.Message):
    latest_inference: "_v3__.Inference" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoRequest(betterproto.Message):
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetWorkerNodeInfoResponse(betterproto.Message):
    node_info: "_v3__.OffchainNode" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoRequest(betterproto.Message):
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetReputerNodeInfoResponse(betterproto.Message):
    node_info: "_v3__.OffchainNode" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height_last_inference: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class IsWorkerNonceUnfulfilledResponse(betterproto.Message):
    is_worker_nonce_unfulfilled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetUnfulfilledReputerNoncesResponse(betterproto.Message):
    nonces: "_v3__.ReputerRequestNonces" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetUnfulfilledWorkerNoncesResponse(betterproto.Message):
    nonces: "_v3__.Nonces" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetInfererNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetForecasterNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    forecaster: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetOneInForecasterNetworkRegretResponse(betterproto.Message):
    regret: "_v3__.TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class IsReputerNonceUnfulfilledResponse(betterproto.Message):
    is_reputer_nonce_unfulfilled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetNetworkInferencesAtBlockResponse(betterproto.Message):
    network_inferences: "_v3__.ValueBundle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetLatestNetworkInferencesResponse(betterproto.Message):
    network_inferences: "_v3__.ValueBundle" = betterproto.message_field(1)
    inferer_weights: List["_v3__.RegretInformedWeight"] = betterproto.message_field(2)
    forecaster_weights: List["_v3__.RegretInformedWeight"] = betterproto.message_field(
        3
    )
    inference_block_height: int = betterproto.int64_field(5)
    loss_block_height: int = betterproto.int64_field(6)
    confidence_interval_raw_percentiles: List[str] = betterproto.string_field(7)
    confidence_interval_values: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class GetLatestAvailableNetworkInferencesResponse(betterproto.Message):
    network_inferences: "_v3__.ValueBundle" = betterproto.message_field(1)
    inferer_weights: List["_v3__.RegretInformedWeight"] = betterproto.message_field(2)
    forecaster_weights: List["_v3__.RegretInformedWeight"] = betterproto.message_field(
        3
    )
    inference_block_height: int = betterproto.int64_field(5)
    loss_block_height: int = betterproto.int64_field(6)
    confidence_interval_raw_percentiles: List[str] = betterproto.string_field(7)
    confidence_interval_values: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class IsWorkerRegisteredInTopicIdResponse(betterproto.Message):
    is_registered: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class IsReputerRegisteredInTopicIdResponse(betterproto.Message):
    is_registered: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class IsWhitelistAdminResponse(betterproto.Message):
    is_admin: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetStakeRemovalsUpUntilBlockResponse(betterproto.Message):
    removals: List["_v3__.StakeRemovalInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalsUpUntilBlockResponse(betterproto.Message):
    removals: List["_v3__.DelegateStakeRemovalInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetStakeRemovalInfoResponse(betterproto.Message):
    removal: "_v3__.StakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    reputer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalInfoResponse(betterproto.Message):
    removal: "_v3__.DelegateStakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicLastWorkerCommitInfoResponse(betterproto.Message):
    last_commit: "_v3__.TimestampedActorNonce" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicLastReputerCommitInfoResponse(betterproto.Message):
    last_commit: "_v3__.TimestampedActorNonce" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicRewardNonceResponse(betterproto.Message):
    nonce: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetReputerLossBundlesAtBlockResponse(betterproto.Message):
    loss_bundles: "_v3__.ReputerValueBundles" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetStakeReputerAuthorityResponse(betterproto.Message):
    authority: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    target: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDelegateStakePlacementResponse(betterproto.Message):
    delegator_info: "_v3__.DelegatorInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    target: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDelegateStakeUponReputerResponse(betterproto.Message):
    stake: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDelegateRewardPerShareResponse(betterproto.Message):
    reward_per_share: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdRequest(betterproto.Message):
    reputer: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class GetStakeRemovalForReputerAndTopicIdResponse(betterproto.Message):
    stake_removal_info: "_v3__.StakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetDelegateStakeRemovalResponse(betterproto.Message):
    stake_removal_info: "_v3__.DelegateStakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicWeightResponse(betterproto.Message):
    weight: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetTotalSumPreviousTopicWeightsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetTotalSumPreviousTopicWeightsResponse(betterproto.Message):
    weight: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TopicExistsRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class TopicExistsResponse(betterproto.Message):
    exists: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class IsTopicActiveRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class IsTopicActiveResponse(betterproto.Message):
    is_active: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetTopicFeeRevenueResponse(betterproto.Message):
    fee_revenue: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    inferer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetInfererScoreEmaResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    forecaster: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetForecasterScoreEmaResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetReputerScoreEmaResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetInferenceScoresUntilBlockResponse(betterproto.Message):
    scores: List["_v3__.Score"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileForecasterScoreEmaResponse(betterproto.Message):
    value: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileInfererScoreEmaResponse(betterproto.Message):
    value: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousTopicQuantileReputerScoreEmaResponse(betterproto.Message):
    value: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetWorkerInferenceScoresAtBlockResponse(betterproto.Message):
    scores: "_v3__.Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestInfererScoreResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetForecastScoresUntilBlockResponse(betterproto.Message):
    scores: List["_v3__.Score"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetWorkerForecastScoresAtBlockResponse(betterproto.Message):
    scores: "_v3__.Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestForecasterScoreResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GetReputersScoresAtBlockResponse(betterproto.Message):
    scores: "_v3__.Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetCurrentLowestReputerScoreResponse(betterproto.Message):
    score: "_v3__.Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetListeningCoefficientResponse(betterproto.Message):
    listening_coefficient: "_v3__.ListeningCoefficient" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousReputerRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousInferenceRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousForecastRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetPreviousPercentageRewardToStakedReputersResponse(betterproto.Message):
    percentage_reward: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetTotalRewardToDistributeResponse(betterproto.Message):
    total_reward: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetActiveTopicsAtBlockResponse(betterproto.Message):
    topics: List["_v3__.Topic"] = betterproto.message_field(1)
    pagination: "_v3__.SimpleCursorPaginationResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetNextChurningBlockByTopicIdResponse(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GetActiveReputersForTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetActiveReputersForTopicResponse(betterproto.Message):
    reputers: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetActiveForecastersForTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetActiveForecastersForTopicResponse(betterproto.Message):
    forecasters: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetActiveInferersForTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetActiveInferersForTopicResponse(betterproto.Message):
    inferers: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState is the state that must be provided at genesis."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    next_topic_id: int = betterproto.uint64_field(3)
    """
    / TOPIC
     the next topic id to be used, equal to the number of topics that have been
     created
    """

    topics: List["TopicIdAndTopic"] = betterproto.message_field(4)
    """
    every topic that has been created indexed by their topicId starting from 1
     (0 is reserved for the root network)
    """

    active_topics: List[int] = betterproto.uint64_field(5)
    rewardable_topics: List[int] = betterproto.uint64_field(6)
    """
    every topic that has been churned and ready to be rewarded i.e. reputer
     losses have been committed
    """

    topic_workers: List["TopicAndActorId"] = betterproto.message_field(7)
    """for a topic, what is every worker node that has registered to it?"""

    topic_reputers: List["TopicAndActorId"] = betterproto.message_field(8)
    """for a topic, what is every reputer node that has registered to it?"""

    topic_reward_nonce: List["TopicIdAndBlockHeight"] = betterproto.message_field(9)
    """map of (topic) -> nonce/block height"""

    inferer_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(10)
    )
    """
    / SCORES
     map of (topic, block_height, worker) -> score
    """

    forecaster_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(11)
    )
    """map of (topic, block_height, worker) -> score"""

    reputer_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(12)
    )
    """map of (topic, block_height, reputer) -> score"""

    inferer_score_emas: List["TopicIdActorIdScore"] = betterproto.message_field(60)
    """map of (topic, block_height, worker) -> score"""

    forecaster_score_emas: List["TopicIdActorIdScore"] = betterproto.message_field(61)
    """map of (topic, block_height, worker) -> score"""

    reputer_score_emas: List["TopicIdActorIdScore"] = betterproto.message_field(62)
    """map of (topic, block_height, reputer) -> score"""

    reputer_listening_coefficient: List["TopicIdActorIdListeningCoefficient"] = (
        betterproto.message_field(16)
    )
    """map of (topic, reputer) -> listening coefficient"""

    previous_reputer_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(17)
    )
    """map of (topic, reputer) -> previous reward (used for EMA)"""

    previous_inference_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(18)
    )
    """
    map of (topic, worker) -> previous reward for inference (used for EMA)
    """

    previous_forecast_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(19)
    )
    """
    map of (topic, worker) -> previous reward for forecast (used for EMA)
    """

    previous_forecaster_score_ratio: List["TopicIdAndDec"] = betterproto.message_field(
        20
    )
    """map of (topic, forecaster) -> ratio of forecaster score"""

    total_stake: str = betterproto.string_field(21)
    """total sum stake of all stakers on the network"""

    topic_stake: List["TopicIdAndInt"] = betterproto.message_field(22)
    """
    for every topic, how much total stake does that topic have accumulated?
    """

    stake_reputer_authority: List["TopicIdActorIdInt"] = betterproto.message_field(23)
    """
    stake reputer placed in topic + delegate stake placed in them,
     signalling their total authority on the topic
     (topic Id, reputer) -> stake from reputer on self +
     stakeFromDelegatorsUponReputer
    """

    stake_sum_from_delegator: List["TopicIdActorIdInt"] = betterproto.message_field(24)
    """
    map of (topic id, delegator) -> total amount of stake in that topic placed
     by that delegator
    """

    delegated_stakes: List["TopicIdDelegatorReputerDelegatorInfo"] = (
        betterproto.message_field(25)
    )
    """
    map of (topic id, delegator, reputer) -> amount of stake that has been
     placed by that delegator on that target
    """

    stake_from_delegators_upon_reputer: List["TopicIdActorIdInt"] = (
        betterproto.message_field(26)
    )
    """
    map of (topic id, reputer) -> total amount of stake that has been placed on
     that reputer by delegators
    """

    delegate_reward_per_share: List["TopicIdActorIdDec"] = betterproto.message_field(27)
    """map of (topicId, reputer) -> share of delegate reward"""

    stake_removals_by_block: List["BlockHeightTopicIdReputerStakeRemovalInfo"] = (
        betterproto.message_field(28)
    )
    """
    stake removals are double indexed to avoid O(n) lookups when removing stake
     map of (blockHeight, topic, reputer) -> removal information for that
     reputer
    """

    stake_removals_by_actor: List["ActorIdTopicIdBlockHeight"] = (
        betterproto.message_field(29)
    )
    """
    key set of (reputer, topic, blockHeight) to existence of a removal in the
     forwards map
    """

    delegate_stake_removals_by_block: List[
        "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo"
    ] = betterproto.message_field(30)
    """
    delegate stake removals are double indexed to avoid O(n) lookups when
     removing stake map of (blockHeight, topic, delegator, reputer staked upon)
     -> (list of reputers delegated upon and info) to have stake removed at that
     block
    """

    delegate_stake_removals_by_actor: List["DelegatorReputerTopicIdBlockHeight"] = (
        betterproto.message_field(31)
    )
    """
    key set of (delegator, reputer, topicId, blockHeight) to existence of a
     removal in the forwards map
    """

    inferences: List["TopicIdActorIdInference"] = betterproto.message_field(32)
    """
    / MISC GLOBAL STATE
     map of (topic, worker) -> inference
    """

    forecasts: List["TopicIdActorIdForecast"] = betterproto.message_field(33)
    """map of (topic, worker) -> forecast[]"""

    workers: List["LibP2PKeyAndOffchainNode"] = betterproto.message_field(34)
    """map of worker id to node data about that worker"""

    reputers: List["LibP2PKeyAndOffchainNode"] = betterproto.message_field(35)
    """map of reputer id to node data about that reputer"""

    topic_fee_revenue: List["TopicIdAndInt"] = betterproto.message_field(36)
    """
    fee revenue collected by a topic over the course of the last reward cadence
    """

    previous_topic_weight: List["TopicIdAndDec"] = betterproto.message_field(37)
    """
    store previous weights for exponential moving average in rewards calc
    """

    all_inferences: List["TopicIdBlockHeightInferences"] = betterproto.message_field(38)
    """map of (topic, block_height) -> Inference"""

    all_forecasts: List["TopicIdBlockHeightForecasts"] = betterproto.message_field(39)
    """map of (topic, block_height) -> Forecast"""

    all_loss_bundles: List["TopicIdBlockHeightReputerValueBundles"] = (
        betterproto.message_field(40)
    )
    """
    map of (topic, block_height) -> ReputerValueBundles (1 per reputer active
     at that time)
    """

    network_loss_bundles: List["TopicIdBlockHeightValueBundles"] = (
        betterproto.message_field(41)
    )
    """
    map of (topic, block_height) -> ValueBundle (1 network wide bundle per
     timestep)
    """

    previous_percentage_reward_to_staked_reputers: str = betterproto.string_field(42)
    """
    Percentage of all rewards, paid out to staked reputers, during the previous
     reward cadence. Used by mint module
    """

    open_worker_windows: List["BlockHeightAndTopicIds"] = betterproto.message_field(55)
    """
    map of open worker nonce windows for topics on particular block heights
    """

    unfulfilled_worker_nonces: List["TopicIdAndNonces"] = betterproto.message_field(43)
    """map of (topic) -> unfulfilled nonces"""

    unfulfilled_reputer_nonces: List["TopicIdAndReputerRequestNonces"] = (
        betterproto.message_field(44)
    )
    """map of (topic) -> unfulfilled nonces"""

    last_drip_block: List["TopicIdAndBlockHeight"] = betterproto.message_field(56)
    """map of (topic) -> last dripped block"""

    latest_inferer_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(45)
    )
    """
    / REGRETS
     map of (topic, worker) -> regret of worker from comparing loss of worker
     relative to loss of other inferers
    """

    latest_forecaster_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(46)
    )
    """
    map of (topic, worker) -> regret of worker from comparing loss of worker
     relative to loss of other forecasters
    """

    latest_one_in_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(47)
    """
    map of (topic, forecaster, inferer) -> R^+_{ij_kk} regret of forecaster
     loss from comparing one-in loss with all network inferer (3rd index)
     regrets L_ij made under the regime of the one-in forecaster (2nd index)
    """

    latest_naive_inferer_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(48)
    )
    """
    the forecaster (2nd index) regrets made under the regime of the same
     forecaster as a one-in forecaster
    """

    latest_one_out_inferer_inferer_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(49)
    latest_one_out_inferer_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(50)
    latest_one_out_forecaster_inferer_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(51)
    latest_one_out_forecaster_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(52)
    core_team_addresses: List[str] = betterproto.string_field(2)
    """/ WHITELISTS"""

    topic_last_worker_commit: List["TopicIdTimestampedActorNonce"] = (
        betterproto.message_field(53)
    )
    """/ RECORD COMMITS"""

    topic_last_reputer_commit: List["TopicIdTimestampedActorNonce"] = (
        betterproto.message_field(54)
    )
    topic_to_next_possible_churning_block: List["TopicIdAndBlockHeight"] = (
        betterproto.message_field(57)
    )
    """ACTIVE TOPIC"""

    block_to_active_topics: List["BlockHeightTopicIds"] = betterproto.message_field(58)
    block_to_lowest_active_topic_weight: List["BlockHeightTopicIdWeightPair"] = (
        betterproto.message_field(59)
    )
    previous_topic_quantile_inferer_score_ema: List["TopicIdAndDec"] = (
        betterproto.message_field(63)
    )
    """EMA"""

    previous_topic_quantile_forecaster_score_ema: List["TopicIdAndDec"] = (
        betterproto.message_field(64)
    )
    previous_topic_quantile_reputer_score_ema: List["TopicIdAndDec"] = (
        betterproto.message_field(65)
    )
    count_inferer_inclusions_in_topic_active_set: List["TopicIdActorIdUint64"] = (
        betterproto.message_field(66)
    )
    """INCLUSIONS"""

    count_forecaster_inclusions_in_topic_active_set: List["TopicIdActorIdUint64"] = (
        betterproto.message_field(67)
    )
    active_inferers: List["TopicAndActorId"] = betterproto.message_field(68)
    """active inferers for each topic"""

    active_forecasters: List["TopicAndActorId"] = betterproto.message_field(69)
    """active forecasters for each topic"""

    lowest_inferer_score_ema: List["TopicIdActorIdScore"] = betterproto.message_field(
        70
    )
    """lowest inferer score EMA for each topic"""

    lowest_forecaster_score_ema: List["TopicIdActorIdScore"] = (
        betterproto.message_field(71)
    )
    """lowest forecaster score EMA for each topic"""

    active_reputers: List["TopicAndActorId"] = betterproto.message_field(72)
    """active reputers for each topic"""

    lowest_reputer_score_ema: List["TopicIdActorIdScore"] = betterproto.message_field(
        73
    )
    """lowest reputer score EMA for each topic"""

    loss_bundles: List["TopicIdReputerReputerValueBundle"] = betterproto.message_field(
        74
    )
    """map of (topic, reputer) -> reputer loss"""

    total_sum_previous_topic_weights: str = betterproto.string_field(75)
    """total sum of topic weights"""

    reward_current_block_emission: str = betterproto.string_field(76)
    """reward emission on current block"""

    whitelist_admins: List[str] = betterproto.string_field(77)
    """whitelists"""

    global_whitelist: List[str] = betterproto.string_field(78)
    topic_creator_whitelist: List[str] = betterproto.string_field(79)
    topic_worker_whitelist: List["TopicAndActorId"] = betterproto.message_field(80)
    topic_reputer_whitelist: List["TopicAndActorId"] = betterproto.message_field(81)
    topic_worker_whitelist_enabled: List[int] = betterproto.uint64_field(82)
    topic_reputer_whitelist_enabled: List[int] = betterproto.uint64_field(83)


@dataclass(eq=False, repr=False)
class TopicIdAndTopic(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    topic: "_v3__.Topic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicAndActorId(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndBlockHeight(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BlockHeightAndTopicIds(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_ids: List[int] = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightScores(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    scores: "_v3__.Scores" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdScore(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    score: "_v3__.Score" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdUint64(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    uint64: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdListeningCoefficient(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    listening_coefficient: "_v3__.ListeningCoefficient" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdDec(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    dec: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TopicIdAndInt(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    int: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInt(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    int: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TopicIdDelegatorReputerDelegatorInfo(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    reputer: str = betterproto.string_field(3)
    delegator_info: "_v3__.DelegatorInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdReputerStakeRemovalInfo(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    stake_removal_info: "_v3__.StakeRemovalInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActorIdTopicIdBlockHeight(betterproto.Message):
    actor_id: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    block_height: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)
    delegate_stake_removal_info: "_v3__.DelegateStakeRemovalInfo" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class DelegatorReputerTopicIdBlockHeight(betterproto.Message):
    delegator: str = betterproto.string_field(1)
    reputer: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)
    block_height: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInference(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    inference: "_v3__.Inference" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdForecast(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    forecast: "_v3__.Forecast" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LibP2PKeyAndOffchainNode(betterproto.Message):
    lib_p2_p_key: str = betterproto.string_field(1)
    offchain_node: "_v3__.OffchainNode" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndDec(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    dec: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightInferences(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    inferences: "_v3__.Inferences" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightForecasts(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    forecasts: "_v3__.Forecasts" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightReputerValueBundles(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    reputer_value_bundles: "_v3__.ReputerValueBundles" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightValueBundles(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    value_bundle: "_v3__.ValueBundle" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdAndNonces(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    nonces: "_v3__.Nonces" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndReputerRequestNonces(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer_request_nonces: "_v3__.ReputerRequestNonces" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdActorIdTimeStampedValue(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    timestamped_value: "_v3__.TimestampedValue" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdActorIdTimeStampedValue(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id1: str = betterproto.string_field(2)
    actor_id2: str = betterproto.string_field(3)
    timestamped_value: "_v3__.TimestampedValue" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TopicIdTimestampedActorNonce(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    timestamped_actor_nonce: "_v3__.TimestampedActorNonce" = betterproto.message_field(
        2
    )


@dataclass(eq=False, repr=False)
class BlockHeightTopicIds(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_ids: "_v3__.TopicIds" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdWeightPair(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_weight: "_v3__.TopicIdWeightPair" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdReputerReputerValueBundle(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)
    reputer_value_bundle: "_v3__.ReputerValueBundle" = betterproto.message_field(3)


class MsgServiceStub(betterproto.ServiceStub):
    async def update_params(
        self,
        update_params_request: "UpdateParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/UpdateParams",
            update_params_request,
            UpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_new_topic(
        self,
        create_new_topic_request: "CreateNewTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateNewTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/CreateNewTopic",
            create_new_topic_request,
            CreateNewTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register(
        self,
        register_request: "RegisterRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RegisterResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/Register",
            register_request,
            RegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_registration(
        self,
        remove_registration_request: "RemoveRegistrationRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveRegistrationResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveRegistration",
            remove_registration_request,
            RemoveRegistrationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_stake(
        self,
        add_stake_request: "AddStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddStake",
            add_stake_request,
            AddStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_stake(
        self,
        remove_stake_request: "RemoveStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveStake",
            remove_stake_request,
            RemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_stake(
        self,
        cancel_remove_stake_request: "CancelRemoveStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CancelRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/CancelRemoveStake",
            cancel_remove_stake_request,
            CancelRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_stake(
        self,
        delegate_stake_request: "DelegateStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/DelegateStake",
            delegate_stake_request,
            DelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_delegate_stake(
        self,
        reward_delegate_stake_request: "RewardDelegateStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RewardDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RewardDelegateStake",
            reward_delegate_stake_request,
            RewardDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_delegate_stake(
        self,
        remove_delegate_stake_request: "RemoveDelegateStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveDelegateStake",
            remove_delegate_stake_request,
            RemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_delegate_stake(
        self,
        cancel_remove_delegate_stake_request: "CancelRemoveDelegateStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CancelRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/CancelRemoveDelegateStake",
            cancel_remove_delegate_stake_request,
            CancelRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_topic(
        self,
        fund_topic_request: "FundTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "FundTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/FundTopic",
            fund_topic_request,
            FundTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_whitelist_admin(
        self,
        add_to_whitelist_admin_request: "AddToWhitelistAdminRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddToWhitelistAdmin",
            add_to_whitelist_admin_request,
            AddToWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_whitelist_admin(
        self,
        remove_from_whitelist_admin_request: "RemoveFromWhitelistAdminRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveFromWhitelistAdmin",
            remove_from_whitelist_admin_request,
            RemoveFromWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_worker_payload(
        self,
        insert_worker_payload_request: "InsertWorkerPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "InsertWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/InsertWorkerPayload",
            insert_worker_payload_request,
            InsertWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_reputer_payload(
        self,
        insert_reputer_payload_request: "InsertReputerPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "InsertReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/InsertReputerPayload",
            insert_reputer_payload_request,
            InsertReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_global_whitelist(
        self,
        add_to_global_whitelist_request: "AddToGlobalWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToGlobalWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddToGlobalWhitelist",
            add_to_global_whitelist_request,
            AddToGlobalWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_global_whitelist(
        self,
        remove_from_global_whitelist_request: "RemoveFromGlobalWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromGlobalWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveFromGlobalWhitelist",
            remove_from_global_whitelist_request,
            RemoveFromGlobalWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable_topic_worker_whitelist(
        self,
        enable_topic_worker_whitelist_request: "EnableTopicWorkerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EnableTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/EnableTopicWorkerWhitelist",
            enable_topic_worker_whitelist_request,
            EnableTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable_topic_worker_whitelist(
        self,
        disable_topic_worker_whitelist_request: "DisableTopicWorkerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DisableTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/DisableTopicWorkerWhitelist",
            disable_topic_worker_whitelist_request,
            DisableTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def enable_topic_reputer_whitelist(
        self,
        enable_topic_reputer_whitelist_request: "EnableTopicReputerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EnableTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/EnableTopicReputerWhitelist",
            enable_topic_reputer_whitelist_request,
            EnableTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def disable_topic_reputer_whitelist(
        self,
        disable_topic_reputer_whitelist_request: "DisableTopicReputerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DisableTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/DisableTopicReputerWhitelist",
            disable_topic_reputer_whitelist_request,
            DisableTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_creator_whitelist(
        self,
        add_to_topic_creator_whitelist_request: "AddToTopicCreatorWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToTopicCreatorWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddToTopicCreatorWhitelist",
            add_to_topic_creator_whitelist_request,
            AddToTopicCreatorWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_creator_whitelist(
        self,
        remove_from_topic_creator_whitelist_request: "RemoveFromTopicCreatorWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromTopicCreatorWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveFromTopicCreatorWhitelist",
            remove_from_topic_creator_whitelist_request,
            RemoveFromTopicCreatorWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_worker_whitelist(
        self,
        add_to_topic_worker_whitelist_request: "AddToTopicWorkerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddToTopicWorkerWhitelist",
            add_to_topic_worker_whitelist_request,
            AddToTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_worker_whitelist(
        self,
        remove_from_topic_worker_whitelist_request: "RemoveFromTopicWorkerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromTopicWorkerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveFromTopicWorkerWhitelist",
            remove_from_topic_worker_whitelist_request,
            RemoveFromTopicWorkerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_topic_reputer_whitelist(
        self,
        add_to_topic_reputer_whitelist_request: "AddToTopicReputerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/AddToTopicReputerWhitelist",
            add_to_topic_reputer_whitelist_request,
            AddToTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_topic_reputer_whitelist(
        self,
        remove_from_topic_reputer_whitelist_request: "RemoveFromTopicReputerWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromTopicReputerWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.MsgService/RemoveFromTopicReputerWhitelist",
            remove_from_topic_reputer_whitelist_request,
            RemoveFromTopicReputerWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryServiceStub(betterproto.ServiceStub):
    async def get_params(
        self,
        get_params_request: "GetParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetParamsResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetParams",
            get_params_request,
            GetParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_topic_id(
        self,
        get_next_topic_id_request: "GetNextTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNextTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetNextTopicId",
            get_next_topic_id_request,
            GetNextTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic(
        self,
        get_topic_request: "GetTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopic",
            get_topic_request,
            GetTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_latest_inference_by_topic_id(
        self,
        get_worker_latest_inference_by_topic_id_request: "GetWorkerLatestInferenceByTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetWorkerLatestInferenceByTopicId",
            get_worker_latest_inference_by_topic_id_request,
            GetWorkerLatestInferenceByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferences_at_block(
        self,
        get_inferences_at_block_request: "GetInferencesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetInferencesAtBlock",
            get_inferences_at_block_request,
            GetInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_topic_inferences(
        self,
        get_latest_topic_inferences_request: "GetLatestTopicInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLatestTopicInferencesResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetLatestTopicInferences",
            get_latest_topic_inferences_request,
            GetLatestTopicInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecasts_at_block(
        self,
        get_forecasts_at_block_request: "GetForecastsAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetForecastsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetForecastsAtBlock",
            get_forecasts_at_block_request,
            GetForecastsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_loss_bundle_at_block(
        self,
        get_network_loss_bundle_at_block_request: "GetNetworkLossBundleAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNetworkLossBundleAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetNetworkLossBundleAtBlock",
            get_network_loss_bundle_at_block_request,
            GetNetworkLossBundleAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_stake(
        self,
        get_total_stake_request: "GetTotalStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTotalStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTotalStake",
            get_total_stake_request,
            GetTotalStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_stake_in_topic(
        self,
        get_reputer_stake_in_topic_request: "GetReputerStakeInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetReputerStakeInTopic",
            get_reputer_stake_in_topic_request,
            GetReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multi_reputer_stake_in_topic(
        self,
        get_multi_reputer_stake_in_topic_request: "GetMultiReputerStakeInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMultiReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetMultiReputerStakeInTopic",
            get_multi_reputer_stake_in_topic_request,
            GetMultiReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        get_stake_from_reputer_in_topic_in_self_request: "GetStakeFromReputerInTopicInSelfRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeFromReputerInTopicInSelf",
            get_stake_from_reputer_in_topic_in_self_request,
            GetStakeFromReputerInTopicInSelfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        get_delegate_stake_in_topic_in_reputer_request: "GetDelegateStakeInTopicInReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakeInTopicInReputer",
            get_delegate_stake_in_topic_in_reputer_request,
            GetDelegateStakeInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        get_stake_from_delegator_in_topic_in_reputer_request: "GetStakeFromDelegatorInTopicInReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeFromDelegatorInTopicInReputer",
            get_stake_from_delegator_in_topic_in_reputer_request,
            GetStakeFromDelegatorInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic(
        self,
        get_stake_from_delegator_in_topic_request: "GetStakeFromDelegatorInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeFromDelegatorInTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeFromDelegatorInTopic",
            get_stake_from_delegator_in_topic_request,
            GetStakeFromDelegatorInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_stake(
        self,
        get_topic_stake_request: "GetTopicStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicStakeResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopicStake",
            get_topic_stake_request,
            GetTopicStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removals_up_until_block(
        self,
        get_stake_removals_up_until_block_request: "GetStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeRemovalsUpUntilBlock",
            get_stake_removals_up_until_block_request,
            GetStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removals_up_until_block(
        self,
        get_delegate_stake_removals_up_until_block_request: "GetDelegateStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakeRemovalsUpUntilBlock",
            get_delegate_stake_removals_up_until_block_request,
            GetDelegateStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_info(
        self,
        get_stake_removal_info_request: "GetStakeRemovalInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeRemovalInfo",
            get_stake_removal_info_request,
            GetStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal_info(
        self,
        get_delegate_stake_removal_info_request: "GetDelegateStakeRemovalInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakeRemovalInfo",
            get_delegate_stake_removal_info_request,
            GetDelegateStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_node_info(
        self,
        get_worker_node_info_request: "GetWorkerNodeInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetWorkerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetWorkerNodeInfo",
            get_worker_node_info_request,
            GetWorkerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_node_info(
        self,
        get_reputer_node_info_request: "GetReputerNodeInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReputerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetReputerNodeInfo",
            get_reputer_node_info_request,
            GetReputerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_registered_in_topic_id(
        self,
        is_worker_registered_in_topic_id_request: "IsWorkerRegisteredInTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWorkerRegisteredInTopicId",
            is_worker_registered_in_topic_id_request,
            IsWorkerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_registered_in_topic_id(
        self,
        is_reputer_registered_in_topic_id_request: "IsReputerRegisteredInTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsReputerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsReputerRegisteredInTopicId",
            is_reputer_registered_in_topic_id_request,
            IsReputerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block(
        self,
        get_network_inferences_at_block_request: "GetNetworkInferencesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNetworkInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetNetworkInferencesAtBlock",
            get_network_inferences_at_block_request,
            GetNetworkInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inferences(
        self,
        get_latest_network_inferences_request: "GetLatestNetworkInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetLatestNetworkInferences",
            get_latest_network_inferences_request,
            GetLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inferences(
        self,
        get_latest_available_network_inferences_request: "GetLatestAvailableNetworkInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetLatestAvailableNetworkInferences",
            get_latest_available_network_inferences_request,
            GetLatestAvailableNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_nonce_unfulfilled(
        self,
        is_worker_nonce_unfulfilled_request: "IsWorkerNonceUnfulfilledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWorkerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWorkerNonceUnfulfilled",
            is_worker_nonce_unfulfilled_request,
            IsWorkerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_nonce_unfulfilled(
        self,
        is_reputer_nonce_unfulfilled_request: "IsReputerNonceUnfulfilledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsReputerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsReputerNonceUnfulfilled",
            is_reputer_nonce_unfulfilled_request,
            IsReputerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_worker_nonces(
        self,
        get_unfulfilled_worker_nonces_request: "GetUnfulfilledWorkerNoncesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetUnfulfilledWorkerNonces",
            get_unfulfilled_worker_nonces_request,
            GetUnfulfilledWorkerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_reputer_nonces(
        self,
        get_unfulfilled_reputer_nonces_request: "GetUnfulfilledReputerNoncesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUnfulfilledReputerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetUnfulfilledReputerNonces",
            get_unfulfilled_reputer_nonces_request,
            GetUnfulfilledReputerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_network_regret(
        self,
        get_inferer_network_regret_request: "GetInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetInfererNetworkRegret",
            get_inferer_network_regret_request,
            GetInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_network_regret(
        self,
        get_forecaster_network_regret_request: "GetForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetForecasterNetworkRegret",
            get_forecaster_network_regret_request,
            GetForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_in_forecaster_network_regret(
        self,
        get_one_in_forecaster_network_regret_request: "GetOneInForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOneInForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetOneInForecasterNetworkRegret",
            get_one_in_forecaster_network_regret_request,
            GetOneInForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelist_admin(
        self,
        is_whitelist_admin_request: "IsWhitelistAdminRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWhitelistAdmin",
            is_whitelist_admin_request,
            IsWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_worker_commit_info(
        self,
        get_topic_last_worker_commit_info_request: "GetTopicLastWorkerCommitInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopicLastWorkerCommitInfo",
            get_topic_last_worker_commit_info_request,
            GetTopicLastWorkerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_reputer_commit_info(
        self,
        get_topic_last_reputer_commit_info_request: "GetTopicLastReputerCommitInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicLastReputerCommitInfoResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopicLastReputerCommitInfo",
            get_topic_last_reputer_commit_info_request,
            GetTopicLastReputerCommitInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_reward_nonce(
        self,
        get_topic_reward_nonce_request: "GetTopicRewardNonceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicRewardNonceResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopicRewardNonce",
            get_topic_reward_nonce_request,
            GetTopicRewardNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_loss_bundles_at_block(
        self,
        get_reputer_loss_bundles_at_block_request: "GetReputerLossBundlesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReputerLossBundlesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetReputerLossBundlesAtBlock",
            get_reputer_loss_bundles_at_block_request,
            GetReputerLossBundlesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_reputer_authority(
        self,
        get_stake_reputer_authority_request: "GetStakeReputerAuthorityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeReputerAuthorityResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeReputerAuthority",
            get_stake_reputer_authority_request,
            GetStakeReputerAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_placement(
        self,
        get_delegate_stake_placement_request: "GetDelegateStakePlacementRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakePlacementResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakePlacement",
            get_delegate_stake_placement_request,
            GetDelegateStakePlacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_upon_reputer(
        self,
        get_delegate_stake_upon_reputer_request: "GetDelegateStakeUponReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakeUponReputerResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakeUponReputer",
            get_delegate_stake_upon_reputer_request,
            GetDelegateStakeUponReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_reward_per_share(
        self,
        get_delegate_reward_per_share_request: "GetDelegateRewardPerShareRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateRewardPerShareResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateRewardPerShare",
            get_delegate_reward_per_share_request,
            GetDelegateRewardPerShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        get_stake_removal_for_reputer_and_topic_id_request: "GetStakeRemovalForReputerAndTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetStakeRemovalForReputerAndTopicId",
            get_stake_removal_for_reputer_and_topic_id_request,
            GetStakeRemovalForReputerAndTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal(
        self,
        get_delegate_stake_removal_request: "GetDelegateStakeRemovalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDelegateStakeRemovalResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetDelegateStakeRemoval",
            get_delegate_stake_removal_request,
            GetDelegateStakeRemovalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_weight(
        self,
        get_previous_topic_weight_request: "GetPreviousTopicWeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousTopicWeightResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousTopicWeight",
            get_previous_topic_weight_request,
            GetPreviousTopicWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_sum_previous_topic_weights(
        self,
        get_total_sum_previous_topic_weights_request: "GetTotalSumPreviousTopicWeightsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTotalSumPreviousTopicWeightsResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTotalSumPreviousTopicWeights",
            get_total_sum_previous_topic_weights_request,
            GetTotalSumPreviousTopicWeightsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def topic_exists(
        self,
        topic_exists_request: "TopicExistsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TopicExistsResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/TopicExists",
            topic_exists_request,
            TopicExistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_active(
        self,
        is_topic_active_request: "IsTopicActiveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsTopicActiveResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsTopicActive",
            is_topic_active_request,
            IsTopicActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_fee_revenue(
        self,
        get_topic_fee_revenue_request: "GetTopicFeeRevenueRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTopicFeeRevenueResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTopicFeeRevenue",
            get_topic_fee_revenue_request,
            GetTopicFeeRevenueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_score_ema(
        self,
        get_inferer_score_ema_request: "GetInfererScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetInfererScoreEma",
            get_inferer_score_ema_request,
            GetInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_score_ema(
        self,
        get_forecaster_score_ema_request: "GetForecasterScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetForecasterScoreEma",
            get_forecaster_score_ema_request,
            GetForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_score_ema(
        self,
        get_reputer_score_ema_request: "GetReputerScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetReputerScoreEma",
            get_reputer_score_ema_request,
            GetReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inference_scores_until_block(
        self,
        get_inference_scores_until_block_request: "GetInferenceScoresUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetInferenceScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetInferenceScoresUntilBlock",
            get_inference_scores_until_block_request,
            GetInferenceScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_forecaster_score_ema(
        self,
        get_previous_topic_quantile_forecaster_score_ema_request: "GetPreviousTopicQuantileForecasterScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousTopicQuantileForecasterScoreEma",
            get_previous_topic_quantile_forecaster_score_ema_request,
            GetPreviousTopicQuantileForecasterScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_inferer_score_ema(
        self,
        get_previous_topic_quantile_inferer_score_ema_request: "GetPreviousTopicQuantileInfererScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousTopicQuantileInfererScoreEma",
            get_previous_topic_quantile_inferer_score_ema_request,
            GetPreviousTopicQuantileInfererScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_quantile_reputer_score_ema(
        self,
        get_previous_topic_quantile_reputer_score_ema_request: "GetPreviousTopicQuantileReputerScoreEmaRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousTopicQuantileReputerScoreEma",
            get_previous_topic_quantile_reputer_score_ema_request,
            GetPreviousTopicQuantileReputerScoreEmaResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_inference_scores_at_block(
        self,
        get_worker_inference_scores_at_block_request: "GetWorkerInferenceScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetWorkerInferenceScoresAtBlock",
            get_worker_inference_scores_at_block_request,
            GetWorkerInferenceScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_inferer_score(
        self,
        get_current_lowest_inferer_score_request: "GetCurrentLowestInfererScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCurrentLowestInfererScoreResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetCurrentLowestInfererScore",
            get_current_lowest_inferer_score_request,
            GetCurrentLowestInfererScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecast_scores_until_block(
        self,
        get_forecast_scores_until_block_request: "GetForecastScoresUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetForecastScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetForecastScoresUntilBlock",
            get_forecast_scores_until_block_request,
            GetForecastScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_forecast_scores_at_block(
        self,
        get_worker_forecast_scores_at_block_request: "GetWorkerForecastScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetWorkerForecastScoresAtBlock",
            get_worker_forecast_scores_at_block_request,
            GetWorkerForecastScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_forecaster_score(
        self,
        get_current_lowest_forecaster_score_request: "GetCurrentLowestForecasterScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCurrentLowestForecasterScoreResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetCurrentLowestForecasterScore",
            get_current_lowest_forecaster_score_request,
            GetCurrentLowestForecasterScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputers_scores_at_block(
        self,
        get_reputers_scores_at_block_request: "GetReputersScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetReputersScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetReputersScoresAtBlock",
            get_reputers_scores_at_block_request,
            GetReputersScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_current_lowest_reputer_score(
        self,
        get_current_lowest_reputer_score_request: "GetCurrentLowestReputerScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCurrentLowestReputerScoreResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetCurrentLowestReputerScore",
            get_current_lowest_reputer_score_request,
            GetCurrentLowestReputerScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_listening_coefficient(
        self,
        get_listening_coefficient_request: "GetListeningCoefficientRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetListeningCoefficientResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetListeningCoefficient",
            get_listening_coefficient_request,
            GetListeningCoefficientResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_reputer_reward_fraction(
        self,
        get_previous_reputer_reward_fraction_request: "GetPreviousReputerRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousReputerRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousReputerRewardFraction",
            get_previous_reputer_reward_fraction_request,
            GetPreviousReputerRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_inference_reward_fraction(
        self,
        get_previous_inference_reward_fraction_request: "GetPreviousInferenceRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousInferenceRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousInferenceRewardFraction",
            get_previous_inference_reward_fraction_request,
            GetPreviousInferenceRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_forecast_reward_fraction(
        self,
        get_previous_forecast_reward_fraction_request: "GetPreviousForecastRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousForecastRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousForecastRewardFraction",
            get_previous_forecast_reward_fraction_request,
            GetPreviousForecastRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        get_previous_percentage_reward_to_staked_reputers_request: "GetPreviousPercentageRewardToStakedReputersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetPreviousPercentageRewardToStakedReputers",
            get_previous_percentage_reward_to_staked_reputers_request,
            GetPreviousPercentageRewardToStakedReputersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_reward_to_distribute(
        self,
        get_total_reward_to_distribute_request: "GetTotalRewardToDistributeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTotalRewardToDistributeResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetTotalRewardToDistribute",
            get_total_reward_to_distribute_request,
            GetTotalRewardToDistributeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_naive_inferer_network_regret(
        self,
        get_naive_inferer_network_regret_request: "GetNaiveInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNaiveInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetNaiveInfererNetworkRegret",
            get_naive_inferer_network_regret_request,
            GetNaiveInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_inferer_network_regret(
        self,
        get_one_out_inferer_inferer_network_regret_request: "GetOneOutInfererInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetOneOutInfererInfererNetworkRegret",
            get_one_out_inferer_inferer_network_regret_request,
            GetOneOutInfererInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        get_one_out_inferer_forecaster_network_regret_request: "GetOneOutInfererForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetOneOutInfererForecasterNetworkRegret",
            get_one_out_inferer_forecaster_network_regret_request,
            GetOneOutInfererForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        get_one_out_forecaster_inferer_network_regret_request: "GetOneOutForecasterInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetOneOutForecasterInfererNetworkRegret",
            get_one_out_forecaster_inferer_network_regret_request,
            GetOneOutForecasterInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        get_one_out_forecaster_forecaster_network_regret_request: "GetOneOutForecasterForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetOneOutForecasterForecasterNetworkRegret",
            get_one_out_forecaster_forecaster_network_regret_request,
            GetOneOutForecasterForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_topics_at_block(
        self,
        get_active_topics_at_block_request: "GetActiveTopicsAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetActiveTopicsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetActiveTopicsAtBlock",
            get_active_topics_at_block_request,
            GetActiveTopicsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_churning_block_by_topic_id(
        self,
        get_next_churning_block_by_topic_id_request: "GetNextChurningBlockByTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNextChurningBlockByTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetNextChurningBlockByTopicId",
            get_next_churning_block_by_topic_id_request,
            GetNextChurningBlockByTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_count_inferer_inclusions_in_topic(
        self,
        get_count_inferer_inclusions_in_topic_request: "GetCountInfererInclusionsInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCountInfererInclusionsInTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetCountInfererInclusionsInTopic",
            get_count_inferer_inclusions_in_topic_request,
            GetCountInfererInclusionsInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_count_forecaster_inclusions_in_topic(
        self,
        get_count_forecaster_inclusions_in_topic_request: "GetCountForecasterInclusionsInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCountForecasterInclusionsInTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetCountForecasterInclusionsInTopic",
            get_count_forecaster_inclusions_in_topic_request,
            GetCountForecasterInclusionsInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_reputers_for_topic(
        self,
        get_active_reputers_for_topic_request: "GetActiveReputersForTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetActiveReputersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetActiveReputersForTopic",
            get_active_reputers_for_topic_request,
            GetActiveReputersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_forecasters_for_topic(
        self,
        get_active_forecasters_for_topic_request: "GetActiveForecastersForTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetActiveForecastersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetActiveForecastersForTopic",
            get_active_forecasters_for_topic_request,
            GetActiveForecastersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_inferers_for_topic(
        self,
        get_active_inferers_for_topic_request: "GetActiveInferersForTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetActiveInferersForTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/GetActiveInferersForTopic",
            get_active_inferers_for_topic_request,
            GetActiveInferersForTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_worker_whitelist_enabled(
        self,
        is_topic_worker_whitelist_enabled_request: "IsTopicWorkerWhitelistEnabledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsTopicWorkerWhitelistEnabledResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsTopicWorkerWhitelistEnabled",
            is_topic_worker_whitelist_enabled_request,
            IsTopicWorkerWhitelistEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_reputer_whitelist_enabled(
        self,
        is_topic_reputer_whitelist_enabled_request: "IsTopicReputerWhitelistEnabledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsTopicReputerWhitelistEnabledResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsTopicReputerWhitelistEnabled",
            is_topic_reputer_whitelist_enabled_request,
            IsTopicReputerWhitelistEnabledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_creator(
        self,
        is_whitelisted_topic_creator_request: "IsWhitelistedTopicCreatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWhitelistedTopicCreatorResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWhitelistedTopicCreator",
            is_whitelisted_topic_creator_request,
            IsWhitelistedTopicCreatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_global_actor(
        self,
        is_whitelisted_global_actor_request: "IsWhitelistedGlobalActorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWhitelistedGlobalActorResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWhitelistedGlobalActor",
            is_whitelisted_global_actor_request,
            IsWhitelistedGlobalActorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_worker(
        self,
        is_whitelisted_topic_worker_request: "IsWhitelistedTopicWorkerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWhitelistedTopicWorkerResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWhitelistedTopicWorker",
            is_whitelisted_topic_worker_request,
            IsWhitelistedTopicWorkerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelisted_topic_reputer(
        self,
        is_whitelisted_topic_reputer_request: "IsWhitelistedTopicReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "IsWhitelistedTopicReputerResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/IsWhitelistedTopicReputer",
            is_whitelisted_topic_reputer_request,
            IsWhitelistedTopicReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_global_whitelists(
        self,
        can_update_global_whitelists_request: "CanUpdateGlobalWhitelistsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanUpdateGlobalWhitelistsResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanUpdateGlobalWhitelists",
            can_update_global_whitelists_request,
            CanUpdateGlobalWhitelistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_params(
        self,
        can_update_params_request: "CanUpdateParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanUpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanUpdateParams",
            can_update_params_request,
            CanUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_update_topic_whitelist(
        self,
        can_update_topic_whitelist_request: "CanUpdateTopicWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanUpdateTopicWhitelistResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanUpdateTopicWhitelist",
            can_update_topic_whitelist_request,
            CanUpdateTopicWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_create_topic(
        self,
        can_create_topic_request: "CanCreateTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanCreateTopicResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanCreateTopic",
            can_create_topic_request,
            CanCreateTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_submit_worker_payload(
        self,
        can_submit_worker_payload_request: "CanSubmitWorkerPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanSubmitWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanSubmitWorkerPayload",
            can_submit_worker_payload_request,
            CanSubmitWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def can_submit_reputer_payload(
        self,
        can_submit_reputer_payload_request: "CanSubmitReputerPayloadRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CanSubmitReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v6.QueryService/CanSubmitReputerPayload",
            can_submit_reputer_payload_request,
            CanSubmitReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgServiceBase(ServiceBase):

    async def update_params(
        self, update_params_request: "UpdateParamsRequest"
    ) -> "UpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_new_topic(
        self, create_new_topic_request: "CreateNewTopicRequest"
    ) -> "CreateNewTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register(self, register_request: "RegisterRequest") -> "RegisterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_registration(
        self, remove_registration_request: "RemoveRegistrationRequest"
    ) -> "RemoveRegistrationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_stake(
        self, add_stake_request: "AddStakeRequest"
    ) -> "AddStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_stake(
        self, remove_stake_request: "RemoveStakeRequest"
    ) -> "RemoveStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_remove_stake(
        self, cancel_remove_stake_request: "CancelRemoveStakeRequest"
    ) -> "CancelRemoveStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delegate_stake(
        self, delegate_stake_request: "DelegateStakeRequest"
    ) -> "DelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reward_delegate_stake(
        self, reward_delegate_stake_request: "RewardDelegateStakeRequest"
    ) -> "RewardDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_delegate_stake(
        self, remove_delegate_stake_request: "RemoveDelegateStakeRequest"
    ) -> "RemoveDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_remove_delegate_stake(
        self, cancel_remove_delegate_stake_request: "CancelRemoveDelegateStakeRequest"
    ) -> "CancelRemoveDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_topic(
        self, fund_topic_request: "FundTopicRequest"
    ) -> "FundTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_whitelist_admin(
        self, add_to_whitelist_admin_request: "AddToWhitelistAdminRequest"
    ) -> "AddToWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_whitelist_admin(
        self, remove_from_whitelist_admin_request: "RemoveFromWhitelistAdminRequest"
    ) -> "RemoveFromWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def insert_worker_payload(
        self, insert_worker_payload_request: "InsertWorkerPayloadRequest"
    ) -> "InsertWorkerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def insert_reputer_payload(
        self, insert_reputer_payload_request: "InsertReputerPayloadRequest"
    ) -> "InsertReputerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_global_whitelist(
        self, add_to_global_whitelist_request: "AddToGlobalWhitelistRequest"
    ) -> "AddToGlobalWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_global_whitelist(
        self, remove_from_global_whitelist_request: "RemoveFromGlobalWhitelistRequest"
    ) -> "RemoveFromGlobalWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enable_topic_worker_whitelist(
        self, enable_topic_worker_whitelist_request: "EnableTopicWorkerWhitelistRequest"
    ) -> "EnableTopicWorkerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disable_topic_worker_whitelist(
        self,
        disable_topic_worker_whitelist_request: "DisableTopicWorkerWhitelistRequest",
    ) -> "DisableTopicWorkerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def enable_topic_reputer_whitelist(
        self,
        enable_topic_reputer_whitelist_request: "EnableTopicReputerWhitelistRequest",
    ) -> "EnableTopicReputerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def disable_topic_reputer_whitelist(
        self,
        disable_topic_reputer_whitelist_request: "DisableTopicReputerWhitelistRequest",
    ) -> "DisableTopicReputerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_topic_creator_whitelist(
        self,
        add_to_topic_creator_whitelist_request: "AddToTopicCreatorWhitelistRequest",
    ) -> "AddToTopicCreatorWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_topic_creator_whitelist(
        self,
        remove_from_topic_creator_whitelist_request: "RemoveFromTopicCreatorWhitelistRequest",
    ) -> "RemoveFromTopicCreatorWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_topic_worker_whitelist(
        self, add_to_topic_worker_whitelist_request: "AddToTopicWorkerWhitelistRequest"
    ) -> "AddToTopicWorkerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_topic_worker_whitelist(
        self,
        remove_from_topic_worker_whitelist_request: "RemoveFromTopicWorkerWhitelistRequest",
    ) -> "RemoveFromTopicWorkerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_topic_reputer_whitelist(
        self,
        add_to_topic_reputer_whitelist_request: "AddToTopicReputerWhitelistRequest",
    ) -> "AddToTopicReputerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_topic_reputer_whitelist(
        self,
        remove_from_topic_reputer_whitelist_request: "RemoveFromTopicReputerWhitelistRequest",
    ) -> "RemoveFromTopicReputerWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[UpdateParamsRequest, UpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_create_new_topic(
        self,
        stream: "grpclib.server.Stream[CreateNewTopicRequest, CreateNewTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_new_topic(request)
        await stream.send_message(response)

    async def __rpc_register(
        self, stream: "grpclib.server.Stream[RegisterRequest, RegisterResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.register(request)
        await stream.send_message(response)

    async def __rpc_remove_registration(
        self,
        stream: "grpclib.server.Stream[RemoveRegistrationRequest, RemoveRegistrationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_registration(request)
        await stream.send_message(response)

    async def __rpc_add_stake(
        self, stream: "grpclib.server.Stream[AddStakeRequest, AddStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_stake(request)
        await stream.send_message(response)

    async def __rpc_remove_stake(
        self, stream: "grpclib.server.Stream[RemoveStakeRequest, RemoveStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_stake(request)
        await stream.send_message(response)

    async def __rpc_cancel_remove_stake(
        self,
        stream: "grpclib.server.Stream[CancelRemoveStakeRequest, CancelRemoveStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_remove_stake(request)
        await stream.send_message(response)

    async def __rpc_delegate_stake(
        self,
        stream: "grpclib.server.Stream[DelegateStakeRequest, DelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_reward_delegate_stake(
        self,
        stream: "grpclib.server.Stream[RewardDelegateStakeRequest, RewardDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reward_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_remove_delegate_stake(
        self,
        stream: "grpclib.server.Stream[RemoveDelegateStakeRequest, RemoveDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_cancel_remove_delegate_stake(
        self,
        stream: "grpclib.server.Stream[CancelRemoveDelegateStakeRequest, CancelRemoveDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_remove_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_fund_topic(
        self, stream: "grpclib.server.Stream[FundTopicRequest, FundTopicResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_topic(request)
        await stream.send_message(response)

    async def __rpc_add_to_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[AddToWhitelistAdminRequest, AddToWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_remove_from_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[RemoveFromWhitelistAdminRequest, RemoveFromWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_insert_worker_payload(
        self,
        stream: "grpclib.server.Stream[InsertWorkerPayloadRequest, InsertWorkerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.insert_worker_payload(request)
        await stream.send_message(response)

    async def __rpc_insert_reputer_payload(
        self,
        stream: "grpclib.server.Stream[InsertReputerPayloadRequest, InsertReputerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.insert_reputer_payload(request)
        await stream.send_message(response)

    async def __rpc_add_to_global_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToGlobalWhitelistRequest, AddToGlobalWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_global_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_global_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromGlobalWhitelistRequest, RemoveFromGlobalWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_global_whitelist(request)
        await stream.send_message(response)

    async def __rpc_enable_topic_worker_whitelist(
        self,
        stream: "grpclib.server.Stream[EnableTopicWorkerWhitelistRequest, EnableTopicWorkerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.enable_topic_worker_whitelist(request)
        await stream.send_message(response)

    async def __rpc_disable_topic_worker_whitelist(
        self,
        stream: "grpclib.server.Stream[DisableTopicWorkerWhitelistRequest, DisableTopicWorkerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.disable_topic_worker_whitelist(request)
        await stream.send_message(response)

    async def __rpc_enable_topic_reputer_whitelist(
        self,
        stream: "grpclib.server.Stream[EnableTopicReputerWhitelistRequest, EnableTopicReputerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.enable_topic_reputer_whitelist(request)
        await stream.send_message(response)

    async def __rpc_disable_topic_reputer_whitelist(
        self,
        stream: "grpclib.server.Stream[DisableTopicReputerWhitelistRequest, DisableTopicReputerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.disable_topic_reputer_whitelist(request)
        await stream.send_message(response)

    async def __rpc_add_to_topic_creator_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToTopicCreatorWhitelistRequest, AddToTopicCreatorWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_topic_creator_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_topic_creator_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromTopicCreatorWhitelistRequest, RemoveFromTopicCreatorWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_topic_creator_whitelist(request)
        await stream.send_message(response)

    async def __rpc_add_to_topic_worker_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToTopicWorkerWhitelistRequest, AddToTopicWorkerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_topic_worker_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_topic_worker_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromTopicWorkerWhitelistRequest, RemoveFromTopicWorkerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_topic_worker_whitelist(request)
        await stream.send_message(response)

    async def __rpc_add_to_topic_reputer_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToTopicReputerWhitelistRequest, AddToTopicReputerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_topic_reputer_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_topic_reputer_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromTopicReputerWhitelistRequest, RemoveFromTopicReputerWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_topic_reputer_whitelist(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/emissions.v6.MsgService/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateParamsRequest,
                UpdateParamsResponse,
            ),
            "/emissions.v6.MsgService/CreateNewTopic": grpclib.const.Handler(
                self.__rpc_create_new_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateNewTopicRequest,
                CreateNewTopicResponse,
            ),
            "/emissions.v6.MsgService/Register": grpclib.const.Handler(
                self.__rpc_register,
                grpclib.const.Cardinality.UNARY_UNARY,
                RegisterRequest,
                RegisterResponse,
            ),
            "/emissions.v6.MsgService/RemoveRegistration": grpclib.const.Handler(
                self.__rpc_remove_registration,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveRegistrationRequest,
                RemoveRegistrationResponse,
            ),
            "/emissions.v6.MsgService/AddStake": grpclib.const.Handler(
                self.__rpc_add_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddStakeRequest,
                AddStakeResponse,
            ),
            "/emissions.v6.MsgService/RemoveStake": grpclib.const.Handler(
                self.__rpc_remove_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveStakeRequest,
                RemoveStakeResponse,
            ),
            "/emissions.v6.MsgService/CancelRemoveStake": grpclib.const.Handler(
                self.__rpc_cancel_remove_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelRemoveStakeRequest,
                CancelRemoveStakeResponse,
            ),
            "/emissions.v6.MsgService/DelegateStake": grpclib.const.Handler(
                self.__rpc_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                DelegateStakeRequest,
                DelegateStakeResponse,
            ),
            "/emissions.v6.MsgService/RewardDelegateStake": grpclib.const.Handler(
                self.__rpc_reward_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                RewardDelegateStakeRequest,
                RewardDelegateStakeResponse,
            ),
            "/emissions.v6.MsgService/RemoveDelegateStake": grpclib.const.Handler(
                self.__rpc_remove_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveDelegateStakeRequest,
                RemoveDelegateStakeResponse,
            ),
            "/emissions.v6.MsgService/CancelRemoveDelegateStake": grpclib.const.Handler(
                self.__rpc_cancel_remove_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                CancelRemoveDelegateStakeRequest,
                CancelRemoveDelegateStakeResponse,
            ),
            "/emissions.v6.MsgService/FundTopic": grpclib.const.Handler(
                self.__rpc_fund_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                FundTopicRequest,
                FundTopicResponse,
            ),
            "/emissions.v6.MsgService/AddToWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_add_to_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToWhitelistAdminRequest,
                AddToWhitelistAdminResponse,
            ),
            "/emissions.v6.MsgService/RemoveFromWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_remove_from_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromWhitelistAdminRequest,
                RemoveFromWhitelistAdminResponse,
            ),
            "/emissions.v6.MsgService/InsertWorkerPayload": grpclib.const.Handler(
                self.__rpc_insert_worker_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                InsertWorkerPayloadRequest,
                InsertWorkerPayloadResponse,
            ),
            "/emissions.v6.MsgService/InsertReputerPayload": grpclib.const.Handler(
                self.__rpc_insert_reputer_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                InsertReputerPayloadRequest,
                InsertReputerPayloadResponse,
            ),
            "/emissions.v6.MsgService/AddToGlobalWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_global_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToGlobalWhitelistRequest,
                AddToGlobalWhitelistResponse,
            ),
            "/emissions.v6.MsgService/RemoveFromGlobalWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_global_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromGlobalWhitelistRequest,
                RemoveFromGlobalWhitelistResponse,
            ),
            "/emissions.v6.MsgService/EnableTopicWorkerWhitelist": grpclib.const.Handler(
                self.__rpc_enable_topic_worker_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                EnableTopicWorkerWhitelistRequest,
                EnableTopicWorkerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/DisableTopicWorkerWhitelist": grpclib.const.Handler(
                self.__rpc_disable_topic_worker_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                DisableTopicWorkerWhitelistRequest,
                DisableTopicWorkerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/EnableTopicReputerWhitelist": grpclib.const.Handler(
                self.__rpc_enable_topic_reputer_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                EnableTopicReputerWhitelistRequest,
                EnableTopicReputerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/DisableTopicReputerWhitelist": grpclib.const.Handler(
                self.__rpc_disable_topic_reputer_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                DisableTopicReputerWhitelistRequest,
                DisableTopicReputerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/AddToTopicCreatorWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_topic_creator_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToTopicCreatorWhitelistRequest,
                AddToTopicCreatorWhitelistResponse,
            ),
            "/emissions.v6.MsgService/RemoveFromTopicCreatorWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_topic_creator_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromTopicCreatorWhitelistRequest,
                RemoveFromTopicCreatorWhitelistResponse,
            ),
            "/emissions.v6.MsgService/AddToTopicWorkerWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_topic_worker_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToTopicWorkerWhitelistRequest,
                AddToTopicWorkerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/RemoveFromTopicWorkerWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_topic_worker_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromTopicWorkerWhitelistRequest,
                RemoveFromTopicWorkerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/AddToTopicReputerWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_topic_reputer_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToTopicReputerWhitelistRequest,
                AddToTopicReputerWhitelistResponse,
            ),
            "/emissions.v6.MsgService/RemoveFromTopicReputerWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_topic_reputer_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromTopicReputerWhitelistRequest,
                RemoveFromTopicReputerWhitelistResponse,
            ),
        }


class QueryServiceBase(ServiceBase):

    async def get_params(
        self, get_params_request: "GetParamsRequest"
    ) -> "GetParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_topic_id(
        self, get_next_topic_id_request: "GetNextTopicIdRequest"
    ) -> "GetNextTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic(
        self, get_topic_request: "GetTopicRequest"
    ) -> "GetTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_latest_inference_by_topic_id(
        self,
        get_worker_latest_inference_by_topic_id_request: "GetWorkerLatestInferenceByTopicIdRequest",
    ) -> "GetWorkerLatestInferenceByTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inferences_at_block(
        self, get_inferences_at_block_request: "GetInferencesAtBlockRequest"
    ) -> "GetInferencesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_topic_inferences(
        self, get_latest_topic_inferences_request: "GetLatestTopicInferencesRequest"
    ) -> "GetLatestTopicInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecasts_at_block(
        self, get_forecasts_at_block_request: "GetForecastsAtBlockRequest"
    ) -> "GetForecastsAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_network_loss_bundle_at_block(
        self,
        get_network_loss_bundle_at_block_request: "GetNetworkLossBundleAtBlockRequest",
    ) -> "GetNetworkLossBundleAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_total_stake(
        self, get_total_stake_request: "GetTotalStakeRequest"
    ) -> "GetTotalStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_stake_in_topic(
        self, get_reputer_stake_in_topic_request: "GetReputerStakeInTopicRequest"
    ) -> "GetReputerStakeInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_multi_reputer_stake_in_topic(
        self,
        get_multi_reputer_stake_in_topic_request: "GetMultiReputerStakeInTopicRequest",
    ) -> "GetMultiReputerStakeInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        get_stake_from_reputer_in_topic_in_self_request: "GetStakeFromReputerInTopicInSelfRequest",
    ) -> "GetStakeFromReputerInTopicInSelfResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        get_delegate_stake_in_topic_in_reputer_request: "GetDelegateStakeInTopicInReputerRequest",
    ) -> "GetDelegateStakeInTopicInReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        get_stake_from_delegator_in_topic_in_reputer_request: "GetStakeFromDelegatorInTopicInReputerRequest",
    ) -> "GetStakeFromDelegatorInTopicInReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_delegator_in_topic(
        self,
        get_stake_from_delegator_in_topic_request: "GetStakeFromDelegatorInTopicRequest",
    ) -> "GetStakeFromDelegatorInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_stake(
        self, get_topic_stake_request: "GetTopicStakeRequest"
    ) -> "GetTopicStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removals_up_until_block(
        self,
        get_stake_removals_up_until_block_request: "GetStakeRemovalsUpUntilBlockRequest",
    ) -> "GetStakeRemovalsUpUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removals_up_until_block(
        self,
        get_delegate_stake_removals_up_until_block_request: "GetDelegateStakeRemovalsUpUntilBlockRequest",
    ) -> "GetDelegateStakeRemovalsUpUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removal_info(
        self, get_stake_removal_info_request: "GetStakeRemovalInfoRequest"
    ) -> "GetStakeRemovalInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removal_info(
        self,
        get_delegate_stake_removal_info_request: "GetDelegateStakeRemovalInfoRequest",
    ) -> "GetDelegateStakeRemovalInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_node_info(
        self, get_worker_node_info_request: "GetWorkerNodeInfoRequest"
    ) -> "GetWorkerNodeInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_node_info(
        self, get_reputer_node_info_request: "GetReputerNodeInfoRequest"
    ) -> "GetReputerNodeInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_worker_registered_in_topic_id(
        self,
        is_worker_registered_in_topic_id_request: "IsWorkerRegisteredInTopicIdRequest",
    ) -> "IsWorkerRegisteredInTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_reputer_registered_in_topic_id(
        self,
        is_reputer_registered_in_topic_id_request: "IsReputerRegisteredInTopicIdRequest",
    ) -> "IsReputerRegisteredInTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_network_inferences_at_block(
        self,
        get_network_inferences_at_block_request: "GetNetworkInferencesAtBlockRequest",
    ) -> "GetNetworkInferencesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_network_inferences(
        self, get_latest_network_inferences_request: "GetLatestNetworkInferencesRequest"
    ) -> "GetLatestNetworkInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_available_network_inferences(
        self,
        get_latest_available_network_inferences_request: "GetLatestAvailableNetworkInferencesRequest",
    ) -> "GetLatestAvailableNetworkInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_worker_nonce_unfulfilled(
        self, is_worker_nonce_unfulfilled_request: "IsWorkerNonceUnfulfilledRequest"
    ) -> "IsWorkerNonceUnfulfilledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_reputer_nonce_unfulfilled(
        self, is_reputer_nonce_unfulfilled_request: "IsReputerNonceUnfulfilledRequest"
    ) -> "IsReputerNonceUnfulfilledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unfulfilled_worker_nonces(
        self, get_unfulfilled_worker_nonces_request: "GetUnfulfilledWorkerNoncesRequest"
    ) -> "GetUnfulfilledWorkerNoncesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unfulfilled_reputer_nonces(
        self,
        get_unfulfilled_reputer_nonces_request: "GetUnfulfilledReputerNoncesRequest",
    ) -> "GetUnfulfilledReputerNoncesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inferer_network_regret(
        self, get_inferer_network_regret_request: "GetInfererNetworkRegretRequest"
    ) -> "GetInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecaster_network_regret(
        self, get_forecaster_network_regret_request: "GetForecasterNetworkRegretRequest"
    ) -> "GetForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_in_forecaster_network_regret(
        self,
        get_one_in_forecaster_network_regret_request: "GetOneInForecasterNetworkRegretRequest",
    ) -> "GetOneInForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelist_admin(
        self, is_whitelist_admin_request: "IsWhitelistAdminRequest"
    ) -> "IsWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_last_worker_commit_info(
        self,
        get_topic_last_worker_commit_info_request: "GetTopicLastWorkerCommitInfoRequest",
    ) -> "GetTopicLastWorkerCommitInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_last_reputer_commit_info(
        self,
        get_topic_last_reputer_commit_info_request: "GetTopicLastReputerCommitInfoRequest",
    ) -> "GetTopicLastReputerCommitInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_reward_nonce(
        self, get_topic_reward_nonce_request: "GetTopicRewardNonceRequest"
    ) -> "GetTopicRewardNonceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_loss_bundles_at_block(
        self,
        get_reputer_loss_bundles_at_block_request: "GetReputerLossBundlesAtBlockRequest",
    ) -> "GetReputerLossBundlesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_reputer_authority(
        self, get_stake_reputer_authority_request: "GetStakeReputerAuthorityRequest"
    ) -> "GetStakeReputerAuthorityResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_placement(
        self, get_delegate_stake_placement_request: "GetDelegateStakePlacementRequest"
    ) -> "GetDelegateStakePlacementResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_upon_reputer(
        self,
        get_delegate_stake_upon_reputer_request: "GetDelegateStakeUponReputerRequest",
    ) -> "GetDelegateStakeUponReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_reward_per_share(
        self, get_delegate_reward_per_share_request: "GetDelegateRewardPerShareRequest"
    ) -> "GetDelegateRewardPerShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        get_stake_removal_for_reputer_and_topic_id_request: "GetStakeRemovalForReputerAndTopicIdRequest",
    ) -> "GetStakeRemovalForReputerAndTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removal(
        self, get_delegate_stake_removal_request: "GetDelegateStakeRemovalRequest"
    ) -> "GetDelegateStakeRemovalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_topic_weight(
        self, get_previous_topic_weight_request: "GetPreviousTopicWeightRequest"
    ) -> "GetPreviousTopicWeightResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_total_sum_previous_topic_weights(
        self,
        get_total_sum_previous_topic_weights_request: "GetTotalSumPreviousTopicWeightsRequest",
    ) -> "GetTotalSumPreviousTopicWeightsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def topic_exists(
        self, topic_exists_request: "TopicExistsRequest"
    ) -> "TopicExistsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_topic_active(
        self, is_topic_active_request: "IsTopicActiveRequest"
    ) -> "IsTopicActiveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_fee_revenue(
        self, get_topic_fee_revenue_request: "GetTopicFeeRevenueRequest"
    ) -> "GetTopicFeeRevenueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inferer_score_ema(
        self, get_inferer_score_ema_request: "GetInfererScoreEmaRequest"
    ) -> "GetInfererScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecaster_score_ema(
        self, get_forecaster_score_ema_request: "GetForecasterScoreEmaRequest"
    ) -> "GetForecasterScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_score_ema(
        self, get_reputer_score_ema_request: "GetReputerScoreEmaRequest"
    ) -> "GetReputerScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inference_scores_until_block(
        self,
        get_inference_scores_until_block_request: "GetInferenceScoresUntilBlockRequest",
    ) -> "GetInferenceScoresUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_topic_quantile_forecaster_score_ema(
        self,
        get_previous_topic_quantile_forecaster_score_ema_request: "GetPreviousTopicQuantileForecasterScoreEmaRequest",
    ) -> "GetPreviousTopicQuantileForecasterScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_topic_quantile_inferer_score_ema(
        self,
        get_previous_topic_quantile_inferer_score_ema_request: "GetPreviousTopicQuantileInfererScoreEmaRequest",
    ) -> "GetPreviousTopicQuantileInfererScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_topic_quantile_reputer_score_ema(
        self,
        get_previous_topic_quantile_reputer_score_ema_request: "GetPreviousTopicQuantileReputerScoreEmaRequest",
    ) -> "GetPreviousTopicQuantileReputerScoreEmaResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_inference_scores_at_block(
        self,
        get_worker_inference_scores_at_block_request: "GetWorkerInferenceScoresAtBlockRequest",
    ) -> "GetWorkerInferenceScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_lowest_inferer_score(
        self,
        get_current_lowest_inferer_score_request: "GetCurrentLowestInfererScoreRequest",
    ) -> "GetCurrentLowestInfererScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecast_scores_until_block(
        self,
        get_forecast_scores_until_block_request: "GetForecastScoresUntilBlockRequest",
    ) -> "GetForecastScoresUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_forecast_scores_at_block(
        self,
        get_worker_forecast_scores_at_block_request: "GetWorkerForecastScoresAtBlockRequest",
    ) -> "GetWorkerForecastScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_lowest_forecaster_score(
        self,
        get_current_lowest_forecaster_score_request: "GetCurrentLowestForecasterScoreRequest",
    ) -> "GetCurrentLowestForecasterScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputers_scores_at_block(
        self, get_reputers_scores_at_block_request: "GetReputersScoresAtBlockRequest"
    ) -> "GetReputersScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_current_lowest_reputer_score(
        self,
        get_current_lowest_reputer_score_request: "GetCurrentLowestReputerScoreRequest",
    ) -> "GetCurrentLowestReputerScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_listening_coefficient(
        self, get_listening_coefficient_request: "GetListeningCoefficientRequest"
    ) -> "GetListeningCoefficientResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_reputer_reward_fraction(
        self,
        get_previous_reputer_reward_fraction_request: "GetPreviousReputerRewardFractionRequest",
    ) -> "GetPreviousReputerRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_inference_reward_fraction(
        self,
        get_previous_inference_reward_fraction_request: "GetPreviousInferenceRewardFractionRequest",
    ) -> "GetPreviousInferenceRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_forecast_reward_fraction(
        self,
        get_previous_forecast_reward_fraction_request: "GetPreviousForecastRewardFractionRequest",
    ) -> "GetPreviousForecastRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        get_previous_percentage_reward_to_staked_reputers_request: "GetPreviousPercentageRewardToStakedReputersRequest",
    ) -> "GetPreviousPercentageRewardToStakedReputersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_total_reward_to_distribute(
        self,
        get_total_reward_to_distribute_request: "GetTotalRewardToDistributeRequest",
    ) -> "GetTotalRewardToDistributeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_naive_inferer_network_regret(
        self,
        get_naive_inferer_network_regret_request: "GetNaiveInfererNetworkRegretRequest",
    ) -> "GetNaiveInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_inferer_inferer_network_regret(
        self,
        get_one_out_inferer_inferer_network_regret_request: "GetOneOutInfererInfererNetworkRegretRequest",
    ) -> "GetOneOutInfererInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        get_one_out_inferer_forecaster_network_regret_request: "GetOneOutInfererForecasterNetworkRegretRequest",
    ) -> "GetOneOutInfererForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        get_one_out_forecaster_inferer_network_regret_request: "GetOneOutForecasterInfererNetworkRegretRequest",
    ) -> "GetOneOutForecasterInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        get_one_out_forecaster_forecaster_network_regret_request: "GetOneOutForecasterForecasterNetworkRegretRequest",
    ) -> "GetOneOutForecasterForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_topics_at_block(
        self, get_active_topics_at_block_request: "GetActiveTopicsAtBlockRequest"
    ) -> "GetActiveTopicsAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_churning_block_by_topic_id(
        self,
        get_next_churning_block_by_topic_id_request: "GetNextChurningBlockByTopicIdRequest",
    ) -> "GetNextChurningBlockByTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_count_inferer_inclusions_in_topic(
        self,
        get_count_inferer_inclusions_in_topic_request: "GetCountInfererInclusionsInTopicRequest",
    ) -> "GetCountInfererInclusionsInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_count_forecaster_inclusions_in_topic(
        self,
        get_count_forecaster_inclusions_in_topic_request: "GetCountForecasterInclusionsInTopicRequest",
    ) -> "GetCountForecasterInclusionsInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_reputers_for_topic(
        self, get_active_reputers_for_topic_request: "GetActiveReputersForTopicRequest"
    ) -> "GetActiveReputersForTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_forecasters_for_topic(
        self,
        get_active_forecasters_for_topic_request: "GetActiveForecastersForTopicRequest",
    ) -> "GetActiveForecastersForTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_inferers_for_topic(
        self, get_active_inferers_for_topic_request: "GetActiveInferersForTopicRequest"
    ) -> "GetActiveInferersForTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_topic_worker_whitelist_enabled(
        self,
        is_topic_worker_whitelist_enabled_request: "IsTopicWorkerWhitelistEnabledRequest",
    ) -> "IsTopicWorkerWhitelistEnabledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_topic_reputer_whitelist_enabled(
        self,
        is_topic_reputer_whitelist_enabled_request: "IsTopicReputerWhitelistEnabledRequest",
    ) -> "IsTopicReputerWhitelistEnabledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelisted_topic_creator(
        self, is_whitelisted_topic_creator_request: "IsWhitelistedTopicCreatorRequest"
    ) -> "IsWhitelistedTopicCreatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelisted_global_actor(
        self, is_whitelisted_global_actor_request: "IsWhitelistedGlobalActorRequest"
    ) -> "IsWhitelistedGlobalActorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelisted_topic_worker(
        self, is_whitelisted_topic_worker_request: "IsWhitelistedTopicWorkerRequest"
    ) -> "IsWhitelistedTopicWorkerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelisted_topic_reputer(
        self, is_whitelisted_topic_reputer_request: "IsWhitelistedTopicReputerRequest"
    ) -> "IsWhitelistedTopicReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_update_global_whitelists(
        self, can_update_global_whitelists_request: "CanUpdateGlobalWhitelistsRequest"
    ) -> "CanUpdateGlobalWhitelistsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_update_params(
        self, can_update_params_request: "CanUpdateParamsRequest"
    ) -> "CanUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_update_topic_whitelist(
        self, can_update_topic_whitelist_request: "CanUpdateTopicWhitelistRequest"
    ) -> "CanUpdateTopicWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_create_topic(
        self, can_create_topic_request: "CanCreateTopicRequest"
    ) -> "CanCreateTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_submit_worker_payload(
        self, can_submit_worker_payload_request: "CanSubmitWorkerPayloadRequest"
    ) -> "CanSubmitWorkerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def can_submit_reputer_payload(
        self, can_submit_reputer_payload_request: "CanSubmitReputerPayloadRequest"
    ) -> "CanSubmitReputerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_params(
        self, stream: "grpclib.server.Stream[GetParamsRequest, GetParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_params(request)
        await stream.send_message(response)

    async def __rpc_get_next_topic_id(
        self,
        stream: "grpclib.server.Stream[GetNextTopicIdRequest, GetNextTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_topic(
        self, stream: "grpclib.server.Stream[GetTopicRequest, GetTopicResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic(request)
        await stream.send_message(response)

    async def __rpc_get_worker_latest_inference_by_topic_id(
        self,
        stream: "grpclib.server.Stream[GetWorkerLatestInferenceByTopicIdRequest, GetWorkerLatestInferenceByTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_latest_inference_by_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_inferences_at_block(
        self,
        stream: "grpclib.server.Stream[GetInferencesAtBlockRequest, GetInferencesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inferences_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_latest_topic_inferences(
        self,
        stream: "grpclib.server.Stream[GetLatestTopicInferencesRequest, GetLatestTopicInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_topic_inferences(request)
        await stream.send_message(response)

    async def __rpc_get_forecasts_at_block(
        self,
        stream: "grpclib.server.Stream[GetForecastsAtBlockRequest, GetForecastsAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecasts_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_network_loss_bundle_at_block(
        self,
        stream: "grpclib.server.Stream[GetNetworkLossBundleAtBlockRequest, GetNetworkLossBundleAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_network_loss_bundle_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_total_stake(
        self,
        stream: "grpclib.server.Stream[GetTotalStakeRequest, GetTotalStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_total_stake(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_stake_in_topic(
        self,
        stream: "grpclib.server.Stream[GetReputerStakeInTopicRequest, GetReputerStakeInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_stake_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_multi_reputer_stake_in_topic(
        self,
        stream: "grpclib.server.Stream[GetMultiReputerStakeInTopicRequest, GetMultiReputerStakeInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_multi_reputer_stake_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_reputer_in_topic_in_self(
        self,
        stream: "grpclib.server.Stream[GetStakeFromReputerInTopicInSelfRequest, GetStakeFromReputerInTopicInSelfResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_reputer_in_topic_in_self(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_in_topic_in_reputer(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakeInTopicInReputerRequest, GetDelegateStakeInTopicInReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_in_topic_in_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_delegator_in_topic_in_reputer(
        self,
        stream: "grpclib.server.Stream[GetStakeFromDelegatorInTopicInReputerRequest, GetStakeFromDelegatorInTopicInReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_delegator_in_topic_in_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_delegator_in_topic(
        self,
        stream: "grpclib.server.Stream[GetStakeFromDelegatorInTopicRequest, GetStakeFromDelegatorInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_delegator_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_topic_stake(
        self,
        stream: "grpclib.server.Stream[GetTopicStakeRequest, GetTopicStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_stake(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removals_up_until_block(
        self,
        stream: "grpclib.server.Stream[GetStakeRemovalsUpUntilBlockRequest, GetStakeRemovalsUpUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removals_up_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removals_up_until_block(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakeRemovalsUpUntilBlockRequest, GetDelegateStakeRemovalsUpUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removals_up_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removal_info(
        self,
        stream: "grpclib.server.Stream[GetStakeRemovalInfoRequest, GetStakeRemovalInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removal_info(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removal_info(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakeRemovalInfoRequest, GetDelegateStakeRemovalInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removal_info(request)
        await stream.send_message(response)

    async def __rpc_get_worker_node_info(
        self,
        stream: "grpclib.server.Stream[GetWorkerNodeInfoRequest, GetWorkerNodeInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_node_info(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_node_info(
        self,
        stream: "grpclib.server.Stream[GetReputerNodeInfoRequest, GetReputerNodeInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_node_info(request)
        await stream.send_message(response)

    async def __rpc_is_worker_registered_in_topic_id(
        self,
        stream: "grpclib.server.Stream[IsWorkerRegisteredInTopicIdRequest, IsWorkerRegisteredInTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_worker_registered_in_topic_id(request)
        await stream.send_message(response)

    async def __rpc_is_reputer_registered_in_topic_id(
        self,
        stream: "grpclib.server.Stream[IsReputerRegisteredInTopicIdRequest, IsReputerRegisteredInTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_reputer_registered_in_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_network_inferences_at_block(
        self,
        stream: "grpclib.server.Stream[GetNetworkInferencesAtBlockRequest, GetNetworkInferencesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_network_inferences_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_latest_network_inferences(
        self,
        stream: "grpclib.server.Stream[GetLatestNetworkInferencesRequest, GetLatestNetworkInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_network_inferences(request)
        await stream.send_message(response)

    async def __rpc_get_latest_available_network_inferences(
        self,
        stream: "grpclib.server.Stream[GetLatestAvailableNetworkInferencesRequest, GetLatestAvailableNetworkInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_available_network_inferences(request)
        await stream.send_message(response)

    async def __rpc_is_worker_nonce_unfulfilled(
        self,
        stream: "grpclib.server.Stream[IsWorkerNonceUnfulfilledRequest, IsWorkerNonceUnfulfilledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_worker_nonce_unfulfilled(request)
        await stream.send_message(response)

    async def __rpc_is_reputer_nonce_unfulfilled(
        self,
        stream: "grpclib.server.Stream[IsReputerNonceUnfulfilledRequest, IsReputerNonceUnfulfilledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_reputer_nonce_unfulfilled(request)
        await stream.send_message(response)

    async def __rpc_get_unfulfilled_worker_nonces(
        self,
        stream: "grpclib.server.Stream[GetUnfulfilledWorkerNoncesRequest, GetUnfulfilledWorkerNoncesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unfulfilled_worker_nonces(request)
        await stream.send_message(response)

    async def __rpc_get_unfulfilled_reputer_nonces(
        self,
        stream: "grpclib.server.Stream[GetUnfulfilledReputerNoncesRequest, GetUnfulfilledReputerNoncesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unfulfilled_reputer_nonces(request)
        await stream.send_message(response)

    async def __rpc_get_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[GetInfererNetworkRegretRequest, GetInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[GetForecasterNetworkRegretRequest, GetForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_in_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[GetOneInForecasterNetworkRegretRequest, GetOneInForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_in_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_is_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[IsWhitelistAdminRequest, IsWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_get_topic_last_worker_commit_info(
        self,
        stream: "grpclib.server.Stream[GetTopicLastWorkerCommitInfoRequest, GetTopicLastWorkerCommitInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_last_worker_commit_info(request)
        await stream.send_message(response)

    async def __rpc_get_topic_last_reputer_commit_info(
        self,
        stream: "grpclib.server.Stream[GetTopicLastReputerCommitInfoRequest, GetTopicLastReputerCommitInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_last_reputer_commit_info(request)
        await stream.send_message(response)

    async def __rpc_get_topic_reward_nonce(
        self,
        stream: "grpclib.server.Stream[GetTopicRewardNonceRequest, GetTopicRewardNonceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_reward_nonce(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_loss_bundles_at_block(
        self,
        stream: "grpclib.server.Stream[GetReputerLossBundlesAtBlockRequest, GetReputerLossBundlesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_loss_bundles_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_stake_reputer_authority(
        self,
        stream: "grpclib.server.Stream[GetStakeReputerAuthorityRequest, GetStakeReputerAuthorityResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_reputer_authority(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_placement(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakePlacementRequest, GetDelegateStakePlacementResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_placement(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_upon_reputer(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakeUponReputerRequest, GetDelegateStakeUponReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_upon_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_reward_per_share(
        self,
        stream: "grpclib.server.Stream[GetDelegateRewardPerShareRequest, GetDelegateRewardPerShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_reward_per_share(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removal_for_reputer_and_topic_id(
        self,
        stream: "grpclib.server.Stream[GetStakeRemovalForReputerAndTopicIdRequest, GetStakeRemovalForReputerAndTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removal_for_reputer_and_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removal(
        self,
        stream: "grpclib.server.Stream[GetDelegateStakeRemovalRequest, GetDelegateStakeRemovalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removal(request)
        await stream.send_message(response)

    async def __rpc_get_previous_topic_weight(
        self,
        stream: "grpclib.server.Stream[GetPreviousTopicWeightRequest, GetPreviousTopicWeightResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_topic_weight(request)
        await stream.send_message(response)

    async def __rpc_get_total_sum_previous_topic_weights(
        self,
        stream: "grpclib.server.Stream[GetTotalSumPreviousTopicWeightsRequest, GetTotalSumPreviousTopicWeightsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_total_sum_previous_topic_weights(request)
        await stream.send_message(response)

    async def __rpc_topic_exists(
        self, stream: "grpclib.server.Stream[TopicExistsRequest, TopicExistsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.topic_exists(request)
        await stream.send_message(response)

    async def __rpc_is_topic_active(
        self,
        stream: "grpclib.server.Stream[IsTopicActiveRequest, IsTopicActiveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_topic_active(request)
        await stream.send_message(response)

    async def __rpc_get_topic_fee_revenue(
        self,
        stream: "grpclib.server.Stream[GetTopicFeeRevenueRequest, GetTopicFeeRevenueResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_fee_revenue(request)
        await stream.send_message(response)

    async def __rpc_get_inferer_score_ema(
        self,
        stream: "grpclib.server.Stream[GetInfererScoreEmaRequest, GetInfererScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inferer_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_forecaster_score_ema(
        self,
        stream: "grpclib.server.Stream[GetForecasterScoreEmaRequest, GetForecasterScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecaster_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_score_ema(
        self,
        stream: "grpclib.server.Stream[GetReputerScoreEmaRequest, GetReputerScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_inference_scores_until_block(
        self,
        stream: "grpclib.server.Stream[GetInferenceScoresUntilBlockRequest, GetInferenceScoresUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inference_scores_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_previous_topic_quantile_forecaster_score_ema(
        self,
        stream: "grpclib.server.Stream[GetPreviousTopicQuantileForecasterScoreEmaRequest, GetPreviousTopicQuantileForecasterScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_topic_quantile_forecaster_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_previous_topic_quantile_inferer_score_ema(
        self,
        stream: "grpclib.server.Stream[GetPreviousTopicQuantileInfererScoreEmaRequest, GetPreviousTopicQuantileInfererScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_topic_quantile_inferer_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_previous_topic_quantile_reputer_score_ema(
        self,
        stream: "grpclib.server.Stream[GetPreviousTopicQuantileReputerScoreEmaRequest, GetPreviousTopicQuantileReputerScoreEmaResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_topic_quantile_reputer_score_ema(request)
        await stream.send_message(response)

    async def __rpc_get_worker_inference_scores_at_block(
        self,
        stream: "grpclib.server.Stream[GetWorkerInferenceScoresAtBlockRequest, GetWorkerInferenceScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_inference_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_current_lowest_inferer_score(
        self,
        stream: "grpclib.server.Stream[GetCurrentLowestInfererScoreRequest, GetCurrentLowestInfererScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_lowest_inferer_score(request)
        await stream.send_message(response)

    async def __rpc_get_forecast_scores_until_block(
        self,
        stream: "grpclib.server.Stream[GetForecastScoresUntilBlockRequest, GetForecastScoresUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecast_scores_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_worker_forecast_scores_at_block(
        self,
        stream: "grpclib.server.Stream[GetWorkerForecastScoresAtBlockRequest, GetWorkerForecastScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_forecast_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_current_lowest_forecaster_score(
        self,
        stream: "grpclib.server.Stream[GetCurrentLowestForecasterScoreRequest, GetCurrentLowestForecasterScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_lowest_forecaster_score(request)
        await stream.send_message(response)

    async def __rpc_get_reputers_scores_at_block(
        self,
        stream: "grpclib.server.Stream[GetReputersScoresAtBlockRequest, GetReputersScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputers_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_current_lowest_reputer_score(
        self,
        stream: "grpclib.server.Stream[GetCurrentLowestReputerScoreRequest, GetCurrentLowestReputerScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_current_lowest_reputer_score(request)
        await stream.send_message(response)

    async def __rpc_get_listening_coefficient(
        self,
        stream: "grpclib.server.Stream[GetListeningCoefficientRequest, GetListeningCoefficientResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_listening_coefficient(request)
        await stream.send_message(response)

    async def __rpc_get_previous_reputer_reward_fraction(
        self,
        stream: "grpclib.server.Stream[GetPreviousReputerRewardFractionRequest, GetPreviousReputerRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_reputer_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_inference_reward_fraction(
        self,
        stream: "grpclib.server.Stream[GetPreviousInferenceRewardFractionRequest, GetPreviousInferenceRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_inference_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_forecast_reward_fraction(
        self,
        stream: "grpclib.server.Stream[GetPreviousForecastRewardFractionRequest, GetPreviousForecastRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_forecast_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_percentage_reward_to_staked_reputers(
        self,
        stream: "grpclib.server.Stream[GetPreviousPercentageRewardToStakedReputersRequest, GetPreviousPercentageRewardToStakedReputersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_percentage_reward_to_staked_reputers(request)
        await stream.send_message(response)

    async def __rpc_get_total_reward_to_distribute(
        self,
        stream: "grpclib.server.Stream[GetTotalRewardToDistributeRequest, GetTotalRewardToDistributeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_total_reward_to_distribute(request)
        await stream.send_message(response)

    async def __rpc_get_naive_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[GetNaiveInfererNetworkRegretRequest, GetNaiveInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_naive_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_inferer_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[GetOneOutInfererInfererNetworkRegretRequest, GetOneOutInfererInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_inferer_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_inferer_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[GetOneOutInfererForecasterNetworkRegretRequest, GetOneOutInfererForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_inferer_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_forecaster_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[GetOneOutForecasterInfererNetworkRegretRequest, GetOneOutForecasterInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_forecaster_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_forecaster_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[GetOneOutForecasterForecasterNetworkRegretRequest, GetOneOutForecasterForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_forecaster_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_active_topics_at_block(
        self,
        stream: "grpclib.server.Stream[GetActiveTopicsAtBlockRequest, GetActiveTopicsAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_topics_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_next_churning_block_by_topic_id(
        self,
        stream: "grpclib.server.Stream[GetNextChurningBlockByTopicIdRequest, GetNextChurningBlockByTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_churning_block_by_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_count_inferer_inclusions_in_topic(
        self,
        stream: "grpclib.server.Stream[GetCountInfererInclusionsInTopicRequest, GetCountInfererInclusionsInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_count_inferer_inclusions_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_count_forecaster_inclusions_in_topic(
        self,
        stream: "grpclib.server.Stream[GetCountForecasterInclusionsInTopicRequest, GetCountForecasterInclusionsInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_count_forecaster_inclusions_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_active_reputers_for_topic(
        self,
        stream: "grpclib.server.Stream[GetActiveReputersForTopicRequest, GetActiveReputersForTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_reputers_for_topic(request)
        await stream.send_message(response)

    async def __rpc_get_active_forecasters_for_topic(
        self,
        stream: "grpclib.server.Stream[GetActiveForecastersForTopicRequest, GetActiveForecastersForTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_forecasters_for_topic(request)
        await stream.send_message(response)

    async def __rpc_get_active_inferers_for_topic(
        self,
        stream: "grpclib.server.Stream[GetActiveInferersForTopicRequest, GetActiveInferersForTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_inferers_for_topic(request)
        await stream.send_message(response)

    async def __rpc_is_topic_worker_whitelist_enabled(
        self,
        stream: "grpclib.server.Stream[IsTopicWorkerWhitelistEnabledRequest, IsTopicWorkerWhitelistEnabledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_topic_worker_whitelist_enabled(request)
        await stream.send_message(response)

    async def __rpc_is_topic_reputer_whitelist_enabled(
        self,
        stream: "grpclib.server.Stream[IsTopicReputerWhitelistEnabledRequest, IsTopicReputerWhitelistEnabledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_topic_reputer_whitelist_enabled(request)
        await stream.send_message(response)

    async def __rpc_is_whitelisted_topic_creator(
        self,
        stream: "grpclib.server.Stream[IsWhitelistedTopicCreatorRequest, IsWhitelistedTopicCreatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelisted_topic_creator(request)
        await stream.send_message(response)

    async def __rpc_is_whitelisted_global_actor(
        self,
        stream: "grpclib.server.Stream[IsWhitelistedGlobalActorRequest, IsWhitelistedGlobalActorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelisted_global_actor(request)
        await stream.send_message(response)

    async def __rpc_is_whitelisted_topic_worker(
        self,
        stream: "grpclib.server.Stream[IsWhitelistedTopicWorkerRequest, IsWhitelistedTopicWorkerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelisted_topic_worker(request)
        await stream.send_message(response)

    async def __rpc_is_whitelisted_topic_reputer(
        self,
        stream: "grpclib.server.Stream[IsWhitelistedTopicReputerRequest, IsWhitelistedTopicReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelisted_topic_reputer(request)
        await stream.send_message(response)

    async def __rpc_can_update_global_whitelists(
        self,
        stream: "grpclib.server.Stream[CanUpdateGlobalWhitelistsRequest, CanUpdateGlobalWhitelistsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_update_global_whitelists(request)
        await stream.send_message(response)

    async def __rpc_can_update_params(
        self,
        stream: "grpclib.server.Stream[CanUpdateParamsRequest, CanUpdateParamsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_update_params(request)
        await stream.send_message(response)

    async def __rpc_can_update_topic_whitelist(
        self,
        stream: "grpclib.server.Stream[CanUpdateTopicWhitelistRequest, CanUpdateTopicWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_update_topic_whitelist(request)
        await stream.send_message(response)

    async def __rpc_can_create_topic(
        self,
        stream: "grpclib.server.Stream[CanCreateTopicRequest, CanCreateTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_create_topic(request)
        await stream.send_message(response)

    async def __rpc_can_submit_worker_payload(
        self,
        stream: "grpclib.server.Stream[CanSubmitWorkerPayloadRequest, CanSubmitWorkerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_submit_worker_payload(request)
        await stream.send_message(response)

    async def __rpc_can_submit_reputer_payload(
        self,
        stream: "grpclib.server.Stream[CanSubmitReputerPayloadRequest, CanSubmitReputerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.can_submit_reputer_payload(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/emissions.v6.QueryService/GetParams": grpclib.const.Handler(
                self.__rpc_get_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetParamsRequest,
                GetParamsResponse,
            ),
            "/emissions.v6.QueryService/GetNextTopicId": grpclib.const.Handler(
                self.__rpc_get_next_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNextTopicIdRequest,
                GetNextTopicIdResponse,
            ),
            "/emissions.v6.QueryService/GetTopic": grpclib.const.Handler(
                self.__rpc_get_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicRequest,
                GetTopicResponse,
            ),
            "/emissions.v6.QueryService/GetWorkerLatestInferenceByTopicId": grpclib.const.Handler(
                self.__rpc_get_worker_latest_inference_by_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetWorkerLatestInferenceByTopicIdRequest,
                GetWorkerLatestInferenceByTopicIdResponse,
            ),
            "/emissions.v6.QueryService/GetInferencesAtBlock": grpclib.const.Handler(
                self.__rpc_get_inferences_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetInferencesAtBlockRequest,
                GetInferencesAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetLatestTopicInferences": grpclib.const.Handler(
                self.__rpc_get_latest_topic_inferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestTopicInferencesRequest,
                GetLatestTopicInferencesResponse,
            ),
            "/emissions.v6.QueryService/GetForecastsAtBlock": grpclib.const.Handler(
                self.__rpc_get_forecasts_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetForecastsAtBlockRequest,
                GetForecastsAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetNetworkLossBundleAtBlock": grpclib.const.Handler(
                self.__rpc_get_network_loss_bundle_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNetworkLossBundleAtBlockRequest,
                GetNetworkLossBundleAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetTotalStake": grpclib.const.Handler(
                self.__rpc_get_total_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTotalStakeRequest,
                GetTotalStakeResponse,
            ),
            "/emissions.v6.QueryService/GetReputerStakeInTopic": grpclib.const.Handler(
                self.__rpc_get_reputer_stake_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReputerStakeInTopicRequest,
                GetReputerStakeInTopicResponse,
            ),
            "/emissions.v6.QueryService/GetMultiReputerStakeInTopic": grpclib.const.Handler(
                self.__rpc_get_multi_reputer_stake_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMultiReputerStakeInTopicRequest,
                GetMultiReputerStakeInTopicResponse,
            ),
            "/emissions.v6.QueryService/GetStakeFromReputerInTopicInSelf": grpclib.const.Handler(
                self.__rpc_get_stake_from_reputer_in_topic_in_self,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeFromReputerInTopicInSelfRequest,
                GetStakeFromReputerInTopicInSelfResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakeInTopicInReputer": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_in_topic_in_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakeInTopicInReputerRequest,
                GetDelegateStakeInTopicInReputerResponse,
            ),
            "/emissions.v6.QueryService/GetStakeFromDelegatorInTopicInReputer": grpclib.const.Handler(
                self.__rpc_get_stake_from_delegator_in_topic_in_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeFromDelegatorInTopicInReputerRequest,
                GetStakeFromDelegatorInTopicInReputerResponse,
            ),
            "/emissions.v6.QueryService/GetStakeFromDelegatorInTopic": grpclib.const.Handler(
                self.__rpc_get_stake_from_delegator_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeFromDelegatorInTopicRequest,
                GetStakeFromDelegatorInTopicResponse,
            ),
            "/emissions.v6.QueryService/GetTopicStake": grpclib.const.Handler(
                self.__rpc_get_topic_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicStakeRequest,
                GetTopicStakeResponse,
            ),
            "/emissions.v6.QueryService/GetStakeRemovalsUpUntilBlock": grpclib.const.Handler(
                self.__rpc_get_stake_removals_up_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeRemovalsUpUntilBlockRequest,
                GetStakeRemovalsUpUntilBlockResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakeRemovalsUpUntilBlock": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removals_up_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakeRemovalsUpUntilBlockRequest,
                GetDelegateStakeRemovalsUpUntilBlockResponse,
            ),
            "/emissions.v6.QueryService/GetStakeRemovalInfo": grpclib.const.Handler(
                self.__rpc_get_stake_removal_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeRemovalInfoRequest,
                GetStakeRemovalInfoResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakeRemovalInfo": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removal_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakeRemovalInfoRequest,
                GetDelegateStakeRemovalInfoResponse,
            ),
            "/emissions.v6.QueryService/GetWorkerNodeInfo": grpclib.const.Handler(
                self.__rpc_get_worker_node_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetWorkerNodeInfoRequest,
                GetWorkerNodeInfoResponse,
            ),
            "/emissions.v6.QueryService/GetReputerNodeInfo": grpclib.const.Handler(
                self.__rpc_get_reputer_node_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReputerNodeInfoRequest,
                GetReputerNodeInfoResponse,
            ),
            "/emissions.v6.QueryService/IsWorkerRegisteredInTopicId": grpclib.const.Handler(
                self.__rpc_is_worker_registered_in_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWorkerRegisteredInTopicIdRequest,
                IsWorkerRegisteredInTopicIdResponse,
            ),
            "/emissions.v6.QueryService/IsReputerRegisteredInTopicId": grpclib.const.Handler(
                self.__rpc_is_reputer_registered_in_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsReputerRegisteredInTopicIdRequest,
                IsReputerRegisteredInTopicIdResponse,
            ),
            "/emissions.v6.QueryService/GetNetworkInferencesAtBlock": grpclib.const.Handler(
                self.__rpc_get_network_inferences_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNetworkInferencesAtBlockRequest,
                GetNetworkInferencesAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetLatestNetworkInferences": grpclib.const.Handler(
                self.__rpc_get_latest_network_inferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestNetworkInferencesRequest,
                GetLatestNetworkInferencesResponse,
            ),
            "/emissions.v6.QueryService/GetLatestAvailableNetworkInferences": grpclib.const.Handler(
                self.__rpc_get_latest_available_network_inferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetLatestAvailableNetworkInferencesRequest,
                GetLatestAvailableNetworkInferencesResponse,
            ),
            "/emissions.v6.QueryService/IsWorkerNonceUnfulfilled": grpclib.const.Handler(
                self.__rpc_is_worker_nonce_unfulfilled,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWorkerNonceUnfulfilledRequest,
                IsWorkerNonceUnfulfilledResponse,
            ),
            "/emissions.v6.QueryService/IsReputerNonceUnfulfilled": grpclib.const.Handler(
                self.__rpc_is_reputer_nonce_unfulfilled,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsReputerNonceUnfulfilledRequest,
                IsReputerNonceUnfulfilledResponse,
            ),
            "/emissions.v6.QueryService/GetUnfulfilledWorkerNonces": grpclib.const.Handler(
                self.__rpc_get_unfulfilled_worker_nonces,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUnfulfilledWorkerNoncesRequest,
                GetUnfulfilledWorkerNoncesResponse,
            ),
            "/emissions.v6.QueryService/GetUnfulfilledReputerNonces": grpclib.const.Handler(
                self.__rpc_get_unfulfilled_reputer_nonces,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUnfulfilledReputerNoncesRequest,
                GetUnfulfilledReputerNoncesResponse,
            ),
            "/emissions.v6.QueryService/GetInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetInfererNetworkRegretRequest,
                GetInfererNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetForecasterNetworkRegretRequest,
                GetForecasterNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetOneInForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_in_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOneInForecasterNetworkRegretRequest,
                GetOneInForecasterNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/IsWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_is_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWhitelistAdminRequest,
                IsWhitelistAdminResponse,
            ),
            "/emissions.v6.QueryService/GetTopicLastWorkerCommitInfo": grpclib.const.Handler(
                self.__rpc_get_topic_last_worker_commit_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicLastWorkerCommitInfoRequest,
                GetTopicLastWorkerCommitInfoResponse,
            ),
            "/emissions.v6.QueryService/GetTopicLastReputerCommitInfo": grpclib.const.Handler(
                self.__rpc_get_topic_last_reputer_commit_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicLastReputerCommitInfoRequest,
                GetTopicLastReputerCommitInfoResponse,
            ),
            "/emissions.v6.QueryService/GetTopicRewardNonce": grpclib.const.Handler(
                self.__rpc_get_topic_reward_nonce,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicRewardNonceRequest,
                GetTopicRewardNonceResponse,
            ),
            "/emissions.v6.QueryService/GetReputerLossBundlesAtBlock": grpclib.const.Handler(
                self.__rpc_get_reputer_loss_bundles_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReputerLossBundlesAtBlockRequest,
                GetReputerLossBundlesAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetStakeReputerAuthority": grpclib.const.Handler(
                self.__rpc_get_stake_reputer_authority,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeReputerAuthorityRequest,
                GetStakeReputerAuthorityResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakePlacement": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_placement,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakePlacementRequest,
                GetDelegateStakePlacementResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakeUponReputer": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_upon_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakeUponReputerRequest,
                GetDelegateStakeUponReputerResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateRewardPerShare": grpclib.const.Handler(
                self.__rpc_get_delegate_reward_per_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateRewardPerShareRequest,
                GetDelegateRewardPerShareResponse,
            ),
            "/emissions.v6.QueryService/GetStakeRemovalForReputerAndTopicId": grpclib.const.Handler(
                self.__rpc_get_stake_removal_for_reputer_and_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakeRemovalForReputerAndTopicIdRequest,
                GetStakeRemovalForReputerAndTopicIdResponse,
            ),
            "/emissions.v6.QueryService/GetDelegateStakeRemoval": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removal,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDelegateStakeRemovalRequest,
                GetDelegateStakeRemovalResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousTopicWeight": grpclib.const.Handler(
                self.__rpc_get_previous_topic_weight,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousTopicWeightRequest,
                GetPreviousTopicWeightResponse,
            ),
            "/emissions.v6.QueryService/GetTotalSumPreviousTopicWeights": grpclib.const.Handler(
                self.__rpc_get_total_sum_previous_topic_weights,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTotalSumPreviousTopicWeightsRequest,
                GetTotalSumPreviousTopicWeightsResponse,
            ),
            "/emissions.v6.QueryService/TopicExists": grpclib.const.Handler(
                self.__rpc_topic_exists,
                grpclib.const.Cardinality.UNARY_UNARY,
                TopicExistsRequest,
                TopicExistsResponse,
            ),
            "/emissions.v6.QueryService/IsTopicActive": grpclib.const.Handler(
                self.__rpc_is_topic_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsTopicActiveRequest,
                IsTopicActiveResponse,
            ),
            "/emissions.v6.QueryService/GetTopicFeeRevenue": grpclib.const.Handler(
                self.__rpc_get_topic_fee_revenue,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTopicFeeRevenueRequest,
                GetTopicFeeRevenueResponse,
            ),
            "/emissions.v6.QueryService/GetInfererScoreEma": grpclib.const.Handler(
                self.__rpc_get_inferer_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetInfererScoreEmaRequest,
                GetInfererScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetForecasterScoreEma": grpclib.const.Handler(
                self.__rpc_get_forecaster_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetForecasterScoreEmaRequest,
                GetForecasterScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetReputerScoreEma": grpclib.const.Handler(
                self.__rpc_get_reputer_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReputerScoreEmaRequest,
                GetReputerScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetInferenceScoresUntilBlock": grpclib.const.Handler(
                self.__rpc_get_inference_scores_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetInferenceScoresUntilBlockRequest,
                GetInferenceScoresUntilBlockResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousTopicQuantileForecasterScoreEma": grpclib.const.Handler(
                self.__rpc_get_previous_topic_quantile_forecaster_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousTopicQuantileForecasterScoreEmaRequest,
                GetPreviousTopicQuantileForecasterScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousTopicQuantileInfererScoreEma": grpclib.const.Handler(
                self.__rpc_get_previous_topic_quantile_inferer_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousTopicQuantileInfererScoreEmaRequest,
                GetPreviousTopicQuantileInfererScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousTopicQuantileReputerScoreEma": grpclib.const.Handler(
                self.__rpc_get_previous_topic_quantile_reputer_score_ema,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousTopicQuantileReputerScoreEmaRequest,
                GetPreviousTopicQuantileReputerScoreEmaResponse,
            ),
            "/emissions.v6.QueryService/GetWorkerInferenceScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_worker_inference_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetWorkerInferenceScoresAtBlockRequest,
                GetWorkerInferenceScoresAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetCurrentLowestInfererScore": grpclib.const.Handler(
                self.__rpc_get_current_lowest_inferer_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCurrentLowestInfererScoreRequest,
                GetCurrentLowestInfererScoreResponse,
            ),
            "/emissions.v6.QueryService/GetForecastScoresUntilBlock": grpclib.const.Handler(
                self.__rpc_get_forecast_scores_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetForecastScoresUntilBlockRequest,
                GetForecastScoresUntilBlockResponse,
            ),
            "/emissions.v6.QueryService/GetWorkerForecastScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_worker_forecast_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetWorkerForecastScoresAtBlockRequest,
                GetWorkerForecastScoresAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetCurrentLowestForecasterScore": grpclib.const.Handler(
                self.__rpc_get_current_lowest_forecaster_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCurrentLowestForecasterScoreRequest,
                GetCurrentLowestForecasterScoreResponse,
            ),
            "/emissions.v6.QueryService/GetReputersScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_reputers_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetReputersScoresAtBlockRequest,
                GetReputersScoresAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetCurrentLowestReputerScore": grpclib.const.Handler(
                self.__rpc_get_current_lowest_reputer_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCurrentLowestReputerScoreRequest,
                GetCurrentLowestReputerScoreResponse,
            ),
            "/emissions.v6.QueryService/GetListeningCoefficient": grpclib.const.Handler(
                self.__rpc_get_listening_coefficient,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetListeningCoefficientRequest,
                GetListeningCoefficientResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousReputerRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_reputer_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousReputerRewardFractionRequest,
                GetPreviousReputerRewardFractionResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousInferenceRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_inference_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousInferenceRewardFractionRequest,
                GetPreviousInferenceRewardFractionResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousForecastRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_forecast_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousForecastRewardFractionRequest,
                GetPreviousForecastRewardFractionResponse,
            ),
            "/emissions.v6.QueryService/GetPreviousPercentageRewardToStakedReputers": grpclib.const.Handler(
                self.__rpc_get_previous_percentage_reward_to_staked_reputers,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPreviousPercentageRewardToStakedReputersRequest,
                GetPreviousPercentageRewardToStakedReputersResponse,
            ),
            "/emissions.v6.QueryService/GetTotalRewardToDistribute": grpclib.const.Handler(
                self.__rpc_get_total_reward_to_distribute,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTotalRewardToDistributeRequest,
                GetTotalRewardToDistributeResponse,
            ),
            "/emissions.v6.QueryService/GetNaiveInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_naive_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNaiveInfererNetworkRegretRequest,
                GetNaiveInfererNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetOneOutInfererInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_inferer_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOneOutInfererInfererNetworkRegretRequest,
                GetOneOutInfererInfererNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetOneOutInfererForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_inferer_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOneOutInfererForecasterNetworkRegretRequest,
                GetOneOutInfererForecasterNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetOneOutForecasterInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_forecaster_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOneOutForecasterInfererNetworkRegretRequest,
                GetOneOutForecasterInfererNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetOneOutForecasterForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_forecaster_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOneOutForecasterForecasterNetworkRegretRequest,
                GetOneOutForecasterForecasterNetworkRegretResponse,
            ),
            "/emissions.v6.QueryService/GetActiveTopicsAtBlock": grpclib.const.Handler(
                self.__rpc_get_active_topics_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetActiveTopicsAtBlockRequest,
                GetActiveTopicsAtBlockResponse,
            ),
            "/emissions.v6.QueryService/GetNextChurningBlockByTopicId": grpclib.const.Handler(
                self.__rpc_get_next_churning_block_by_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNextChurningBlockByTopicIdRequest,
                GetNextChurningBlockByTopicIdResponse,
            ),
            "/emissions.v6.QueryService/GetCountInfererInclusionsInTopic": grpclib.const.Handler(
                self.__rpc_get_count_inferer_inclusions_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCountInfererInclusionsInTopicRequest,
                GetCountInfererInclusionsInTopicResponse,
            ),
            "/emissions.v6.QueryService/GetCountForecasterInclusionsInTopic": grpclib.const.Handler(
                self.__rpc_get_count_forecaster_inclusions_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCountForecasterInclusionsInTopicRequest,
                GetCountForecasterInclusionsInTopicResponse,
            ),
            "/emissions.v6.QueryService/GetActiveReputersForTopic": grpclib.const.Handler(
                self.__rpc_get_active_reputers_for_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetActiveReputersForTopicRequest,
                GetActiveReputersForTopicResponse,
            ),
            "/emissions.v6.QueryService/GetActiveForecastersForTopic": grpclib.const.Handler(
                self.__rpc_get_active_forecasters_for_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetActiveForecastersForTopicRequest,
                GetActiveForecastersForTopicResponse,
            ),
            "/emissions.v6.QueryService/GetActiveInferersForTopic": grpclib.const.Handler(
                self.__rpc_get_active_inferers_for_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetActiveInferersForTopicRequest,
                GetActiveInferersForTopicResponse,
            ),
            "/emissions.v6.QueryService/IsTopicWorkerWhitelistEnabled": grpclib.const.Handler(
                self.__rpc_is_topic_worker_whitelist_enabled,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsTopicWorkerWhitelistEnabledRequest,
                IsTopicWorkerWhitelistEnabledResponse,
            ),
            "/emissions.v6.QueryService/IsTopicReputerWhitelistEnabled": grpclib.const.Handler(
                self.__rpc_is_topic_reputer_whitelist_enabled,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsTopicReputerWhitelistEnabledRequest,
                IsTopicReputerWhitelistEnabledResponse,
            ),
            "/emissions.v6.QueryService/IsWhitelistedTopicCreator": grpclib.const.Handler(
                self.__rpc_is_whitelisted_topic_creator,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWhitelistedTopicCreatorRequest,
                IsWhitelistedTopicCreatorResponse,
            ),
            "/emissions.v6.QueryService/IsWhitelistedGlobalActor": grpclib.const.Handler(
                self.__rpc_is_whitelisted_global_actor,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWhitelistedGlobalActorRequest,
                IsWhitelistedGlobalActorResponse,
            ),
            "/emissions.v6.QueryService/IsWhitelistedTopicWorker": grpclib.const.Handler(
                self.__rpc_is_whitelisted_topic_worker,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWhitelistedTopicWorkerRequest,
                IsWhitelistedTopicWorkerResponse,
            ),
            "/emissions.v6.QueryService/IsWhitelistedTopicReputer": grpclib.const.Handler(
                self.__rpc_is_whitelisted_topic_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                IsWhitelistedTopicReputerRequest,
                IsWhitelistedTopicReputerResponse,
            ),
            "/emissions.v6.QueryService/CanUpdateGlobalWhitelists": grpclib.const.Handler(
                self.__rpc_can_update_global_whitelists,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanUpdateGlobalWhitelistsRequest,
                CanUpdateGlobalWhitelistsResponse,
            ),
            "/emissions.v6.QueryService/CanUpdateParams": grpclib.const.Handler(
                self.__rpc_can_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanUpdateParamsRequest,
                CanUpdateParamsResponse,
            ),
            "/emissions.v6.QueryService/CanUpdateTopicWhitelist": grpclib.const.Handler(
                self.__rpc_can_update_topic_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanUpdateTopicWhitelistRequest,
                CanUpdateTopicWhitelistResponse,
            ),
            "/emissions.v6.QueryService/CanCreateTopic": grpclib.const.Handler(
                self.__rpc_can_create_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanCreateTopicRequest,
                CanCreateTopicResponse,
            ),
            "/emissions.v6.QueryService/CanSubmitWorkerPayload": grpclib.const.Handler(
                self.__rpc_can_submit_worker_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanSubmitWorkerPayloadRequest,
                CanSubmitWorkerPayloadResponse,
            ),
            "/emissions.v6.QueryService/CanSubmitReputerPayload": grpclib.const.Handler(
                self.__rpc_can_submit_reputer_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                CanSubmitReputerPayloadRequest,
                CanSubmitReputerPayloadResponse,
            ),
        }
