# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: emissions/v2/events.proto, emissions/v2/genesis.proto, emissions/v2/inference.proto, emissions/v2/node.proto, emissions/v2/nonce.proto, emissions/v2/params.proto, emissions/v2/query.proto, emissions/v2/reputer.proto, emissions/v2/score.proto, emissions/v2/stake.proto, emissions/v2/topic.proto, emissions/v2/tx.proto, emissions/v2/types.proto, emissions/v2/worker.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ActorType(betterproto.Enum):
    INFERER = 0
    FORECASTER = 1
    REPUTER = 2


@dataclass(eq=False, repr=False)
class Nonce(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class Nonces(betterproto.Message):
    nonces: List["Nonce"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReputerRequestNonce(betterproto.Message):
    reputer_nonce: "Nonce" = betterproto.message_field(1)
    """
    the reputers should respond to the reputer request with losses for work
     found at this worker nonce
    """


@dataclass(eq=False, repr=False)
class ReputerRequestNonces(betterproto.Message):
    nonces: List["ReputerRequestNonce"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WorkerAttributedValue(betterproto.Message):
    worker: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WithheldWorkerAttributedValue(betterproto.Message):
    worker: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class OneOutInfererForecasterValues(betterproto.Message):
    forecaster: str = betterproto.string_field(3)
    one_out_inferer_values: List["WithheldWorkerAttributedValue"] = (
        betterproto.message_field(4)
    )


@dataclass(eq=False, repr=False)
class ValueBundle(betterproto.Message):
    """
    These losses and inferences are calculated per reputer or by the network
     The `m`s in the comments below exist for when they're made by reputers,
     but they may be absent implying that they were made by the network
    """

    topic_id: int = betterproto.uint64_field(1)
    reputer_request_nonce: "ReputerRequestNonce" = betterproto.message_field(2)
    reputer: str = betterproto.string_field(3)
    extra_data: bytes = betterproto.bytes_field(4)
    combined_value: str = betterproto.string_field(5)
    """R_im || log10 L_im || I_i"""

    inferer_values: List["WorkerAttributedValue"] = betterproto.message_field(6)
    """R_ijm || log10 L_ijm || I_ij"""

    forecaster_values: List["WorkerAttributedValue"] = betterproto.message_field(7)
    """R_ikm || log10 L_ikm || I_ik"""

    naive_value: str = betterproto.string_field(8)
    """R^-_im  || log10 L^-_im || I^-_i"""

    one_out_inferer_values: List["WithheldWorkerAttributedValue"] = (
        betterproto.message_field(9)
    )
    """
    Note: forecast-implied inferences are recomputed for each left-out
     inference
    """

    one_out_forecaster_values: List["WithheldWorkerAttributedValue"] = (
        betterproto.message_field(10)
    )
    """R^-_ilm || log10 L^-_ilm || I^-_il where l = any k"""

    one_in_forecaster_values: List["WorkerAttributedValue"] = betterproto.message_field(
        11
    )
    """
    R^+_ikm || log10 L^+_ikm || I^+_ik
     aka one_in_forecaster_values because equivalent to using only one
     forecast-implied inference
    """

    one_out_inferer_forecaster_values: List["OneOutInfererForecasterValues"] = (
        betterproto.message_field(12)
    )
    """
    R^-_ilm || log10 L^-_ilm || I^-_il where l = any j
     log10 L^-_j'ikm || I^-_j'ik
    """


@dataclass(eq=False, repr=False)
class ReputerValueBundle(betterproto.Message):
    """
    For when the bundle is computed on a per-reputer basis (ie.. if there is an
     index `m` in the above)
    """

    value_bundle: "ValueBundle" = betterproto.message_field(1)
    signature: bytes = betterproto.bytes_field(2)
    pubkey: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ReputerValueBundles(betterproto.Message):
    reputer_value_bundles: List["ReputerValueBundle"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SimpleCursorPaginationRequest(betterproto.Message):
    key: bytes = betterproto.bytes_field(1)
    limit: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class SimpleCursorPaginationResponse(betterproto.Message):
    next_key: bytes = betterproto.bytes_field(1)


@dataclass(eq=False, repr=False)
class ListeningCoefficient(betterproto.Message):
    coefficient: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TimestampedValue(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Inference(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    inferer: str = betterproto.string_field(3)
    value: str = betterproto.string_field(4)
    extra_data: bytes = betterproto.bytes_field(5)
    proof: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class Inferences(betterproto.Message):
    inferences: List["Inference"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ForecastElement(betterproto.Message):
    inferer: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Forecast(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    forecaster: str = betterproto.string_field(3)
    forecast_elements: List["ForecastElement"] = betterproto.message_field(4)
    extra_data: bytes = betterproto.bytes_field(5)


@dataclass(eq=False, repr=False)
class Forecasts(betterproto.Message):
    forecasts: List["Forecast"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InferenceForecastBundle(betterproto.Message):
    inference: "Inference" = betterproto.message_field(1)
    forecast: "Forecast" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WorkerDataBundle(betterproto.Message):
    worker: str = betterproto.string_field(1)
    nonce: "Nonce" = betterproto.message_field(2)
    topic_id: int = betterproto.uint64_field(3)
    inference_forecasts_bundle: "InferenceForecastBundle" = betterproto.message_field(4)
    inferences_forecasts_bundle_signature: bytes = betterproto.bytes_field(5)
    pubkey: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WorkerDataBundles(betterproto.Message):
    worker_data_bundles: List["WorkerDataBundle"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OptionalParams(betterproto.Message):
    """
    Because gocosmos, grpc-gateway, and go-pulsar do not support optional fields
     and including google themselves
     https://cloud.google.com/apis/design/design_patterns.md#optional_primitive_fields
     we instead use a repeated field with a single element to represent an
     optional field and if the repeated field is empty, it is considered to be the
     same as if the field was not set
    """

    version: List[str] = betterproto.string_field(1)
    max_serialized_msg_length: List[int] = betterproto.int64_field(2)
    min_topic_weight: List[str] = betterproto.string_field(3)
    max_topics_per_block: List[int] = betterproto.uint64_field(4)
    required_minimum_stake: List[str] = betterproto.string_field(5)
    remove_stake_delay_window: List[int] = betterproto.int64_field(6)
    min_epoch_length: List[int] = betterproto.int64_field(7)
    beta_entropy: List[str] = betterproto.string_field(8)
    learning_rate: List[str] = betterproto.string_field(9)
    max_gradient_threshold: List[str] = betterproto.string_field(10)
    min_stake_fraction: List[str] = betterproto.string_field(11)
    max_unfulfilled_worker_requests: List[int] = betterproto.uint64_field(13)
    max_unfulfilled_reputer_requests: List[int] = betterproto.uint64_field(14)
    topic_reward_stake_importance: List[str] = betterproto.string_field(15)
    topic_reward_fee_revenue_importance: List[str] = betterproto.string_field(16)
    topic_reward_alpha: List[str] = betterproto.string_field(17)
    task_reward_alpha: List[str] = betterproto.string_field(18)
    validators_vs_allora_percent_reward: List[str] = betterproto.string_field(19)
    max_samples_to_scale_scores: List[int] = betterproto.uint64_field(20)
    max_top_inferers_to_reward: List[int] = betterproto.uint64_field(21)
    max_top_forecasters_to_reward: List[int] = betterproto.uint64_field(22)
    max_top_reputers_to_reward: List[int] = betterproto.uint64_field(23)
    create_topic_fee: List[str] = betterproto.string_field(24)
    gradient_descent_max_iters: List[int] = betterproto.uint64_field(25)
    max_retries_to_fulfil_nonces_worker: List[int] = betterproto.int64_field(26)
    max_retries_to_fulfil_nonces_reputer: List[int] = betterproto.int64_field(27)
    registration_fee: List[str] = betterproto.string_field(28)
    default_page_limit: List[int] = betterproto.uint64_field(29)
    max_page_limit: List[int] = betterproto.uint64_field(30)
    min_epoch_length_record_limit: List[int] = betterproto.int64_field(31)
    blocks_per_month: List[int] = betterproto.uint64_field(32)
    p_reward_inference: List[str] = betterproto.string_field(33)
    p_reward_forecast: List[str] = betterproto.string_field(34)
    p_reward_reputer: List[str] = betterproto.string_field(35)
    c_reward_inference: List[str] = betterproto.string_field(36)
    c_reward_forecast: List[str] = betterproto.string_field(37)
    c_norm: List[str] = betterproto.string_field(38)
    topic_fee_revenue_decay_rate: List[str] = betterproto.string_field(39)
    epsilon_reputer: List[str] = betterproto.string_field(40)
    min_effective_topic_revenue: List[str] = betterproto.string_field(41)
    half_max_process_stake_removals_end_block: List[int] = betterproto.uint64_field(42)
    data_sending_fee: List[str] = betterproto.string_field(43)
    epsilon_safe_div: List[str] = betterproto.string_field(44)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    sender: str = betterproto.string_field(1)
    params: "OptionalParams" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCreateNewTopic(betterproto.Message):
    creator: str = betterproto.string_field(1)
    """creator is the message sender."""

    metadata: str = betterproto.string_field(2)
    loss_method: str = betterproto.string_field(4)
    epoch_length: int = betterproto.int64_field(7)
    ground_truth_lag: int = betterproto.int64_field(8)
    p_norm: str = betterproto.string_field(10)
    alpha_regret: str = betterproto.string_field(11)
    allow_negative: bool = betterproto.bool_field(12)
    epsilon: str = betterproto.string_field(13)
    worker_submission_window: int = betterproto.int64_field(14)


@dataclass(eq=False, repr=False)
class MsgCreateNewTopicResponse(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class MsgInsertReputerPayload(betterproto.Message):
    sender: str = betterproto.string_field(1)
    reputer_value_bundle: "ReputerValueBundle" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgInsertReputerPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgInsertWorkerPayload(betterproto.Message):
    sender: str = betterproto.string_field(1)
    worker_data_bundle: "WorkerDataBundle" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgInsertWorkerPayloadResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRegister(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(4)
    owner: str = betterproto.string_field(5)
    is_reputer: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class MsgRegisterResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgRemoveRegistration(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    is_reputer: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class MsgRemoveRegistrationResponse(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    message: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgAddStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgAddStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRemoveStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgRemoveStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCancelRemoveStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDelegateStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRemoveDelegateStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    reputer: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgRemoveDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCancelRemoveDelegateStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MsgCancelRemoveDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgFundTopic(betterproto.Message):
    """
    Inferences are requested by consumers who fund topics by sending ALLO to
     ecosystem account via TopicFund messages
    """

    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class MsgFundTopicResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgAddToWhitelistAdmin(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgAddToWhitelistAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRemoveFromWhitelistAdmin(betterproto.Message):
    sender: str = betterproto.string_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MsgRemoveFromWhitelistAdminResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRewardDelegateStakeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgRewardDelegateStake(betterproto.Message):
    sender: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class EventScoresSet(betterproto.Message):
    actor_type: "ActorType" = betterproto.enum_field(1)
    topic_id: int = betterproto.uint64_field(2)
    block_height: int = betterproto.int64_field(3)
    addresses: List[str] = betterproto.string_field(4)
    scores: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class EventRewardsSettled(betterproto.Message):
    actor_type: "ActorType" = betterproto.enum_field(1)
    topic_id: int = betterproto.uint64_field(2)
    block_height: int = betterproto.int64_field(3)
    addresses: List[str] = betterproto.string_field(4)
    rewards: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class EventNetworkLossSet(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    value_bundle: "ValueBundle" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class StakePlacement(betterproto.Message):
    """
    Bad naming convention, only used in StakeRemovals
     DEPRECATED in ConsensusVersion = 2
     TO BE DELETED in ConsensusVersion = 3
    """

    block_removal_started: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class DelegateStakePlacement(betterproto.Message):
    """
    Bad naming convention, only used in StakeRemovals
     DEPRECATED in ConsensusVersion = 2
     TO BE DELETED in ConsensusVersion = 3
    """

    block_removal_started: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    delegator: str = betterproto.string_field(4)
    amount: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class StakeInfo(betterproto.Message):
    """Introduced in ConsensusVersion = 2"""

    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)
    amount: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class StakeRemovalInfo(betterproto.Message):
    """Introduced in ConsensusVersion = 2"""

    block_removal_started: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    amount: str = betterproto.string_field(4)
    block_removal_completed: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class DelegateStakeRemovalInfo(betterproto.Message):
    """Introduced in ConsensusVersion = 2"""

    block_removal_started: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    delegator: str = betterproto.string_field(4)
    amount: str = betterproto.string_field(5)
    block_removal_completed: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class DelegatorInfo(betterproto.Message):
    amount: str = betterproto.string_field(1)
    reward_debt: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class OffchainNode(betterproto.Message):
    owner: str = betterproto.string_field(3)
    node_address: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class Topic(betterproto.Message):
    id: int = betterproto.uint64_field(1)
    creator: str = betterproto.string_field(2)
    metadata: str = betterproto.string_field(3)
    loss_method: str = betterproto.string_field(5)
    epoch_last_ended: int = betterproto.int64_field(8)
    epoch_length: int = betterproto.int64_field(9)
    ground_truth_lag: int = betterproto.int64_field(10)
    p_norm: str = betterproto.string_field(12)
    alpha_regret: str = betterproto.string_field(13)
    allow_negative: bool = betterproto.bool_field(14)
    epsilon: str = betterproto.string_field(15)
    initial_regret: str = betterproto.string_field(16)
    worker_submission_window: int = betterproto.int64_field(17)


@dataclass(eq=False, repr=False)
class TopicList(betterproto.Message):
    topics: List["Topic"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TimestampedActorNonce(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    nonce: "Nonce" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIds(betterproto.Message):
    topic_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class RegretInformedWeight(betterproto.Message):
    worker: str = betterproto.string_field(1)
    weight: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters of the module."""

    version: str = betterproto.string_field(1)
    max_serialized_msg_length: int = betterproto.int64_field(2)
    """github release tag version"""

    min_topic_weight: str = betterproto.string_field(3)
    max_topics_per_block: int = betterproto.uint64_field(4)
    """solicatation or weight-adjustment"""

    required_minimum_stake: str = betterproto.string_field(5)
    remove_stake_delay_window: int = betterproto.int64_field(6)
    min_epoch_length: int = betterproto.int64_field(7)
    beta_entropy: str = betterproto.string_field(8)
    """repeating inference request"""

    learning_rate: str = betterproto.string_field(9)
    max_gradient_threshold: str = betterproto.string_field(10)
    min_stake_fraction: str = betterproto.string_field(11)
    max_unfulfilled_worker_requests: int = betterproto.uint64_field(13)
    """coefficients"""

    max_unfulfilled_reputer_requests: int = betterproto.uint64_field(14)
    topic_reward_stake_importance: str = betterproto.string_field(15)
    topic_reward_fee_revenue_importance: str = betterproto.string_field(16)
    """topic and has a fiducial value of 0.5"""

    topic_reward_alpha: str = betterproto.string_field(17)
    """a topic and has a fiducial value of 0.5"""

    task_reward_alpha: str = betterproto.string_field(18)
    """a monthly timescale, 0.5 for weekly updates"""

    validators_vs_allora_percent_reward: str = betterproto.string_field(19)
    """to calculate ~U_ij, ~V_ik, ~W_im"""

    max_samples_to_scale_scores: int = betterproto.uint64_field(20)
    """to allora reputers workers etc"""

    max_top_inferers_to_reward: int = betterproto.uint64_field(21)
    max_top_forecasters_to_reward: int = betterproto.uint64_field(22)
    max_top_reputers_to_reward: int = betterproto.uint64_field(23)
    create_topic_fee: str = betterproto.string_field(24)
    gradient_descent_max_iters: int = betterproto.uint64_field(25)
    max_retries_to_fulfil_nonces_worker: int = betterproto.int64_field(26)
    max_retries_to_fulfil_nonces_reputer: int = betterproto.int64_field(27)
    registration_fee: str = betterproto.string_field(28)
    default_page_limit: int = betterproto.uint64_field(29)
    max_page_limit: int = betterproto.uint64_field(30)
    min_epoch_length_record_limit: int = betterproto.int64_field(31)
    """
    min number of epochs to keep network losses, reputer losses, inferences,
     forecasts
    """

    blocks_per_month: int = betterproto.uint64_field(32)
    """block emission rate in number of blocks expected per month"""

    p_reward_inference: str = betterproto.string_field(33)
    p_reward_forecast: str = betterproto.string_field(34)
    p_reward_reputer: str = betterproto.string_field(35)
    c_reward_inference: str = betterproto.string_field(36)
    c_reward_forecast: str = betterproto.string_field(37)
    c_norm: str = betterproto.string_field(38)
    topic_fee_revenue_decay_rate: str = betterproto.string_field(39)
    epsilon_reputer: str = betterproto.string_field(40)
    min_effective_topic_revenue: str = betterproto.string_field(41)
    """close proximities"""

    half_max_process_stake_removals_end_block: int = betterproto.uint64_field(42)
    """effective revenue is below this"""

    epsilon_safe_div: str = betterproto.string_field(43)
    """
    Applied twice once for stakeRemovals and once for
     DelegateStakeRemovals, so actual max is this number times two
    """

    data_sending_fee: str = betterproto.string_field(44)
    """/ a small tolerance quantity used to cap division by zero"""


@dataclass(eq=False, repr=False)
class Score(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    address: str = betterproto.string_field(3)
    score: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class Scores(betterproto.Message):
    scores: List["Score"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryNaiveInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    inferer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryNaiveInfererNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_inferer: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererInfererNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_inferer: str = betterproto.string_field(2)
    forecaster: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOneOutInfererForecasterNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_forecaster: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterInfererNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    one_out_forecaster: str = betterproto.string_field(2)
    forecaster: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOneOutForecasterForecasterNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryTotalStakeRequest(betterproto.Message):
    """Total Stake returns the total amount of stake in the system"""

    pass


@dataclass(eq=False, repr=False)
class QueryTotalStakeResponse(betterproto.Message):
    """
    Total Stake returns the total amount of stake in the system

     NOTE: The amount field is an Int which implements the custom method
     signatures required by gogoproto.
    """

    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryReputerStakeInTopicRequest(betterproto.Message):
    address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryReputerStakeInTopicResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryMultiReputerStakeInTopicRequest(betterproto.Message):
    addresses: List[str] = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryMultiReputerStakeInTopicResponse(betterproto.Message):
    amounts: List["StakeInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeFromReputerInTopicInSelfRequest(betterproto.Message):
    reputer_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryStakeFromReputerInTopicInSelfResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeInTopicInReputerRequest(betterproto.Message):
    reputer_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeInTopicInReputerResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicInReputerRequest(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    reputer_address: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicInReputerResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicRequest(betterproto.Message):
    delegator_address: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryStakeFromDelegatorInTopicResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicStakeRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicStakeResponse(betterproto.Message):
    amount: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryNetworkLossBundleAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryNetworkLossBundleAtBlockResponse(betterproto.Message):
    loss_bundle: "ValueBundle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryNextTopicIdRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryNextTopicIdResponse(betterproto.Message):
    next_topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicResponse(betterproto.Message):
    topic: "Topic" = betterproto.message_field(1)
    weight: str = betterproto.string_field(2)
    effective_revenue: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsRequest(betterproto.Message):
    pagination: "SimpleCursorPaginationRequest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryActiveTopicsResponse(betterproto.Message):
    topics: List["Topic"] = betterproto.message_field(1)
    pagination: "SimpleCursorPaginationResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryInferencesAtBlockRequest(betterproto.Message):
    """Returns the inferences on a topic posted at a block height"""

    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryInferencesAtBlockResponse(betterproto.Message):
    """
    Returns the inferences on a topic posted at a block height

     NOTE: The amount field is a Uint which implements the custom method
     signatures required by gogoproto.
    """

    inferences: "Inferences" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestTopicInferencesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestTopicInferencesResponse(betterproto.Message):
    inferences: "Inferences" = betterproto.message_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryForecastsAtBlockRequest(betterproto.Message):
    """Returns the forecasts on a topic posted at a block height"""

    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryForecastsAtBlockResponse(betterproto.Message):
    """
    Returns the forecasts on a topic posted at a block height

     NOTE: The amount field is a Uint which implements the custom method
     signatures required by gogoproto.
    """

    forecasts: "Forecasts" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryWorkerLatestInferenceRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryWorkerLatestInferenceResponse(betterproto.Message):
    latest_inference: "Inference" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryWorkerNodeInfoRequest(betterproto.Message):
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryWorkerNodeInfoResponse(betterproto.Message):
    node_info: "OffchainNode" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryReputerNodeInfoRequest(betterproto.Message):
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryReputerNodeInfoResponse(betterproto.Message):
    node_info: "OffchainNode" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryNetworkInferencesAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height_last_inference: int = betterproto.int64_field(2)
    block_height_last_reward: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class QueryLatestNetworkInferencesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryIsWorkerNonceUnfulfilledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryIsWorkerNonceUnfulfilledResponse(betterproto.Message):
    is_worker_nonce_unfulfilled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledReputerNoncesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledReputerNoncesResponse(betterproto.Message):
    nonces: "ReputerRequestNonces" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledWorkerNoncesRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryUnfulfilledWorkerNoncesResponse(betterproto.Message):
    nonces: "Nonces" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryInfererNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryInfererNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryForecasterNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryOneInForecasterNetworkRegretRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    forecaster: str = betterproto.string_field(2)
    inferer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryOneInForecasterNetworkRegretResponse(betterproto.Message):
    regret: "TimestampedValue" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryIsReputerNonceUnfulfilledRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryIsReputerNonceUnfulfilledResponse(betterproto.Message):
    is_reputer_nonce_unfulfilled: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryNetworkInferencesAtBlockResponse(betterproto.Message):
    network_inferences: "ValueBundle" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestNetworkInferencesResponse(betterproto.Message):
    network_inferences: "ValueBundle" = betterproto.message_field(1)
    inferer_weights: List["RegretInformedWeight"] = betterproto.message_field(2)
    forecaster_weights: List["RegretInformedWeight"] = betterproto.message_field(3)
    forecast_implied_inferences: List["WorkerAttributedValue"] = (
        betterproto.message_field(4)
    )
    inference_block_height: int = betterproto.int64_field(5)
    loss_block_height: int = betterproto.int64_field(6)
    confidence_interval_raw_percentiles: List[str] = betterproto.string_field(7)
    confidence_interval_values: List[str] = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class QueryIsWorkerRegisteredInTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryIsWorkerRegisteredInTopicIdResponse(betterproto.Message):
    is_registered: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryIsReputerRegisteredInTopicIdRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryIsReputerRegisteredInTopicIdResponse(betterproto.Message):
    is_registered: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryIsWhitelistAdminRequest(betterproto.Message):
    address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryIsWhitelistAdminResponse(betterproto.Message):
    is_admin: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalsUpUntilBlockRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalsUpUntilBlockResponse(betterproto.Message):
    removals: List["StakeRemovalInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalsUpUntilBlockRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalsUpUntilBlockResponse(betterproto.Message):
    removals: List["DelegateStakeRemovalInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalInfoResponse(betterproto.Message):
    removal: "StakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalInfoRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    reputer: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalInfoResponse(betterproto.Message):
    removal: "DelegateStakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicLastCommitRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicLastCommitResponse(betterproto.Message):
    last_commit: "TimestampedActorNonce" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicRewardNonceRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicRewardNonceResponse(betterproto.Message):
    nonce: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class QueryReputerLossBundlesAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryReputerLossBundlesAtBlockResponse(betterproto.Message):
    loss_bundles: "ReputerValueBundles" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeReputerAuthorityRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryStakeReputerAuthorityResponse(betterproto.Message):
    authority: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakePlacementRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    target: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class QueryDelegateStakePlacementResponse(betterproto.Message):
    delegator_info: "DelegatorInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeUponReputerRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    target: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeUponReputerResponse(betterproto.Message):
    stake: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateRewardPerShareRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryDelegateRewardPerShareResponse(betterproto.Message):
    reward_per_share: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalForReputerAndTopicIdRequest(betterproto.Message):
    reputer: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)


@dataclass(eq=False, repr=False)
class QueryStakeRemovalForReputerAndTopicIdResponse(betterproto.Message):
    stake_removal_info: "StakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalRequest(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class QueryDelegateStakeRemovalResponse(betterproto.Message):
    stake_removal_info: "DelegateStakeRemovalInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPreviousTopicWeightRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryPreviousTopicWeightResponse(betterproto.Message):
    weight: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QueryTopicExistsRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicExistsResponse(betterproto.Message):
    exists: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryIsTopicActiveRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryIsTopicActiveResponse(betterproto.Message):
    is_active: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicFeeRevenueRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryTopicFeeRevenueResponse(betterproto.Message):
    fee_revenue: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryRewardableTopicsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryRewardableTopicsResponse(betterproto.Message):
    rewardable_topic_ids: List[int] = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestInfererScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    inferer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryLatestInfererScoreResponse(betterproto.Message):
    score: "Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestForecasterScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    forecaster: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryLatestForecasterScoreResponse(betterproto.Message):
    score: "Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryLatestReputerScoreRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryLatestReputerScoreResponse(betterproto.Message):
    score: "Score" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryInferenceScoresUntilBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryInferenceScoresUntilBlockResponse(betterproto.Message):
    scores: List["Score"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryWorkerInferenceScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryWorkerInferenceScoresAtBlockResponse(betterproto.Message):
    scores: "Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryForecastScoresUntilBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryForecastScoresUntilBlockResponse(betterproto.Message):
    scores: List["Score"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryWorkerForecastScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryWorkerForecastScoresAtBlockResponse(betterproto.Message):
    scores: "Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryReputersScoresAtBlockRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class QueryReputersScoresAtBlockResponse(betterproto.Message):
    scores: "Scores" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryListeningCoefficientRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryListeningCoefficientResponse(betterproto.Message):
    listening_coefficient: "ListeningCoefficient" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryPreviousReputerRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousReputerRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousInferenceRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousInferenceRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousForecastRewardFractionRequest(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    worker: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousForecastRewardFractionResponse(betterproto.Message):
    reward_fraction: str = betterproto.string_field(1)
    not_found: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QueryPreviousPercentageRewardToStakedReputersRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryPreviousPercentageRewardToStakedReputersResponse(betterproto.Message):
    percentage_reward: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryTotalRewardToDistributeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class QueryTotalRewardToDistributeResponse(betterproto.Message):
    total_reward: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState is the state that must be provided at genesis."""

    params: "Params" = betterproto.message_field(1)
    """params defines all the parameters of the module."""

    next_topic_id: int = betterproto.uint64_field(3)
    """
    / TOPIC
     the next topic id to be used, equal to the number of topics that have been
     created
    """

    topics: List["TopicIdAndTopic"] = betterproto.message_field(4)
    """
    every topic that has been created indexed by their topicId starting from 1
     (0 is reserved for the root network)
    """

    active_topics: List[int] = betterproto.uint64_field(5)
    rewardable_topics: List[int] = betterproto.uint64_field(6)
    """
    every topic that has been churned and ready to be rewarded i.e. reputer
     losses have been committed
    """

    topic_workers: List["TopicAndActorId"] = betterproto.message_field(7)
    """for a topic, what is every worker node that has registered to it?"""

    topic_reputers: List["TopicAndActorId"] = betterproto.message_field(8)
    """for a topic, what is every reputer node that has registered to it?"""

    topic_reward_nonce: List["TopicIdAndBlockHeight"] = betterproto.message_field(9)
    """map of (topic) -> nonce/block height"""

    inferer_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(10)
    )
    """
    / SCORES
     map of (topic, block_height, worker) -> score
    """

    forecaster_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(11)
    )
    """map of (topic, block_height, worker) -> score"""

    reputer_scores_by_block: List["TopicIdBlockHeightScores"] = (
        betterproto.message_field(12)
    )
    """map of (topic, block_height, reputer) -> score"""

    latest_inferer_scores_by_worker: List["TopicIdActorIdScore"] = (
        betterproto.message_field(13)
    )
    """map of (topic, block_height, worker) -> score"""

    latest_forecaster_scores_by_worker: List["TopicIdActorIdScore"] = (
        betterproto.message_field(14)
    )
    """map of (topic, block_height, worker) -> score"""

    latest_reputer_scores_by_reputer: List["TopicIdActorIdScore"] = (
        betterproto.message_field(15)
    )
    """map of (topic, block_height, reputer) -> score"""

    reputer_listening_coefficient: List["TopicIdActorIdListeningCoefficient"] = (
        betterproto.message_field(16)
    )
    """map of (topic, reputer) -> listening coefficient"""

    previous_reputer_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(17)
    )
    """map of (topic, reputer) -> previous reward (used for EMA)"""

    previous_inference_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(18)
    )
    """
    map of (topic, worker) -> previous reward for inference (used for EMA)
    """

    previous_forecast_reward_fraction: List["TopicIdActorIdDec"] = (
        betterproto.message_field(19)
    )
    """
    map of (topic, worker) -> previous reward for forecast (used for EMA)
    """

    previous_forecaster_score_ratio: List["TopicIdActorIdDec"] = (
        betterproto.message_field(20)
    )
    """map of (topic, forecaster) -> ratio of forecaster score"""

    total_stake: str = betterproto.string_field(21)
    """total sum stake of all stakers on the network"""

    topic_stake: List["TopicIdAndInt"] = betterproto.message_field(22)
    """
    for every topic, how much total stake does that topic have accumulated?
    """

    stake_reputer_authority: List["TopicIdActorIdInt"] = betterproto.message_field(23)
    """
    stake reputer placed in topic + delegate stake placed in them,
     signalling their total authority on the topic
     (topic Id, reputer) -> stake from reputer on self +
     stakeFromDelegatorsUponReputer
    """

    stake_sum_from_delegator: List["TopicIdActorIdInt"] = betterproto.message_field(24)
    """
    map of (topic id, delegator) -> total amount of stake in that topic placed
     by that delegator
    """

    delegated_stakes: List["TopicIdDelegatorReputerDelegatorInfo"] = (
        betterproto.message_field(25)
    )
    """
    map of (topic id, delegator, reputer) -> amount of stake that has been
     placed by that delegator on that target
    """

    stake_from_delegators_upon_reputer: List["TopicIdActorIdInt"] = (
        betterproto.message_field(26)
    )
    """
    map of (topic id, reputer) -> total amount of stake that has been placed on
     that reputer by delegators
    """

    delegate_reward_per_share: List["TopicIdActorIdDec"] = betterproto.message_field(27)
    """map of (topicId, reputer) -> share of delegate reward"""

    stake_removals_by_block: List["BlockHeightTopicIdReputerStakeRemovalInfo"] = (
        betterproto.message_field(28)
    )
    """
    stake removals are double indexed to avoid O(n) lookups when removing stake
     map of (blockHeight, topic, reputer) -> removal information for that
     reputer
    """

    stake_removals_by_actor: List["ActorIdTopicIdBlockHeight"] = (
        betterproto.message_field(29)
    )
    """
    key set of (reputer, topic, blockHeight) to existence of a removal in the
     forwards map
    """

    delegate_stake_removals_by_block: List[
        "BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo"
    ] = betterproto.message_field(30)
    """
    delegate stake removals are double indexed to avoid O(n) lookups when
     removing stake map of (blockHeight, topic, delegator, reputer staked upon)
     -> (list of reputers delegated upon and info) to have stake removed at that
     block
    """

    delegate_stake_removals_by_actor: List["DelegatorReputerTopicIdBlockHeight"] = (
        betterproto.message_field(31)
    )
    """
    key set of (delegator, reputer, topicId, blockHeight) to existence of a
     removal in the forwards map
    """

    inferences: List["TopicIdActorIdInference"] = betterproto.message_field(32)
    """
    / MISC GLOBAL STATE
     map of (topic, worker) -> inference
    """

    forecasts: List["TopicIdActorIdForecast"] = betterproto.message_field(33)
    """map of (topic, worker) -> forecast[]"""

    workers: List["LibP2PKeyAndOffchainNode"] = betterproto.message_field(34)
    """map of worker id to node data about that worker"""

    reputers: List["LibP2PKeyAndOffchainNode"] = betterproto.message_field(35)
    """map of reputer id to node data about that reputer"""

    topic_fee_revenue: List["TopicIdAndInt"] = betterproto.message_field(36)
    """
    fee revenue collected by a topic over the course of the last reward cadence
    """

    previous_topic_weight: List["TopicIdAndDec"] = betterproto.message_field(37)
    """
    store previous weights for exponential moving average in rewards calc
    """

    all_inferences: List["TopicIdBlockHeightInferences"] = betterproto.message_field(38)
    """map of (topic, block_height) -> Inference"""

    all_forecasts: List["TopicIdBlockHeightForecasts"] = betterproto.message_field(39)
    """map of (topic, block_height) -> Forecast"""

    all_loss_bundles: List["TopicIdBlockHeightReputerValueBundles"] = (
        betterproto.message_field(40)
    )
    """
    map of (topic, block_height) -> ReputerValueBundles (1 per reputer active
     at that time)
    """

    network_loss_bundles: List["TopicIdBlockHeightValueBundles"] = (
        betterproto.message_field(41)
    )
    """
    map of (topic, block_height) -> ValueBundle (1 network wide bundle per
     timestep)
    """

    previous_percentage_reward_to_staked_reputers: str = betterproto.string_field(42)
    """
    Percentage of all rewards, paid out to staked reputers, during the previous
     reward cadence. Used by mint module
    """

    unfulfilled_worker_nonces: List["TopicIdAndNonces"] = betterproto.message_field(43)
    """
    / NONCES
     map of (topic) -> unfulfilled nonces
    """

    unfulfilled_reputer_nonces: List["TopicIdAndReputerRequestNonces"] = (
        betterproto.message_field(44)
    )
    """map of (topic) -> unfulfilled nonces"""

    latest_inferer_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(45)
    )
    """
    / REGRETS
     map of (topic, worker) -> regret of worker from comparing loss of worker
     relative to loss of other inferers
    """

    latest_forecaster_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(46)
    )
    """
    map of (topic, worker) -> regret of worker from comparing loss of worker
     relative to loss of other forecasters
    """

    latest_one_in_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(47)
    """
    map of (topic, forecaster, inferer) -> R^+_{ij_kk} regret of forecaster
     loss from comparing one-in loss with all network inferer (3rd index)
     regrets L_ij made under the regime of the one-in forecaster (2nd index)
    """

    latest_naive_inferer_network_regrets: List["TopicIdActorIdTimeStampedValue"] = (
        betterproto.message_field(48)
    )
    """
    the forecaster (2nd index) regrets made under the regime of the same
     forecaster as a one-in forecaster
    """

    latest_one_out_inferer_inferer_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(49)
    latest_one_out_inferer_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(50)
    latest_one_out_forecaster_inferer_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(51)
    latest_one_out_forecaster_forecaster_network_regrets: List[
        "TopicIdActorIdActorIdTimeStampedValue"
    ] = betterproto.message_field(52)
    core_team_addresses: List[str] = betterproto.string_field(2)
    """/ WHITELISTS"""

    topic_last_worker_commit: List["TopicIdTimestampedActorNonce"] = (
        betterproto.message_field(53)
    )
    """/ RECORD COMMITS"""

    topic_last_reputer_commit: List["TopicIdTimestampedActorNonce"] = (
        betterproto.message_field(54)
    )


@dataclass(eq=False, repr=False)
class TopicIdAndTopic(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    topic: "Topic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicAndActorId(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndBlockHeight(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightScores(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    scores: "Scores" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdScore(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    score: "Score" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdListeningCoefficient(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    listening_coefficient: "ListeningCoefficient" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdDec(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    dec: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TopicIdAndInt(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    int: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInt(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    int: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TopicIdDelegatorReputerDelegatorInfo(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    delegator: str = betterproto.string_field(2)
    reputer: str = betterproto.string_field(3)
    delegator_info: "DelegatorInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdReputerStakeRemovalInfo(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    reputer: str = betterproto.string_field(3)
    stake_removal_info: "StakeRemovalInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActorIdTopicIdBlockHeight(betterproto.Message):
    actor_id: str = betterproto.string_field(1)
    topic_id: int = betterproto.uint64_field(2)
    block_height: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BlockHeightTopicIdDelegatorReputerDelegateStakeRemovalInfo(betterproto.Message):
    block_height: int = betterproto.int64_field(1)
    topic_id: int = betterproto.uint64_field(2)
    delegator: str = betterproto.string_field(3)
    reputer: str = betterproto.string_field(4)
    delegate_stake_removal_info: "DelegateStakeRemovalInfo" = betterproto.message_field(
        5
    )


@dataclass(eq=False, repr=False)
class DelegatorReputerTopicIdBlockHeight(betterproto.Message):
    delegator: str = betterproto.string_field(1)
    reputer: str = betterproto.string_field(2)
    topic_id: int = betterproto.uint64_field(3)
    block_height: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class TopicIdActorIdInference(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    inference: "Inference" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdForecast(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    forecast: "Forecast" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LibP2PKeyAndOffchainNode(betterproto.Message):
    lib_p2_p_key: str = betterproto.string_field(1)
    offchain_node: "OffchainNode" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndDec(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    dec: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightInferences(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    inferences: "Inferences" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightForecasts(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    forecasts: "Forecasts" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightReputerValueBundles(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    reputer_value_bundles: "ReputerValueBundles" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdBlockHeightValueBundles(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    block_height: int = betterproto.int64_field(2)
    value_bundle: "ValueBundle" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdAndNonces(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    nonces: "Nonces" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdAndReputerRequestNonces(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    reputer_request_nonces: "ReputerRequestNonces" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TopicIdActorIdTimeStampedValue(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id: str = betterproto.string_field(2)
    timestamped_value: "TimestampedValue" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TopicIdActorIdActorIdTimeStampedValue(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    actor_id1: str = betterproto.string_field(2)
    actor_id2: str = betterproto.string_field(3)
    timestamped_value: "TimestampedValue" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TopicIdTimestampedActorNonce(betterproto.Message):
    topic_id: int = betterproto.uint64_field(1)
    timestamped_actor_nonce: "TimestampedActorNonce" = betterproto.message_field(2)


class MsgStub(betterproto.ServiceStub):
    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_new_topic(
        self,
        msg_create_new_topic: "MsgCreateNewTopic",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateNewTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/CreateNewTopic",
            msg_create_new_topic,
            MsgCreateNewTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def register(
        self,
        msg_register: "MsgRegister",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRegisterResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/Register",
            msg_register,
            MsgRegisterResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_registration(
        self,
        msg_remove_registration: "MsgRemoveRegistration",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRemoveRegistrationResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/RemoveRegistration",
            msg_remove_registration,
            MsgRemoveRegistrationResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_stake(
        self,
        msg_add_stake: "MsgAddStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgAddStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/AddStake",
            msg_add_stake,
            MsgAddStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_stake(
        self,
        msg_remove_stake: "MsgRemoveStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/RemoveStake",
            msg_remove_stake,
            MsgRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_stake(
        self,
        msg_cancel_remove_stake: "MsgCancelRemoveStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelRemoveStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/CancelRemoveStake",
            msg_cancel_remove_stake,
            MsgCancelRemoveStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delegate_stake(
        self,
        msg_delegate_stake: "MsgDelegateStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/DelegateStake",
            msg_delegate_stake,
            MsgDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def reward_delegate_stake(
        self,
        msg_reward_delegate_stake: "MsgRewardDelegateStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRewardDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/RewardDelegateStake",
            msg_reward_delegate_stake,
            MsgRewardDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_delegate_stake(
        self,
        msg_remove_delegate_stake: "MsgRemoveDelegateStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/RemoveDelegateStake",
            msg_remove_delegate_stake,
            MsgRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_remove_delegate_stake(
        self,
        msg_cancel_remove_delegate_stake: "MsgCancelRemoveDelegateStake",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelRemoveDelegateStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/CancelRemoveDelegateStake",
            msg_cancel_remove_delegate_stake,
            MsgCancelRemoveDelegateStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def fund_topic(
        self,
        msg_fund_topic: "MsgFundTopic",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgFundTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/FundTopic",
            msg_fund_topic,
            MsgFundTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_whitelist_admin(
        self,
        msg_add_to_whitelist_admin: "MsgAddToWhitelistAdmin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgAddToWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/AddToWhitelistAdmin",
            msg_add_to_whitelist_admin,
            MsgAddToWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_whitelist_admin(
        self,
        msg_remove_from_whitelist_admin: "MsgRemoveFromWhitelistAdmin",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgRemoveFromWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/RemoveFromWhitelistAdmin",
            msg_remove_from_whitelist_admin,
            MsgRemoveFromWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_worker_payload(
        self,
        msg_insert_worker_payload: "MsgInsertWorkerPayload",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgInsertWorkerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/InsertWorkerPayload",
            msg_insert_worker_payload,
            MsgInsertWorkerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def insert_reputer_payload(
        self,
        msg_insert_reputer_payload: "MsgInsertReputerPayload",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgInsertReputerPayloadResponse":
        return await self._unary_unary(
            "/emissions.v2.Msg/InsertReputerPayload",
            msg_insert_reputer_payload,
            MsgInsertReputerPayloadResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_topic_id(
        self,
        query_next_topic_id_request: "QueryNextTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryNextTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetNextTopicId",
            query_next_topic_id_request,
            QueryNextTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic(
        self,
        query_topic_request: "QueryTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopic",
            query_topic_request,
            QueryTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_active_topics(
        self,
        query_active_topics_request: "QueryActiveTopicsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryActiveTopicsResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetActiveTopics",
            query_active_topics_request,
            QueryActiveTopicsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_latest_inference_by_topic_id(
        self,
        query_worker_latest_inference_request: "QueryWorkerLatestInferenceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWorkerLatestInferenceResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetWorkerLatestInferenceByTopicId",
            query_worker_latest_inference_request,
            QueryWorkerLatestInferenceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferences_at_block(
        self,
        query_inferences_at_block_request: "QueryInferencesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetInferencesAtBlock",
            query_inferences_at_block_request,
            QueryInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_topic_inferences(
        self,
        query_latest_topic_inferences_request: "QueryLatestTopicInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestTopicInferencesResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestTopicInferences",
            query_latest_topic_inferences_request,
            QueryLatestTopicInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecasts_at_block(
        self,
        query_forecasts_at_block_request: "QueryForecastsAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryForecastsAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetForecastsAtBlock",
            query_forecasts_at_block_request,
            QueryForecastsAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_loss_bundle_at_block(
        self,
        query_network_loss_bundle_at_block_request: "QueryNetworkLossBundleAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryNetworkLossBundleAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetNetworkLossBundleAtBlock",
            query_network_loss_bundle_at_block_request,
            QueryNetworkLossBundleAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_stake(
        self,
        query_total_stake_request: "QueryTotalStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTotalStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTotalStake",
            query_total_stake_request,
            QueryTotalStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_stake_in_topic(
        self,
        query_reputer_stake_in_topic_request: "QueryReputerStakeInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetReputerStakeInTopic",
            query_reputer_stake_in_topic_request,
            QueryReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_multi_reputer_stake_in_topic(
        self,
        query_multi_reputer_stake_in_topic_request: "QueryMultiReputerStakeInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryMultiReputerStakeInTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetMultiReputerStakeInTopic",
            query_multi_reputer_stake_in_topic_request,
            QueryMultiReputerStakeInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        query_stake_from_reputer_in_topic_in_self_request: "QueryStakeFromReputerInTopicInSelfRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeFromReputerInTopicInSelfResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeFromReputerInTopicInSelf",
            query_stake_from_reputer_in_topic_in_self_request,
            QueryStakeFromReputerInTopicInSelfResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        query_delegate_stake_in_topic_in_reputer_request: "QueryDelegateStakeInTopicInReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakeInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakeInTopicInReputer",
            query_delegate_stake_in_topic_in_reputer_request,
            QueryDelegateStakeInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        query_stake_from_delegator_in_topic_in_reputer_request: "QueryStakeFromDelegatorInTopicInReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeFromDelegatorInTopicInReputerResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeFromDelegatorInTopicInReputer",
            query_stake_from_delegator_in_topic_in_reputer_request,
            QueryStakeFromDelegatorInTopicInReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_from_delegator_in_topic(
        self,
        query_stake_from_delegator_in_topic_request: "QueryStakeFromDelegatorInTopicRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeFromDelegatorInTopicResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeFromDelegatorInTopic",
            query_stake_from_delegator_in_topic_request,
            QueryStakeFromDelegatorInTopicResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_stake(
        self,
        query_topic_stake_request: "QueryTopicStakeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicStakeResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopicStake",
            query_topic_stake_request,
            QueryTopicStakeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removals_up_until_block(
        self,
        query_stake_removals_up_until_block_request: "QueryStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeRemovalsUpUntilBlock",
            query_stake_removals_up_until_block_request,
            QueryStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removals_up_until_block(
        self,
        query_delegate_stake_removals_up_until_block_request: "QueryDelegateStakeRemovalsUpUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakeRemovalsUpUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakeRemovalsUpUntilBlock",
            query_delegate_stake_removals_up_until_block_request,
            QueryDelegateStakeRemovalsUpUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_info(
        self,
        query_stake_removal_info_request: "QueryStakeRemovalInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeRemovalInfo",
            query_stake_removal_info_request,
            QueryStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal_info(
        self,
        query_delegate_stake_removal_info_request: "QueryDelegateStakeRemovalInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakeRemovalInfoResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakeRemovalInfo",
            query_delegate_stake_removal_info_request,
            QueryDelegateStakeRemovalInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_node_info(
        self,
        query_worker_node_info_request: "QueryWorkerNodeInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWorkerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetWorkerNodeInfo",
            query_worker_node_info_request,
            QueryWorkerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_node_info(
        self,
        query_reputer_node_info_request: "QueryReputerNodeInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReputerNodeInfoResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetReputerNodeInfo",
            query_reputer_node_info_request,
            QueryReputerNodeInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_registered_in_topic_id(
        self,
        query_is_worker_registered_in_topic_id_request: "QueryIsWorkerRegisteredInTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsWorkerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsWorkerRegisteredInTopicId",
            query_is_worker_registered_in_topic_id_request,
            QueryIsWorkerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_registered_in_topic_id(
        self,
        query_is_reputer_registered_in_topic_id_request: "QueryIsReputerRegisteredInTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsReputerRegisteredInTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsReputerRegisteredInTopicId",
            query_is_reputer_registered_in_topic_id_request,
            QueryIsReputerRegisteredInTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_network_inferences_at_block(
        self,
        query_network_inferences_at_block_request: "QueryNetworkInferencesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryNetworkInferencesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetNetworkInferencesAtBlock",
            query_network_inferences_at_block_request,
            QueryNetworkInferencesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_network_inference(
        self,
        query_latest_network_inferences_request: "QueryLatestNetworkInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestNetworkInference",
            query_latest_network_inferences_request,
            QueryLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_available_network_inference(
        self,
        query_latest_network_inferences_request: "QueryLatestNetworkInferencesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestNetworkInferencesResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestAvailableNetworkInference",
            query_latest_network_inferences_request,
            QueryLatestNetworkInferencesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_worker_nonce_unfulfilled(
        self,
        query_is_worker_nonce_unfulfilled_request: "QueryIsWorkerNonceUnfulfilledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsWorkerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsWorkerNonceUnfulfilled",
            query_is_worker_nonce_unfulfilled_request,
            QueryIsWorkerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_reputer_nonce_unfulfilled(
        self,
        query_is_reputer_nonce_unfulfilled_request: "QueryIsReputerNonceUnfulfilledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsReputerNonceUnfulfilledResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsReputerNonceUnfulfilled",
            query_is_reputer_nonce_unfulfilled_request,
            QueryIsReputerNonceUnfulfilledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_worker_nonces(
        self,
        query_unfulfilled_worker_nonces_request: "QueryUnfulfilledWorkerNoncesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUnfulfilledWorkerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetUnfulfilledWorkerNonces",
            query_unfulfilled_worker_nonces_request,
            QueryUnfulfilledWorkerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unfulfilled_reputer_nonces(
        self,
        query_unfulfilled_reputer_nonces_request: "QueryUnfulfilledReputerNoncesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryUnfulfilledReputerNoncesResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetUnfulfilledReputerNonces",
            query_unfulfilled_reputer_nonces_request,
            QueryUnfulfilledReputerNoncesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inferer_network_regret(
        self,
        query_inferer_network_regret_request: "QueryInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetInfererNetworkRegret",
            query_inferer_network_regret_request,
            QueryInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecaster_network_regret(
        self,
        query_forecaster_network_regret_request: "QueryForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetForecasterNetworkRegret",
            query_forecaster_network_regret_request,
            QueryForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_in_forecaster_network_regret(
        self,
        query_one_in_forecaster_network_regret_request: "QueryOneInForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOneInForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetOneInForecasterNetworkRegret",
            query_one_in_forecaster_network_regret_request,
            QueryOneInForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_whitelist_admin(
        self,
        query_is_whitelist_admin_request: "QueryIsWhitelistAdminRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsWhitelistAdminResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsWhitelistAdmin",
            query_is_whitelist_admin_request,
            QueryIsWhitelistAdminResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_worker_commit_info(
        self,
        query_topic_last_commit_request: "QueryTopicLastCommitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicLastCommitResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopicLastWorkerCommitInfo",
            query_topic_last_commit_request,
            QueryTopicLastCommitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_last_reputer_commit_info(
        self,
        query_topic_last_commit_request: "QueryTopicLastCommitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicLastCommitResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopicLastReputerCommitInfo",
            query_topic_last_commit_request,
            QueryTopicLastCommitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_reward_nonce(
        self,
        query_topic_reward_nonce_request: "QueryTopicRewardNonceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicRewardNonceResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopicRewardNonce",
            query_topic_reward_nonce_request,
            QueryTopicRewardNonceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputer_loss_bundles_at_block(
        self,
        query_reputer_loss_bundles_at_block_request: "QueryReputerLossBundlesAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReputerLossBundlesAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetReputerLossBundlesAtBlock",
            query_reputer_loss_bundles_at_block_request,
            QueryReputerLossBundlesAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_reputer_authority(
        self,
        query_stake_reputer_authority_request: "QueryStakeReputerAuthorityRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeReputerAuthorityResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeReputerAuthority",
            query_stake_reputer_authority_request,
            QueryStakeReputerAuthorityResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_placement(
        self,
        query_delegate_stake_placement_request: "QueryDelegateStakePlacementRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakePlacementResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakePlacement",
            query_delegate_stake_placement_request,
            QueryDelegateStakePlacementResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_upon_reputer(
        self,
        query_delegate_stake_upon_reputer_request: "QueryDelegateStakeUponReputerRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakeUponReputerResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakeUponReputer",
            query_delegate_stake_upon_reputer_request,
            QueryDelegateStakeUponReputerResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_reward_per_share(
        self,
        query_delegate_reward_per_share_request: "QueryDelegateRewardPerShareRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateRewardPerShareResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateRewardPerShare",
            query_delegate_reward_per_share_request,
            QueryDelegateRewardPerShareResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        query_stake_removal_for_reputer_and_topic_id_request: "QueryStakeRemovalForReputerAndTopicIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStakeRemovalForReputerAndTopicIdResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetStakeRemovalForReputerAndTopicId",
            query_stake_removal_for_reputer_and_topic_id_request,
            QueryStakeRemovalForReputerAndTopicIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_delegate_stake_removal(
        self,
        query_delegate_stake_removal_request: "QueryDelegateStakeRemovalRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDelegateStakeRemovalResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetDelegateStakeRemoval",
            query_delegate_stake_removal_request,
            QueryDelegateStakeRemovalResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_topic_weight(
        self,
        query_previous_topic_weight_request: "QueryPreviousTopicWeightRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPreviousTopicWeightResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetPreviousTopicWeight",
            query_previous_topic_weight_request,
            QueryPreviousTopicWeightResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def topic_exists(
        self,
        query_topic_exists_request: "QueryTopicExistsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicExistsResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/TopicExists",
            query_topic_exists_request,
            QueryTopicExistsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def is_topic_active(
        self,
        query_is_topic_active_request: "QueryIsTopicActiveRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryIsTopicActiveResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/IsTopicActive",
            query_is_topic_active_request,
            QueryIsTopicActiveResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_topic_fee_revenue(
        self,
        query_topic_fee_revenue_request: "QueryTopicFeeRevenueRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTopicFeeRevenueResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTopicFeeRevenue",
            query_topic_fee_revenue_request,
            QueryTopicFeeRevenueResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_rewardable_topics(
        self,
        query_rewardable_topics_request: "QueryRewardableTopicsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRewardableTopicsResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetRewardableTopics",
            query_rewardable_topics_request,
            QueryRewardableTopicsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_inferer_score(
        self,
        query_latest_inferer_score_request: "QueryLatestInfererScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestInfererScoreResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestInfererScore",
            query_latest_inferer_score_request,
            QueryLatestInfererScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_forecaster_score(
        self,
        query_latest_forecaster_score_request: "QueryLatestForecasterScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestForecasterScoreResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestForecasterScore",
            query_latest_forecaster_score_request,
            QueryLatestForecasterScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_latest_reputer_score(
        self,
        query_latest_reputer_score_request: "QueryLatestReputerScoreRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryLatestReputerScoreResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetLatestReputerScore",
            query_latest_reputer_score_request,
            QueryLatestReputerScoreResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_inference_scores_until_block(
        self,
        query_inference_scores_until_block_request: "QueryInferenceScoresUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryInferenceScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetInferenceScoresUntilBlock",
            query_inference_scores_until_block_request,
            QueryInferenceScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_inference_scores_at_block(
        self,
        query_worker_inference_scores_at_block_request: "QueryWorkerInferenceScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWorkerInferenceScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetWorkerInferenceScoresAtBlock",
            query_worker_inference_scores_at_block_request,
            QueryWorkerInferenceScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_forecast_scores_until_block(
        self,
        query_forecast_scores_until_block_request: "QueryForecastScoresUntilBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryForecastScoresUntilBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetForecastScoresUntilBlock",
            query_forecast_scores_until_block_request,
            QueryForecastScoresUntilBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_worker_forecast_scores_at_block(
        self,
        query_worker_forecast_scores_at_block_request: "QueryWorkerForecastScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryWorkerForecastScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetWorkerForecastScoresAtBlock",
            query_worker_forecast_scores_at_block_request,
            QueryWorkerForecastScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_reputers_scores_at_block(
        self,
        query_reputers_scores_at_block_request: "QueryReputersScoresAtBlockRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryReputersScoresAtBlockResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetReputersScoresAtBlock",
            query_reputers_scores_at_block_request,
            QueryReputersScoresAtBlockResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_listening_coefficient(
        self,
        query_listening_coefficient_request: "QueryListeningCoefficientRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryListeningCoefficientResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetListeningCoefficient",
            query_listening_coefficient_request,
            QueryListeningCoefficientResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_reputer_reward_fraction(
        self,
        query_previous_reputer_reward_fraction_request: "QueryPreviousReputerRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPreviousReputerRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetPreviousReputerRewardFraction",
            query_previous_reputer_reward_fraction_request,
            QueryPreviousReputerRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_inference_reward_fraction(
        self,
        query_previous_inference_reward_fraction_request: "QueryPreviousInferenceRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPreviousInferenceRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetPreviousInferenceRewardFraction",
            query_previous_inference_reward_fraction_request,
            QueryPreviousInferenceRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_forecast_reward_fraction(
        self,
        query_previous_forecast_reward_fraction_request: "QueryPreviousForecastRewardFractionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPreviousForecastRewardFractionResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetPreviousForecastRewardFraction",
            query_previous_forecast_reward_fraction_request,
            QueryPreviousForecastRewardFractionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        query_previous_percentage_reward_to_staked_reputers_request: "QueryPreviousPercentageRewardToStakedReputersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPreviousPercentageRewardToStakedReputersResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetPreviousPercentageRewardToStakedReputers",
            query_previous_percentage_reward_to_staked_reputers_request,
            QueryPreviousPercentageRewardToStakedReputersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_total_reward_to_distribute(
        self,
        query_total_reward_to_distribute_request: "QueryTotalRewardToDistributeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryTotalRewardToDistributeResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetTotalRewardToDistribute",
            query_total_reward_to_distribute_request,
            QueryTotalRewardToDistributeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_naive_inferer_network_regret(
        self,
        query_naive_inferer_network_regret_request: "QueryNaiveInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryNaiveInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetNaiveInfererNetworkRegret",
            query_naive_inferer_network_regret_request,
            QueryNaiveInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_inferer_network_regret(
        self,
        query_one_out_inferer_inferer_network_regret_request: "QueryOneOutInfererInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOneOutInfererInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetOneOutInfererInfererNetworkRegret",
            query_one_out_inferer_inferer_network_regret_request,
            QueryOneOutInfererInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        query_one_out_inferer_forecaster_network_regret_request: "QueryOneOutInfererForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOneOutInfererForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetOneOutInfererForecasterNetworkRegret",
            query_one_out_inferer_forecaster_network_regret_request,
            QueryOneOutInfererForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        query_one_out_forecaster_inferer_network_regret_request: "QueryOneOutForecasterInfererNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOneOutForecasterInfererNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetOneOutForecasterInfererNetworkRegret",
            query_one_out_forecaster_inferer_network_regret_request,
            QueryOneOutForecasterInfererNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        query_one_out_forecaster_forecaster_network_regret_request: "QueryOneOutForecasterForecasterNetworkRegretRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryOneOutForecasterForecasterNetworkRegretResponse":
        return await self._unary_unary(
            "/emissions.v2.Query/GetOneOutForecasterForecasterNetworkRegret",
            query_one_out_forecaster_forecaster_network_regret_request,
            QueryOneOutForecasterForecasterNetworkRegretResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgBase(ServiceBase):

    async def update_params(
        self, msg_update_params: "MsgUpdateParams"
    ) -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_new_topic(
        self, msg_create_new_topic: "MsgCreateNewTopic"
    ) -> "MsgCreateNewTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def register(self, msg_register: "MsgRegister") -> "MsgRegisterResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_registration(
        self, msg_remove_registration: "MsgRemoveRegistration"
    ) -> "MsgRemoveRegistrationResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_stake(self, msg_add_stake: "MsgAddStake") -> "MsgAddStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_stake(
        self, msg_remove_stake: "MsgRemoveStake"
    ) -> "MsgRemoveStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_remove_stake(
        self, msg_cancel_remove_stake: "MsgCancelRemoveStake"
    ) -> "MsgCancelRemoveStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delegate_stake(
        self, msg_delegate_stake: "MsgDelegateStake"
    ) -> "MsgDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def reward_delegate_stake(
        self, msg_reward_delegate_stake: "MsgRewardDelegateStake"
    ) -> "MsgRewardDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_delegate_stake(
        self, msg_remove_delegate_stake: "MsgRemoveDelegateStake"
    ) -> "MsgRemoveDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_remove_delegate_stake(
        self, msg_cancel_remove_delegate_stake: "MsgCancelRemoveDelegateStake"
    ) -> "MsgCancelRemoveDelegateStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def fund_topic(
        self, msg_fund_topic: "MsgFundTopic"
    ) -> "MsgFundTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_whitelist_admin(
        self, msg_add_to_whitelist_admin: "MsgAddToWhitelistAdmin"
    ) -> "MsgAddToWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_whitelist_admin(
        self, msg_remove_from_whitelist_admin: "MsgRemoveFromWhitelistAdmin"
    ) -> "MsgRemoveFromWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def insert_worker_payload(
        self, msg_insert_worker_payload: "MsgInsertWorkerPayload"
    ) -> "MsgInsertWorkerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def insert_reputer_payload(
        self, msg_insert_reputer_payload: "MsgInsertReputerPayload"
    ) -> "MsgInsertReputerPayloadResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_create_new_topic(
        self,
        stream: "grpclib.server.Stream[MsgCreateNewTopic, MsgCreateNewTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_new_topic(request)
        await stream.send_message(response)

    async def __rpc_register(
        self, stream: "grpclib.server.Stream[MsgRegister, MsgRegisterResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.register(request)
        await stream.send_message(response)

    async def __rpc_remove_registration(
        self,
        stream: "grpclib.server.Stream[MsgRemoveRegistration, MsgRemoveRegistrationResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_registration(request)
        await stream.send_message(response)

    async def __rpc_add_stake(
        self, stream: "grpclib.server.Stream[MsgAddStake, MsgAddStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_stake(request)
        await stream.send_message(response)

    async def __rpc_remove_stake(
        self, stream: "grpclib.server.Stream[MsgRemoveStake, MsgRemoveStakeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_stake(request)
        await stream.send_message(response)

    async def __rpc_cancel_remove_stake(
        self,
        stream: "grpclib.server.Stream[MsgCancelRemoveStake, MsgCancelRemoveStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_remove_stake(request)
        await stream.send_message(response)

    async def __rpc_delegate_stake(
        self,
        stream: "grpclib.server.Stream[MsgDelegateStake, MsgDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_reward_delegate_stake(
        self,
        stream: "grpclib.server.Stream[MsgRewardDelegateStake, MsgRewardDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.reward_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_remove_delegate_stake(
        self,
        stream: "grpclib.server.Stream[MsgRemoveDelegateStake, MsgRemoveDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_cancel_remove_delegate_stake(
        self,
        stream: "grpclib.server.Stream[MsgCancelRemoveDelegateStake, MsgCancelRemoveDelegateStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_remove_delegate_stake(request)
        await stream.send_message(response)

    async def __rpc_fund_topic(
        self, stream: "grpclib.server.Stream[MsgFundTopic, MsgFundTopicResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.fund_topic(request)
        await stream.send_message(response)

    async def __rpc_add_to_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[MsgAddToWhitelistAdmin, MsgAddToWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_remove_from_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[MsgRemoveFromWhitelistAdmin, MsgRemoveFromWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_insert_worker_payload(
        self,
        stream: "grpclib.server.Stream[MsgInsertWorkerPayload, MsgInsertWorkerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.insert_worker_payload(request)
        await stream.send_message(response)

    async def __rpc_insert_reputer_payload(
        self,
        stream: "grpclib.server.Stream[MsgInsertReputerPayload, MsgInsertReputerPayloadResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.insert_reputer_payload(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/emissions.v2.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
            "/emissions.v2.Msg/CreateNewTopic": grpclib.const.Handler(
                self.__rpc_create_new_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateNewTopic,
                MsgCreateNewTopicResponse,
            ),
            "/emissions.v2.Msg/Register": grpclib.const.Handler(
                self.__rpc_register,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRegister,
                MsgRegisterResponse,
            ),
            "/emissions.v2.Msg/RemoveRegistration": grpclib.const.Handler(
                self.__rpc_remove_registration,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRemoveRegistration,
                MsgRemoveRegistrationResponse,
            ),
            "/emissions.v2.Msg/AddStake": grpclib.const.Handler(
                self.__rpc_add_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgAddStake,
                MsgAddStakeResponse,
            ),
            "/emissions.v2.Msg/RemoveStake": grpclib.const.Handler(
                self.__rpc_remove_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRemoveStake,
                MsgRemoveStakeResponse,
            ),
            "/emissions.v2.Msg/CancelRemoveStake": grpclib.const.Handler(
                self.__rpc_cancel_remove_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelRemoveStake,
                MsgCancelRemoveStakeResponse,
            ),
            "/emissions.v2.Msg/DelegateStake": grpclib.const.Handler(
                self.__rpc_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDelegateStake,
                MsgDelegateStakeResponse,
            ),
            "/emissions.v2.Msg/RewardDelegateStake": grpclib.const.Handler(
                self.__rpc_reward_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRewardDelegateStake,
                MsgRewardDelegateStakeResponse,
            ),
            "/emissions.v2.Msg/RemoveDelegateStake": grpclib.const.Handler(
                self.__rpc_remove_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRemoveDelegateStake,
                MsgRemoveDelegateStakeResponse,
            ),
            "/emissions.v2.Msg/CancelRemoveDelegateStake": grpclib.const.Handler(
                self.__rpc_cancel_remove_delegate_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelRemoveDelegateStake,
                MsgCancelRemoveDelegateStakeResponse,
            ),
            "/emissions.v2.Msg/FundTopic": grpclib.const.Handler(
                self.__rpc_fund_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgFundTopic,
                MsgFundTopicResponse,
            ),
            "/emissions.v2.Msg/AddToWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_add_to_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgAddToWhitelistAdmin,
                MsgAddToWhitelistAdminResponse,
            ),
            "/emissions.v2.Msg/RemoveFromWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_remove_from_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgRemoveFromWhitelistAdmin,
                MsgRemoveFromWhitelistAdminResponse,
            ),
            "/emissions.v2.Msg/InsertWorkerPayload": grpclib.const.Handler(
                self.__rpc_insert_worker_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgInsertWorkerPayload,
                MsgInsertWorkerPayloadResponse,
            ),
            "/emissions.v2.Msg/InsertReputerPayload": grpclib.const.Handler(
                self.__rpc_insert_reputer_payload,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgInsertReputerPayload,
                MsgInsertReputerPayloadResponse,
            ),
        }


class QueryBase(ServiceBase):

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_topic_id(
        self, query_next_topic_id_request: "QueryNextTopicIdRequest"
    ) -> "QueryNextTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic(
        self, query_topic_request: "QueryTopicRequest"
    ) -> "QueryTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_active_topics(
        self, query_active_topics_request: "QueryActiveTopicsRequest"
    ) -> "QueryActiveTopicsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_latest_inference_by_topic_id(
        self, query_worker_latest_inference_request: "QueryWorkerLatestInferenceRequest"
    ) -> "QueryWorkerLatestInferenceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inferences_at_block(
        self, query_inferences_at_block_request: "QueryInferencesAtBlockRequest"
    ) -> "QueryInferencesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_topic_inferences(
        self, query_latest_topic_inferences_request: "QueryLatestTopicInferencesRequest"
    ) -> "QueryLatestTopicInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecasts_at_block(
        self, query_forecasts_at_block_request: "QueryForecastsAtBlockRequest"
    ) -> "QueryForecastsAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_network_loss_bundle_at_block(
        self,
        query_network_loss_bundle_at_block_request: "QueryNetworkLossBundleAtBlockRequest",
    ) -> "QueryNetworkLossBundleAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_total_stake(
        self, query_total_stake_request: "QueryTotalStakeRequest"
    ) -> "QueryTotalStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_stake_in_topic(
        self, query_reputer_stake_in_topic_request: "QueryReputerStakeInTopicRequest"
    ) -> "QueryReputerStakeInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_multi_reputer_stake_in_topic(
        self,
        query_multi_reputer_stake_in_topic_request: "QueryMultiReputerStakeInTopicRequest",
    ) -> "QueryMultiReputerStakeInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_reputer_in_topic_in_self(
        self,
        query_stake_from_reputer_in_topic_in_self_request: "QueryStakeFromReputerInTopicInSelfRequest",
    ) -> "QueryStakeFromReputerInTopicInSelfResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_in_topic_in_reputer(
        self,
        query_delegate_stake_in_topic_in_reputer_request: "QueryDelegateStakeInTopicInReputerRequest",
    ) -> "QueryDelegateStakeInTopicInReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_delegator_in_topic_in_reputer(
        self,
        query_stake_from_delegator_in_topic_in_reputer_request: "QueryStakeFromDelegatorInTopicInReputerRequest",
    ) -> "QueryStakeFromDelegatorInTopicInReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_from_delegator_in_topic(
        self,
        query_stake_from_delegator_in_topic_request: "QueryStakeFromDelegatorInTopicRequest",
    ) -> "QueryStakeFromDelegatorInTopicResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_stake(
        self, query_topic_stake_request: "QueryTopicStakeRequest"
    ) -> "QueryTopicStakeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removals_up_until_block(
        self,
        query_stake_removals_up_until_block_request: "QueryStakeRemovalsUpUntilBlockRequest",
    ) -> "QueryStakeRemovalsUpUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removals_up_until_block(
        self,
        query_delegate_stake_removals_up_until_block_request: "QueryDelegateStakeRemovalsUpUntilBlockRequest",
    ) -> "QueryDelegateStakeRemovalsUpUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removal_info(
        self, query_stake_removal_info_request: "QueryStakeRemovalInfoRequest"
    ) -> "QueryStakeRemovalInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removal_info(
        self,
        query_delegate_stake_removal_info_request: "QueryDelegateStakeRemovalInfoRequest",
    ) -> "QueryDelegateStakeRemovalInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_node_info(
        self, query_worker_node_info_request: "QueryWorkerNodeInfoRequest"
    ) -> "QueryWorkerNodeInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_node_info(
        self, query_reputer_node_info_request: "QueryReputerNodeInfoRequest"
    ) -> "QueryReputerNodeInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_worker_registered_in_topic_id(
        self,
        query_is_worker_registered_in_topic_id_request: "QueryIsWorkerRegisteredInTopicIdRequest",
    ) -> "QueryIsWorkerRegisteredInTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_reputer_registered_in_topic_id(
        self,
        query_is_reputer_registered_in_topic_id_request: "QueryIsReputerRegisteredInTopicIdRequest",
    ) -> "QueryIsReputerRegisteredInTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_network_inferences_at_block(
        self,
        query_network_inferences_at_block_request: "QueryNetworkInferencesAtBlockRequest",
    ) -> "QueryNetworkInferencesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_network_inference(
        self,
        query_latest_network_inferences_request: "QueryLatestNetworkInferencesRequest",
    ) -> "QueryLatestNetworkInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_available_network_inference(
        self,
        query_latest_network_inferences_request: "QueryLatestNetworkInferencesRequest",
    ) -> "QueryLatestNetworkInferencesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_worker_nonce_unfulfilled(
        self,
        query_is_worker_nonce_unfulfilled_request: "QueryIsWorkerNonceUnfulfilledRequest",
    ) -> "QueryIsWorkerNonceUnfulfilledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_reputer_nonce_unfulfilled(
        self,
        query_is_reputer_nonce_unfulfilled_request: "QueryIsReputerNonceUnfulfilledRequest",
    ) -> "QueryIsReputerNonceUnfulfilledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unfulfilled_worker_nonces(
        self,
        query_unfulfilled_worker_nonces_request: "QueryUnfulfilledWorkerNoncesRequest",
    ) -> "QueryUnfulfilledWorkerNoncesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unfulfilled_reputer_nonces(
        self,
        query_unfulfilled_reputer_nonces_request: "QueryUnfulfilledReputerNoncesRequest",
    ) -> "QueryUnfulfilledReputerNoncesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inferer_network_regret(
        self, query_inferer_network_regret_request: "QueryInfererNetworkRegretRequest"
    ) -> "QueryInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecaster_network_regret(
        self,
        query_forecaster_network_regret_request: "QueryForecasterNetworkRegretRequest",
    ) -> "QueryForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_in_forecaster_network_regret(
        self,
        query_one_in_forecaster_network_regret_request: "QueryOneInForecasterNetworkRegretRequest",
    ) -> "QueryOneInForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_whitelist_admin(
        self, query_is_whitelist_admin_request: "QueryIsWhitelistAdminRequest"
    ) -> "QueryIsWhitelistAdminResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_last_worker_commit_info(
        self, query_topic_last_commit_request: "QueryTopicLastCommitRequest"
    ) -> "QueryTopicLastCommitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_last_reputer_commit_info(
        self, query_topic_last_commit_request: "QueryTopicLastCommitRequest"
    ) -> "QueryTopicLastCommitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_reward_nonce(
        self, query_topic_reward_nonce_request: "QueryTopicRewardNonceRequest"
    ) -> "QueryTopicRewardNonceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputer_loss_bundles_at_block(
        self,
        query_reputer_loss_bundles_at_block_request: "QueryReputerLossBundlesAtBlockRequest",
    ) -> "QueryReputerLossBundlesAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_reputer_authority(
        self, query_stake_reputer_authority_request: "QueryStakeReputerAuthorityRequest"
    ) -> "QueryStakeReputerAuthorityResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_placement(
        self,
        query_delegate_stake_placement_request: "QueryDelegateStakePlacementRequest",
    ) -> "QueryDelegateStakePlacementResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_upon_reputer(
        self,
        query_delegate_stake_upon_reputer_request: "QueryDelegateStakeUponReputerRequest",
    ) -> "QueryDelegateStakeUponReputerResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_reward_per_share(
        self,
        query_delegate_reward_per_share_request: "QueryDelegateRewardPerShareRequest",
    ) -> "QueryDelegateRewardPerShareResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stake_removal_for_reputer_and_topic_id(
        self,
        query_stake_removal_for_reputer_and_topic_id_request: "QueryStakeRemovalForReputerAndTopicIdRequest",
    ) -> "QueryStakeRemovalForReputerAndTopicIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_delegate_stake_removal(
        self, query_delegate_stake_removal_request: "QueryDelegateStakeRemovalRequest"
    ) -> "QueryDelegateStakeRemovalResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_topic_weight(
        self, query_previous_topic_weight_request: "QueryPreviousTopicWeightRequest"
    ) -> "QueryPreviousTopicWeightResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def topic_exists(
        self, query_topic_exists_request: "QueryTopicExistsRequest"
    ) -> "QueryTopicExistsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def is_topic_active(
        self, query_is_topic_active_request: "QueryIsTopicActiveRequest"
    ) -> "QueryIsTopicActiveResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_topic_fee_revenue(
        self, query_topic_fee_revenue_request: "QueryTopicFeeRevenueRequest"
    ) -> "QueryTopicFeeRevenueResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_rewardable_topics(
        self, query_rewardable_topics_request: "QueryRewardableTopicsRequest"
    ) -> "QueryRewardableTopicsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_inferer_score(
        self, query_latest_inferer_score_request: "QueryLatestInfererScoreRequest"
    ) -> "QueryLatestInfererScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_forecaster_score(
        self, query_latest_forecaster_score_request: "QueryLatestForecasterScoreRequest"
    ) -> "QueryLatestForecasterScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_latest_reputer_score(
        self, query_latest_reputer_score_request: "QueryLatestReputerScoreRequest"
    ) -> "QueryLatestReputerScoreResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_inference_scores_until_block(
        self,
        query_inference_scores_until_block_request: "QueryInferenceScoresUntilBlockRequest",
    ) -> "QueryInferenceScoresUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_inference_scores_at_block(
        self,
        query_worker_inference_scores_at_block_request: "QueryWorkerInferenceScoresAtBlockRequest",
    ) -> "QueryWorkerInferenceScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_forecast_scores_until_block(
        self,
        query_forecast_scores_until_block_request: "QueryForecastScoresUntilBlockRequest",
    ) -> "QueryForecastScoresUntilBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_worker_forecast_scores_at_block(
        self,
        query_worker_forecast_scores_at_block_request: "QueryWorkerForecastScoresAtBlockRequest",
    ) -> "QueryWorkerForecastScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_reputers_scores_at_block(
        self,
        query_reputers_scores_at_block_request: "QueryReputersScoresAtBlockRequest",
    ) -> "QueryReputersScoresAtBlockResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_listening_coefficient(
        self, query_listening_coefficient_request: "QueryListeningCoefficientRequest"
    ) -> "QueryListeningCoefficientResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_reputer_reward_fraction(
        self,
        query_previous_reputer_reward_fraction_request: "QueryPreviousReputerRewardFractionRequest",
    ) -> "QueryPreviousReputerRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_inference_reward_fraction(
        self,
        query_previous_inference_reward_fraction_request: "QueryPreviousInferenceRewardFractionRequest",
    ) -> "QueryPreviousInferenceRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_forecast_reward_fraction(
        self,
        query_previous_forecast_reward_fraction_request: "QueryPreviousForecastRewardFractionRequest",
    ) -> "QueryPreviousForecastRewardFractionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_previous_percentage_reward_to_staked_reputers(
        self,
        query_previous_percentage_reward_to_staked_reputers_request: "QueryPreviousPercentageRewardToStakedReputersRequest",
    ) -> "QueryPreviousPercentageRewardToStakedReputersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_total_reward_to_distribute(
        self,
        query_total_reward_to_distribute_request: "QueryTotalRewardToDistributeRequest",
    ) -> "QueryTotalRewardToDistributeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_naive_inferer_network_regret(
        self,
        query_naive_inferer_network_regret_request: "QueryNaiveInfererNetworkRegretRequest",
    ) -> "QueryNaiveInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_inferer_inferer_network_regret(
        self,
        query_one_out_inferer_inferer_network_regret_request: "QueryOneOutInfererInfererNetworkRegretRequest",
    ) -> "QueryOneOutInfererInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_inferer_forecaster_network_regret(
        self,
        query_one_out_inferer_forecaster_network_regret_request: "QueryOneOutInfererForecasterNetworkRegretRequest",
    ) -> "QueryOneOutInfererForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_forecaster_inferer_network_regret(
        self,
        query_one_out_forecaster_inferer_network_regret_request: "QueryOneOutForecasterInfererNetworkRegretRequest",
    ) -> "QueryOneOutForecasterInfererNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_one_out_forecaster_forecaster_network_regret(
        self,
        query_one_out_forecaster_forecaster_network_regret_request: "QueryOneOutForecasterForecasterNetworkRegretRequest",
    ) -> "QueryOneOutForecasterForecasterNetworkRegretResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_get_next_topic_id(
        self,
        stream: "grpclib.server.Stream[QueryNextTopicIdRequest, QueryNextTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_topic(
        self, stream: "grpclib.server.Stream[QueryTopicRequest, QueryTopicResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic(request)
        await stream.send_message(response)

    async def __rpc_get_active_topics(
        self,
        stream: "grpclib.server.Stream[QueryActiveTopicsRequest, QueryActiveTopicsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_active_topics(request)
        await stream.send_message(response)

    async def __rpc_get_worker_latest_inference_by_topic_id(
        self,
        stream: "grpclib.server.Stream[QueryWorkerLatestInferenceRequest, QueryWorkerLatestInferenceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_latest_inference_by_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_inferences_at_block(
        self,
        stream: "grpclib.server.Stream[QueryInferencesAtBlockRequest, QueryInferencesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inferences_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_latest_topic_inferences(
        self,
        stream: "grpclib.server.Stream[QueryLatestTopicInferencesRequest, QueryLatestTopicInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_topic_inferences(request)
        await stream.send_message(response)

    async def __rpc_get_forecasts_at_block(
        self,
        stream: "grpclib.server.Stream[QueryForecastsAtBlockRequest, QueryForecastsAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecasts_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_network_loss_bundle_at_block(
        self,
        stream: "grpclib.server.Stream[QueryNetworkLossBundleAtBlockRequest, QueryNetworkLossBundleAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_network_loss_bundle_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_total_stake(
        self,
        stream: "grpclib.server.Stream[QueryTotalStakeRequest, QueryTotalStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_total_stake(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_stake_in_topic(
        self,
        stream: "grpclib.server.Stream[QueryReputerStakeInTopicRequest, QueryReputerStakeInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_stake_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_multi_reputer_stake_in_topic(
        self,
        stream: "grpclib.server.Stream[QueryMultiReputerStakeInTopicRequest, QueryMultiReputerStakeInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_multi_reputer_stake_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_reputer_in_topic_in_self(
        self,
        stream: "grpclib.server.Stream[QueryStakeFromReputerInTopicInSelfRequest, QueryStakeFromReputerInTopicInSelfResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_reputer_in_topic_in_self(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_in_topic_in_reputer(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakeInTopicInReputerRequest, QueryDelegateStakeInTopicInReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_in_topic_in_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_delegator_in_topic_in_reputer(
        self,
        stream: "grpclib.server.Stream[QueryStakeFromDelegatorInTopicInReputerRequest, QueryStakeFromDelegatorInTopicInReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_delegator_in_topic_in_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_stake_from_delegator_in_topic(
        self,
        stream: "grpclib.server.Stream[QueryStakeFromDelegatorInTopicRequest, QueryStakeFromDelegatorInTopicResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_from_delegator_in_topic(request)
        await stream.send_message(response)

    async def __rpc_get_topic_stake(
        self,
        stream: "grpclib.server.Stream[QueryTopicStakeRequest, QueryTopicStakeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_stake(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removals_up_until_block(
        self,
        stream: "grpclib.server.Stream[QueryStakeRemovalsUpUntilBlockRequest, QueryStakeRemovalsUpUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removals_up_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removals_up_until_block(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakeRemovalsUpUntilBlockRequest, QueryDelegateStakeRemovalsUpUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removals_up_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removal_info(
        self,
        stream: "grpclib.server.Stream[QueryStakeRemovalInfoRequest, QueryStakeRemovalInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removal_info(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removal_info(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakeRemovalInfoRequest, QueryDelegateStakeRemovalInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removal_info(request)
        await stream.send_message(response)

    async def __rpc_get_worker_node_info(
        self,
        stream: "grpclib.server.Stream[QueryWorkerNodeInfoRequest, QueryWorkerNodeInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_node_info(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_node_info(
        self,
        stream: "grpclib.server.Stream[QueryReputerNodeInfoRequest, QueryReputerNodeInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_node_info(request)
        await stream.send_message(response)

    async def __rpc_is_worker_registered_in_topic_id(
        self,
        stream: "grpclib.server.Stream[QueryIsWorkerRegisteredInTopicIdRequest, QueryIsWorkerRegisteredInTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_worker_registered_in_topic_id(request)
        await stream.send_message(response)

    async def __rpc_is_reputer_registered_in_topic_id(
        self,
        stream: "grpclib.server.Stream[QueryIsReputerRegisteredInTopicIdRequest, QueryIsReputerRegisteredInTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_reputer_registered_in_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_network_inferences_at_block(
        self,
        stream: "grpclib.server.Stream[QueryNetworkInferencesAtBlockRequest, QueryNetworkInferencesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_network_inferences_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_latest_network_inference(
        self,
        stream: "grpclib.server.Stream[QueryLatestNetworkInferencesRequest, QueryLatestNetworkInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_network_inference(request)
        await stream.send_message(response)

    async def __rpc_get_latest_available_network_inference(
        self,
        stream: "grpclib.server.Stream[QueryLatestNetworkInferencesRequest, QueryLatestNetworkInferencesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_available_network_inference(request)
        await stream.send_message(response)

    async def __rpc_is_worker_nonce_unfulfilled(
        self,
        stream: "grpclib.server.Stream[QueryIsWorkerNonceUnfulfilledRequest, QueryIsWorkerNonceUnfulfilledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_worker_nonce_unfulfilled(request)
        await stream.send_message(response)

    async def __rpc_is_reputer_nonce_unfulfilled(
        self,
        stream: "grpclib.server.Stream[QueryIsReputerNonceUnfulfilledRequest, QueryIsReputerNonceUnfulfilledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_reputer_nonce_unfulfilled(request)
        await stream.send_message(response)

    async def __rpc_get_unfulfilled_worker_nonces(
        self,
        stream: "grpclib.server.Stream[QueryUnfulfilledWorkerNoncesRequest, QueryUnfulfilledWorkerNoncesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unfulfilled_worker_nonces(request)
        await stream.send_message(response)

    async def __rpc_get_unfulfilled_reputer_nonces(
        self,
        stream: "grpclib.server.Stream[QueryUnfulfilledReputerNoncesRequest, QueryUnfulfilledReputerNoncesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unfulfilled_reputer_nonces(request)
        await stream.send_message(response)

    async def __rpc_get_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryInfererNetworkRegretRequest, QueryInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryForecasterNetworkRegretRequest, QueryForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_in_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryOneInForecasterNetworkRegretRequest, QueryOneInForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_in_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_is_whitelist_admin(
        self,
        stream: "grpclib.server.Stream[QueryIsWhitelistAdminRequest, QueryIsWhitelistAdminResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_whitelist_admin(request)
        await stream.send_message(response)

    async def __rpc_get_topic_last_worker_commit_info(
        self,
        stream: "grpclib.server.Stream[QueryTopicLastCommitRequest, QueryTopicLastCommitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_last_worker_commit_info(request)
        await stream.send_message(response)

    async def __rpc_get_topic_last_reputer_commit_info(
        self,
        stream: "grpclib.server.Stream[QueryTopicLastCommitRequest, QueryTopicLastCommitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_last_reputer_commit_info(request)
        await stream.send_message(response)

    async def __rpc_get_topic_reward_nonce(
        self,
        stream: "grpclib.server.Stream[QueryTopicRewardNonceRequest, QueryTopicRewardNonceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_reward_nonce(request)
        await stream.send_message(response)

    async def __rpc_get_reputer_loss_bundles_at_block(
        self,
        stream: "grpclib.server.Stream[QueryReputerLossBundlesAtBlockRequest, QueryReputerLossBundlesAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputer_loss_bundles_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_stake_reputer_authority(
        self,
        stream: "grpclib.server.Stream[QueryStakeReputerAuthorityRequest, QueryStakeReputerAuthorityResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_reputer_authority(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_placement(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakePlacementRequest, QueryDelegateStakePlacementResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_placement(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_upon_reputer(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakeUponReputerRequest, QueryDelegateStakeUponReputerResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_upon_reputer(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_reward_per_share(
        self,
        stream: "grpclib.server.Stream[QueryDelegateRewardPerShareRequest, QueryDelegateRewardPerShareResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_reward_per_share(request)
        await stream.send_message(response)

    async def __rpc_get_stake_removal_for_reputer_and_topic_id(
        self,
        stream: "grpclib.server.Stream[QueryStakeRemovalForReputerAndTopicIdRequest, QueryStakeRemovalForReputerAndTopicIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stake_removal_for_reputer_and_topic_id(request)
        await stream.send_message(response)

    async def __rpc_get_delegate_stake_removal(
        self,
        stream: "grpclib.server.Stream[QueryDelegateStakeRemovalRequest, QueryDelegateStakeRemovalResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_delegate_stake_removal(request)
        await stream.send_message(response)

    async def __rpc_get_previous_topic_weight(
        self,
        stream: "grpclib.server.Stream[QueryPreviousTopicWeightRequest, QueryPreviousTopicWeightResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_topic_weight(request)
        await stream.send_message(response)

    async def __rpc_topic_exists(
        self,
        stream: "grpclib.server.Stream[QueryTopicExistsRequest, QueryTopicExistsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.topic_exists(request)
        await stream.send_message(response)

    async def __rpc_is_topic_active(
        self,
        stream: "grpclib.server.Stream[QueryIsTopicActiveRequest, QueryIsTopicActiveResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.is_topic_active(request)
        await stream.send_message(response)

    async def __rpc_get_topic_fee_revenue(
        self,
        stream: "grpclib.server.Stream[QueryTopicFeeRevenueRequest, QueryTopicFeeRevenueResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_topic_fee_revenue(request)
        await stream.send_message(response)

    async def __rpc_get_rewardable_topics(
        self,
        stream: "grpclib.server.Stream[QueryRewardableTopicsRequest, QueryRewardableTopicsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_rewardable_topics(request)
        await stream.send_message(response)

    async def __rpc_get_latest_inferer_score(
        self,
        stream: "grpclib.server.Stream[QueryLatestInfererScoreRequest, QueryLatestInfererScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_inferer_score(request)
        await stream.send_message(response)

    async def __rpc_get_latest_forecaster_score(
        self,
        stream: "grpclib.server.Stream[QueryLatestForecasterScoreRequest, QueryLatestForecasterScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_forecaster_score(request)
        await stream.send_message(response)

    async def __rpc_get_latest_reputer_score(
        self,
        stream: "grpclib.server.Stream[QueryLatestReputerScoreRequest, QueryLatestReputerScoreResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_latest_reputer_score(request)
        await stream.send_message(response)

    async def __rpc_get_inference_scores_until_block(
        self,
        stream: "grpclib.server.Stream[QueryInferenceScoresUntilBlockRequest, QueryInferenceScoresUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_inference_scores_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_worker_inference_scores_at_block(
        self,
        stream: "grpclib.server.Stream[QueryWorkerInferenceScoresAtBlockRequest, QueryWorkerInferenceScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_inference_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_forecast_scores_until_block(
        self,
        stream: "grpclib.server.Stream[QueryForecastScoresUntilBlockRequest, QueryForecastScoresUntilBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_forecast_scores_until_block(request)
        await stream.send_message(response)

    async def __rpc_get_worker_forecast_scores_at_block(
        self,
        stream: "grpclib.server.Stream[QueryWorkerForecastScoresAtBlockRequest, QueryWorkerForecastScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_worker_forecast_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_reputers_scores_at_block(
        self,
        stream: "grpclib.server.Stream[QueryReputersScoresAtBlockRequest, QueryReputersScoresAtBlockResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_reputers_scores_at_block(request)
        await stream.send_message(response)

    async def __rpc_get_listening_coefficient(
        self,
        stream: "grpclib.server.Stream[QueryListeningCoefficientRequest, QueryListeningCoefficientResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_listening_coefficient(request)
        await stream.send_message(response)

    async def __rpc_get_previous_reputer_reward_fraction(
        self,
        stream: "grpclib.server.Stream[QueryPreviousReputerRewardFractionRequest, QueryPreviousReputerRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_reputer_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_inference_reward_fraction(
        self,
        stream: "grpclib.server.Stream[QueryPreviousInferenceRewardFractionRequest, QueryPreviousInferenceRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_inference_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_forecast_reward_fraction(
        self,
        stream: "grpclib.server.Stream[QueryPreviousForecastRewardFractionRequest, QueryPreviousForecastRewardFractionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_forecast_reward_fraction(request)
        await stream.send_message(response)

    async def __rpc_get_previous_percentage_reward_to_staked_reputers(
        self,
        stream: "grpclib.server.Stream[QueryPreviousPercentageRewardToStakedReputersRequest, QueryPreviousPercentageRewardToStakedReputersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_previous_percentage_reward_to_staked_reputers(request)
        await stream.send_message(response)

    async def __rpc_get_total_reward_to_distribute(
        self,
        stream: "grpclib.server.Stream[QueryTotalRewardToDistributeRequest, QueryTotalRewardToDistributeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_total_reward_to_distribute(request)
        await stream.send_message(response)

    async def __rpc_get_naive_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryNaiveInfererNetworkRegretRequest, QueryNaiveInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_naive_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_inferer_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryOneOutInfererInfererNetworkRegretRequest, QueryOneOutInfererInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_inferer_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_inferer_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryOneOutInfererForecasterNetworkRegretRequest, QueryOneOutInfererForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_inferer_forecaster_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_forecaster_inferer_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryOneOutForecasterInfererNetworkRegretRequest, QueryOneOutForecasterInfererNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_forecaster_inferer_network_regret(request)
        await stream.send_message(response)

    async def __rpc_get_one_out_forecaster_forecaster_network_regret(
        self,
        stream: "grpclib.server.Stream[QueryOneOutForecasterForecasterNetworkRegretRequest, QueryOneOutForecasterForecasterNetworkRegretResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_one_out_forecaster_forecaster_network_regret(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/emissions.v2.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/emissions.v2.Query/GetNextTopicId": grpclib.const.Handler(
                self.__rpc_get_next_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNextTopicIdRequest,
                QueryNextTopicIdResponse,
            ),
            "/emissions.v2.Query/GetTopic": grpclib.const.Handler(
                self.__rpc_get_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicRequest,
                QueryTopicResponse,
            ),
            "/emissions.v2.Query/GetActiveTopics": grpclib.const.Handler(
                self.__rpc_get_active_topics,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryActiveTopicsRequest,
                QueryActiveTopicsResponse,
            ),
            "/emissions.v2.Query/GetWorkerLatestInferenceByTopicId": grpclib.const.Handler(
                self.__rpc_get_worker_latest_inference_by_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWorkerLatestInferenceRequest,
                QueryWorkerLatestInferenceResponse,
            ),
            "/emissions.v2.Query/GetInferencesAtBlock": grpclib.const.Handler(
                self.__rpc_get_inferences_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInferencesAtBlockRequest,
                QueryInferencesAtBlockResponse,
            ),
            "/emissions.v2.Query/GetLatestTopicInferences": grpclib.const.Handler(
                self.__rpc_get_latest_topic_inferences,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestTopicInferencesRequest,
                QueryLatestTopicInferencesResponse,
            ),
            "/emissions.v2.Query/GetForecastsAtBlock": grpclib.const.Handler(
                self.__rpc_get_forecasts_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryForecastsAtBlockRequest,
                QueryForecastsAtBlockResponse,
            ),
            "/emissions.v2.Query/GetNetworkLossBundleAtBlock": grpclib.const.Handler(
                self.__rpc_get_network_loss_bundle_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNetworkLossBundleAtBlockRequest,
                QueryNetworkLossBundleAtBlockResponse,
            ),
            "/emissions.v2.Query/GetTotalStake": grpclib.const.Handler(
                self.__rpc_get_total_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalStakeRequest,
                QueryTotalStakeResponse,
            ),
            "/emissions.v2.Query/GetReputerStakeInTopic": grpclib.const.Handler(
                self.__rpc_get_reputer_stake_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReputerStakeInTopicRequest,
                QueryReputerStakeInTopicResponse,
            ),
            "/emissions.v2.Query/GetMultiReputerStakeInTopic": grpclib.const.Handler(
                self.__rpc_get_multi_reputer_stake_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryMultiReputerStakeInTopicRequest,
                QueryMultiReputerStakeInTopicResponse,
            ),
            "/emissions.v2.Query/GetStakeFromReputerInTopicInSelf": grpclib.const.Handler(
                self.__rpc_get_stake_from_reputer_in_topic_in_self,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeFromReputerInTopicInSelfRequest,
                QueryStakeFromReputerInTopicInSelfResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakeInTopicInReputer": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_in_topic_in_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakeInTopicInReputerRequest,
                QueryDelegateStakeInTopicInReputerResponse,
            ),
            "/emissions.v2.Query/GetStakeFromDelegatorInTopicInReputer": grpclib.const.Handler(
                self.__rpc_get_stake_from_delegator_in_topic_in_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeFromDelegatorInTopicInReputerRequest,
                QueryStakeFromDelegatorInTopicInReputerResponse,
            ),
            "/emissions.v2.Query/GetStakeFromDelegatorInTopic": grpclib.const.Handler(
                self.__rpc_get_stake_from_delegator_in_topic,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeFromDelegatorInTopicRequest,
                QueryStakeFromDelegatorInTopicResponse,
            ),
            "/emissions.v2.Query/GetTopicStake": grpclib.const.Handler(
                self.__rpc_get_topic_stake,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicStakeRequest,
                QueryTopicStakeResponse,
            ),
            "/emissions.v2.Query/GetStakeRemovalsUpUntilBlock": grpclib.const.Handler(
                self.__rpc_get_stake_removals_up_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeRemovalsUpUntilBlockRequest,
                QueryStakeRemovalsUpUntilBlockResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakeRemovalsUpUntilBlock": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removals_up_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakeRemovalsUpUntilBlockRequest,
                QueryDelegateStakeRemovalsUpUntilBlockResponse,
            ),
            "/emissions.v2.Query/GetStakeRemovalInfo": grpclib.const.Handler(
                self.__rpc_get_stake_removal_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeRemovalInfoRequest,
                QueryStakeRemovalInfoResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakeRemovalInfo": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removal_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakeRemovalInfoRequest,
                QueryDelegateStakeRemovalInfoResponse,
            ),
            "/emissions.v2.Query/GetWorkerNodeInfo": grpclib.const.Handler(
                self.__rpc_get_worker_node_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWorkerNodeInfoRequest,
                QueryWorkerNodeInfoResponse,
            ),
            "/emissions.v2.Query/GetReputerNodeInfo": grpclib.const.Handler(
                self.__rpc_get_reputer_node_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReputerNodeInfoRequest,
                QueryReputerNodeInfoResponse,
            ),
            "/emissions.v2.Query/IsWorkerRegisteredInTopicId": grpclib.const.Handler(
                self.__rpc_is_worker_registered_in_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsWorkerRegisteredInTopicIdRequest,
                QueryIsWorkerRegisteredInTopicIdResponse,
            ),
            "/emissions.v2.Query/IsReputerRegisteredInTopicId": grpclib.const.Handler(
                self.__rpc_is_reputer_registered_in_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsReputerRegisteredInTopicIdRequest,
                QueryIsReputerRegisteredInTopicIdResponse,
            ),
            "/emissions.v2.Query/GetNetworkInferencesAtBlock": grpclib.const.Handler(
                self.__rpc_get_network_inferences_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNetworkInferencesAtBlockRequest,
                QueryNetworkInferencesAtBlockResponse,
            ),
            "/emissions.v2.Query/GetLatestNetworkInference": grpclib.const.Handler(
                self.__rpc_get_latest_network_inference,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestNetworkInferencesRequest,
                QueryLatestNetworkInferencesResponse,
            ),
            "/emissions.v2.Query/GetLatestAvailableNetworkInference": grpclib.const.Handler(
                self.__rpc_get_latest_available_network_inference,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestNetworkInferencesRequest,
                QueryLatestNetworkInferencesResponse,
            ),
            "/emissions.v2.Query/IsWorkerNonceUnfulfilled": grpclib.const.Handler(
                self.__rpc_is_worker_nonce_unfulfilled,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsWorkerNonceUnfulfilledRequest,
                QueryIsWorkerNonceUnfulfilledResponse,
            ),
            "/emissions.v2.Query/IsReputerNonceUnfulfilled": grpclib.const.Handler(
                self.__rpc_is_reputer_nonce_unfulfilled,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsReputerNonceUnfulfilledRequest,
                QueryIsReputerNonceUnfulfilledResponse,
            ),
            "/emissions.v2.Query/GetUnfulfilledWorkerNonces": grpclib.const.Handler(
                self.__rpc_get_unfulfilled_worker_nonces,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUnfulfilledWorkerNoncesRequest,
                QueryUnfulfilledWorkerNoncesResponse,
            ),
            "/emissions.v2.Query/GetUnfulfilledReputerNonces": grpclib.const.Handler(
                self.__rpc_get_unfulfilled_reputer_nonces,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryUnfulfilledReputerNoncesRequest,
                QueryUnfulfilledReputerNoncesResponse,
            ),
            "/emissions.v2.Query/GetInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInfererNetworkRegretRequest,
                QueryInfererNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryForecasterNetworkRegretRequest,
                QueryForecasterNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetOneInForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_in_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOneInForecasterNetworkRegretRequest,
                QueryOneInForecasterNetworkRegretResponse,
            ),
            "/emissions.v2.Query/IsWhitelistAdmin": grpclib.const.Handler(
                self.__rpc_is_whitelist_admin,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsWhitelistAdminRequest,
                QueryIsWhitelistAdminResponse,
            ),
            "/emissions.v2.Query/GetTopicLastWorkerCommitInfo": grpclib.const.Handler(
                self.__rpc_get_topic_last_worker_commit_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicLastCommitRequest,
                QueryTopicLastCommitResponse,
            ),
            "/emissions.v2.Query/GetTopicLastReputerCommitInfo": grpclib.const.Handler(
                self.__rpc_get_topic_last_reputer_commit_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicLastCommitRequest,
                QueryTopicLastCommitResponse,
            ),
            "/emissions.v2.Query/GetTopicRewardNonce": grpclib.const.Handler(
                self.__rpc_get_topic_reward_nonce,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicRewardNonceRequest,
                QueryTopicRewardNonceResponse,
            ),
            "/emissions.v2.Query/GetReputerLossBundlesAtBlock": grpclib.const.Handler(
                self.__rpc_get_reputer_loss_bundles_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReputerLossBundlesAtBlockRequest,
                QueryReputerLossBundlesAtBlockResponse,
            ),
            "/emissions.v2.Query/GetStakeReputerAuthority": grpclib.const.Handler(
                self.__rpc_get_stake_reputer_authority,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeReputerAuthorityRequest,
                QueryStakeReputerAuthorityResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakePlacement": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_placement,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakePlacementRequest,
                QueryDelegateStakePlacementResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakeUponReputer": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_upon_reputer,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakeUponReputerRequest,
                QueryDelegateStakeUponReputerResponse,
            ),
            "/emissions.v2.Query/GetDelegateRewardPerShare": grpclib.const.Handler(
                self.__rpc_get_delegate_reward_per_share,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateRewardPerShareRequest,
                QueryDelegateRewardPerShareResponse,
            ),
            "/emissions.v2.Query/GetStakeRemovalForReputerAndTopicId": grpclib.const.Handler(
                self.__rpc_get_stake_removal_for_reputer_and_topic_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStakeRemovalForReputerAndTopicIdRequest,
                QueryStakeRemovalForReputerAndTopicIdResponse,
            ),
            "/emissions.v2.Query/GetDelegateStakeRemoval": grpclib.const.Handler(
                self.__rpc_get_delegate_stake_removal,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDelegateStakeRemovalRequest,
                QueryDelegateStakeRemovalResponse,
            ),
            "/emissions.v2.Query/GetPreviousTopicWeight": grpclib.const.Handler(
                self.__rpc_get_previous_topic_weight,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPreviousTopicWeightRequest,
                QueryPreviousTopicWeightResponse,
            ),
            "/emissions.v2.Query/TopicExists": grpclib.const.Handler(
                self.__rpc_topic_exists,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicExistsRequest,
                QueryTopicExistsResponse,
            ),
            "/emissions.v2.Query/IsTopicActive": grpclib.const.Handler(
                self.__rpc_is_topic_active,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryIsTopicActiveRequest,
                QueryIsTopicActiveResponse,
            ),
            "/emissions.v2.Query/GetTopicFeeRevenue": grpclib.const.Handler(
                self.__rpc_get_topic_fee_revenue,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTopicFeeRevenueRequest,
                QueryTopicFeeRevenueResponse,
            ),
            "/emissions.v2.Query/GetRewardableTopics": grpclib.const.Handler(
                self.__rpc_get_rewardable_topics,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRewardableTopicsRequest,
                QueryRewardableTopicsResponse,
            ),
            "/emissions.v2.Query/GetLatestInfererScore": grpclib.const.Handler(
                self.__rpc_get_latest_inferer_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestInfererScoreRequest,
                QueryLatestInfererScoreResponse,
            ),
            "/emissions.v2.Query/GetLatestForecasterScore": grpclib.const.Handler(
                self.__rpc_get_latest_forecaster_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestForecasterScoreRequest,
                QueryLatestForecasterScoreResponse,
            ),
            "/emissions.v2.Query/GetLatestReputerScore": grpclib.const.Handler(
                self.__rpc_get_latest_reputer_score,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryLatestReputerScoreRequest,
                QueryLatestReputerScoreResponse,
            ),
            "/emissions.v2.Query/GetInferenceScoresUntilBlock": grpclib.const.Handler(
                self.__rpc_get_inference_scores_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryInferenceScoresUntilBlockRequest,
                QueryInferenceScoresUntilBlockResponse,
            ),
            "/emissions.v2.Query/GetWorkerInferenceScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_worker_inference_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWorkerInferenceScoresAtBlockRequest,
                QueryWorkerInferenceScoresAtBlockResponse,
            ),
            "/emissions.v2.Query/GetForecastScoresUntilBlock": grpclib.const.Handler(
                self.__rpc_get_forecast_scores_until_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryForecastScoresUntilBlockRequest,
                QueryForecastScoresUntilBlockResponse,
            ),
            "/emissions.v2.Query/GetWorkerForecastScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_worker_forecast_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryWorkerForecastScoresAtBlockRequest,
                QueryWorkerForecastScoresAtBlockResponse,
            ),
            "/emissions.v2.Query/GetReputersScoresAtBlock": grpclib.const.Handler(
                self.__rpc_get_reputers_scores_at_block,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryReputersScoresAtBlockRequest,
                QueryReputersScoresAtBlockResponse,
            ),
            "/emissions.v2.Query/GetListeningCoefficient": grpclib.const.Handler(
                self.__rpc_get_listening_coefficient,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryListeningCoefficientRequest,
                QueryListeningCoefficientResponse,
            ),
            "/emissions.v2.Query/GetPreviousReputerRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_reputer_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPreviousReputerRewardFractionRequest,
                QueryPreviousReputerRewardFractionResponse,
            ),
            "/emissions.v2.Query/GetPreviousInferenceRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_inference_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPreviousInferenceRewardFractionRequest,
                QueryPreviousInferenceRewardFractionResponse,
            ),
            "/emissions.v2.Query/GetPreviousForecastRewardFraction": grpclib.const.Handler(
                self.__rpc_get_previous_forecast_reward_fraction,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPreviousForecastRewardFractionRequest,
                QueryPreviousForecastRewardFractionResponse,
            ),
            "/emissions.v2.Query/GetPreviousPercentageRewardToStakedReputers": grpclib.const.Handler(
                self.__rpc_get_previous_percentage_reward_to_staked_reputers,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPreviousPercentageRewardToStakedReputersRequest,
                QueryPreviousPercentageRewardToStakedReputersResponse,
            ),
            "/emissions.v2.Query/GetTotalRewardToDistribute": grpclib.const.Handler(
                self.__rpc_get_total_reward_to_distribute,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryTotalRewardToDistributeRequest,
                QueryTotalRewardToDistributeResponse,
            ),
            "/emissions.v2.Query/GetNaiveInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_naive_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryNaiveInfererNetworkRegretRequest,
                QueryNaiveInfererNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetOneOutInfererInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_inferer_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOneOutInfererInfererNetworkRegretRequest,
                QueryOneOutInfererInfererNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetOneOutInfererForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_inferer_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOneOutInfererForecasterNetworkRegretRequest,
                QueryOneOutInfererForecasterNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetOneOutForecasterInfererNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_forecaster_inferer_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOneOutForecasterInfererNetworkRegretRequest,
                QueryOneOutForecasterInfererNetworkRegretResponse,
            ),
            "/emissions.v2.Query/GetOneOutForecasterForecasterNetworkRegret": grpclib.const.Handler(
                self.__rpc_get_one_out_forecaster_forecaster_network_regret,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryOneOutForecasterForecasterNetworkRegretRequest,
                QueryOneOutForecasterForecasterNetworkRegretResponse,
            ),
        }
